<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
	<title>Adventures in Coding</title>
	<subtitle>Daydreaming of better ways.</subtitle>
	<link href="https://coreydmccarty.dev/feed/feed.xml" rel="self"/>
	<link href="https://coreydmccarty.dev/"/>
	<updated>2022-03-10T00:00:00Z</updated>
	<id>https://coreydmccarty.dev/</id>
	<author>
		<name>Corey McCarty</name>
		<email>Corey@McCarty.dev</email>
	</author>
	
	<entry>
		<title>Getting Started with Stack Overflow</title>
		<category term="stack overflow" />
		<category term="motivation" />
		<category term="career" />
		<category term="beginners" />
		<summary>I finally decided to join the community</summary>
		<link href="https://coreydmccarty.dev/posts/2019_05_31_using_stackoverflow/"/>
		<updated>2019-05-31T00:00:00Z</updated>
		<id>https://coreydmccarty.dev/posts/2019_05_31_using_stackoverflow/</id>
		<content type="html">&lt;p&gt;Yesterday morning I woke up to find a comment had been made on an old answer that I&#39;d posted to Stack Overflow, and I opened up the site. Quickly I remembered why I don&#39;t enjoy using it. I had a reputation score of 46 and was unable to comment on anything other than my own answers. Without having much work that was pressing I decided to change that.&lt;/p&gt;
&lt;p&gt;The first thing that I did was to read through posts and vote up any question or answer that I found interesting. Quickly I had finished the forty vote max for the day, and earned three badges (Citizen Patrol, Suffrage, and Vox Populi).&lt;/p&gt;
&lt;p&gt;The next badge that came up for tracking was to edit a question that had been dormant for 6 months (Excavator). I set into the depths of #python posts. I quickly found many posts with irrelevant tags, missing tags, or poor wording, and I submitted some few dozen edits. Along the way I actually found a couple of questions that I could answer. After the first two edits were accepted I had gotten myself over the comment barrier of fifty reputation, and that was the goal.&lt;/p&gt;
&lt;p&gt;At this point something happened, and I started to enjoy the ability to comment in order to evoke more information on questions. Before I knew it, I had an answer accepted and jumped above seventy reputation.&lt;/p&gt;
&lt;p&gt;This morning I opened up Stack Overflow and was greeted with having 105 reputation and 13 badges. After years of frustration with one of our most beneficial tools as a developer, I was able to break through in the span of one afternoon. I know that many of us have frustrations with that site and how difficult it can be when you are trying to ask questions (to this day I have not posted any question). But there are many ways that you can contribute to Stack Overflow that help to raise your reputation AND help get people answers to their questions.&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>Customizing 11ty Blog</title>
		<category term="11ty" />
		<category term="tutorial" />
		<category term="travisci" />
		<category term="beginners" />
		<summary>Cleaning up after forking</summary>
		<link href="https://coreydmccarty.dev/posts/2019_08_13_starting_11ty/"/>
		<updated>2019-08-13T00:00:00Z</updated>
		<id>https://coreydmccarty.dev/posts/2019_08_13_starting_11ty/</id>
		<content type="html">&lt;p&gt;I started down this road after a simple engagement on Twitter with &lt;a href=&quot;https://dev.to/brob&quot;&gt;Brob&lt;/a&gt; and he suggested that I start blogging on dev.to and even went so far as to say that I should think about posting to my own site and syndicating over dev.to.  At that point I had a custom domain without any clue what to do with it.&lt;/p&gt;
&lt;h2&gt;But How&lt;/h2&gt;
&lt;p&gt;Luckily Brob went on to direct me &lt;a href=&quot;https://t.co/ervT8kEx1k?amp=1&quot;&gt;here&lt;/a&gt; for a straight forward tool that can publish a personal blog using GitHub Pages and TravisCI.  The instructions are really easy and after having setup my custom domain through GitHub Pages already, I had this &#39;up and running&#39; within an hour.  This is where is really stalled for a while. At this point I had my build process up and running and could view the sample blog from my custom url.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://coreydmccarty.dev/img/Generic11ty.jpg&quot; alt=&quot;Default Blog&quot; /&gt;&lt;/p&gt;
&lt;h2&gt;Get Started&lt;/h2&gt;
&lt;p&gt;Letting this thing go stagnant for too long made it feel progressively harder to get done.  The page gives clear instruction on first steps.&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;Edit the _data/metadata.json with your blogâ€™s information.&lt;/li&gt;
&lt;li&gt;(Optional) Edit .eleventy.js with your configuration preferences.&lt;/li&gt;
&lt;li&gt;Delete this message from _includes/layouts/base.njk.&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;h2&gt;Edit _data/metadata.json&lt;/h2&gt;
&lt;pre class=&quot;language-json&quot;&gt;&lt;code class=&quot;language-json&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token property&quot;&gt;&quot;title&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Your Blog Name&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token property&quot;&gt;&quot;url&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;https://myurl.com/&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token property&quot;&gt;&quot;description&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;I am writing about my experiences as a naval navel-gazer.&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token property&quot;&gt;&quot;feed&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token property&quot;&gt;&quot;subtitle&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;I am writing about my experiences as a naval navel-gazer.&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token property&quot;&gt;&quot;filename&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;feed.xml&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token property&quot;&gt;&quot;path&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;/feed/feed.xml&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token property&quot;&gt;&quot;url&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;https://myurl.com/feed/feed.xml&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token property&quot;&gt;&quot;id&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;https://myurl.com/&quot;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token property&quot;&gt;&quot;author&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token property&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Your Name Here&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token property&quot;&gt;&quot;email&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;youremailaddress@example.com&quot;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This stuff is really easy.  I&#39;m starting to feel ashamed of having waited so long to work on this. All of the data here can be put together inside of 5 minutes.&lt;/p&gt;
&lt;h2&gt;Delete this message from _includes/layouts/base.njk&lt;/h2&gt;
&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;main&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;tmpl-post&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;warning&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;ol&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;          &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;li&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;Edit the &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;code&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;_data/metadata.json&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;code&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt; with your blogâ€™s information.&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;li&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;          &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;li&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;(Optional) Edit &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;code&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;.eleventy.js&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;code&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt; with your configuration preferences.&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;li&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;          &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;li&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;Delete this message from &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;code&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;_includes/layouts/base.njk&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;code&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;.&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;li&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;ol&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;p&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;em&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;This is an &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;a&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;href&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;https://www.11ty.io/&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;Eleventy project&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;a&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt; created from the &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;a&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;href&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;https://github.com/11ty/eleventy-base-blog&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;code&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;eleventy-base-blog&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;code&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt; repo&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;a&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;.&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;em&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;p&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;      &lt;br /&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;main&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Hack off that one div.  Again I&#39;m not sure what I was expecting to be difficult in this setup.&lt;/p&gt;
&lt;h2&gt;About&lt;/h2&gt;
&lt;p&gt;In order to customize the &amp;quot;About&amp;quot; page that is linked in the top nav pane you will need to edit about/index.md. While the markdown spec is prolifically generic, if you have any experience with using markdown on Reddit, Discord, or GitHub then it is pretty easy to use. Personally I am writing this through IntelliJ Community Edition with Markdown Support plugin and I&#39;m able to see the output in realtime. Put in some basic information that you would like to be displayed on your page.&lt;/p&gt;
&lt;h2&gt;Start Blogging&lt;/h2&gt;
&lt;p&gt;After getting these things all completed you can start writing your first blog entry.  I&#39;m writing this entry as I complete the work that I&#39;m describing.  While working I have Eleventy running as &lt;code&gt;npx eleventy --server --watch&lt;/code&gt; so that the build picks up whatever changes I make and automatically serves them for viewing in the browser (I&#39;d hate to be publishing this without first testing that it works).&lt;/p&gt;
&lt;p&gt;While writing this post I was able to get an image included using the included html templating language with &lt;code&gt;&amp;lt;center&amp;gt;&amp;lt;img src=&amp;quot;/img/Generic11ty.bmp&amp;quot;/&amp;gt;&amp;lt;/center&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Creating tags for your posts is as easy as adding them in the heading of the markdown file after the default of &#39;post&#39;.&lt;/p&gt;
&lt;pre class=&quot;language-yaml&quot;&gt;&lt;code class=&quot;language-yaml&quot;&gt;&lt;span class=&quot;token key atrule&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; Customizing 11ty Blog  &lt;br /&gt;&lt;span class=&quot;token key atrule&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; Cleaning up after forking  &lt;br /&gt;&lt;span class=&quot;token key atrule&quot;&gt;date&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token datetime number&quot;&gt;2019-08-13&lt;/span&gt;  &lt;br /&gt;&lt;span class=&quot;token key atrule&quot;&gt;tags&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;  &lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; post&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; 11ty  &lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; travisci  &lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; meta  &lt;br /&gt;&lt;span class=&quot;token key atrule&quot;&gt;layout&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; layouts/post.njk  &lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Still a work in progress&lt;/h2&gt;
&lt;p&gt;At this point I have gotten the blog up and running with my custom information so that it feels more like mine and less like some code that I forked and forgot about.  While I&#39;m not exactly a frontend developer, I plan on sharing my future work on some custom css as well as my online resume generator.&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>Discovering My Impostor Syndrome</title>
		<category term="impostorsyndrome" />
		<category term="mentalhealth" />
		<category term="career" />
		<category term="beginners" />
		<summary>Coming to better understanding of my skill level</summary>
		<link href="https://coreydmccarty.dev/posts/2019_09_13_discovering_my_imposter_syndrome/"/>
		<updated>2019-09-13T00:00:00Z</updated>
		<id>https://coreydmccarty.dev/posts/2019_09_13_discovering_my_imposter_syndrome/</id>
		<content type="html">&lt;p&gt;I&#39;ve now been working as a developer for five years, but along the way I never felt like my skill level had improved. During that time I had spent four solid years working on the same application with a number of very talented developers who knew a great deal more than I. It was great as I was able to learn so many different things about our application and all of the technology and systems directly around us.&lt;/p&gt;
&lt;h2&gt;A Bit About Our Application&lt;/h2&gt;
&lt;p&gt;We owned and maintained a data storage solution that served CRUD operations as a Java web service over SOAP requests. We deployed into a Tomcat instance that we also owned and managed using a &#39;pipeline&#39; that consisted of a build server where we checked out code from SVN repository, compiled, and then pushed out into our application servers (RedHat VM&#39;s that were ours alone); all of which was being done with our custom written bash scripts which were highly interdependent. Our data storage was a mix of Oracle SQL Server and Datastax/Cassandra NoSQL clusters. We utilize Java Messaging Services (JMS) to publish messages out to people interested in updates to the data, and Java Management Extensions (JMX) to trigger various processes in our application from outside the already running Java.&lt;/p&gt;
&lt;h2&gt;Back to the Meta&lt;/h2&gt;
&lt;p&gt;So, along the many years of supporting and managing this application I became deeply intimate with it&#39;s inner workings (some of my peers would refer to ME as the Subject Matter Expert).  During the majority of this time my primary duties did NOT include writing changes to the Java code itself.  The program is &#39;wired&#39; via some controlling tables in the database that tell it where data is and how to handle it. Due the the nature of this application, there were design choices made that meant that it was not a good fit for pulling out large data set, but should be queried as specifically as possible. As such, clients had to be advised as to how they might fit their logic flow into our data access methodologies.  There was a great deal of working with these client teams to model their data and the ways that they would access it so that neither their application nor ours was negatively affected.  &lt;strong&gt;I became a specialist in this application.&lt;/strong&gt;  That implied a great deal of knowledge in how our environment functioned.  I thought that this was just how everyone worked.&lt;/p&gt;
&lt;h2&gt;Time for a New Team&lt;/h2&gt;
&lt;p&gt;After the four years that I spent with that team, I was granted a transfer into another team for an adjacent application.  In the early months with this team I have had the privilege to go into a cloud training and redesigning one of the applications to adopt a new tool set and environment.  We are moving from WebLogic deployed XML configured Java (still SOAP) web service into Springboot with a Pivotal Cloud Foundry deployment.  Most of our developers were VERY excited about attending these sessions for eight weeks.&lt;/p&gt;
&lt;p&gt;As we work through moving files over from the old project into the new, there is a lot of finding and string replacing, and the like.  After having become pretty fluent in SED, GREP, FIND, and use of IntelliJ, these tasks were pretty simple and I would rattle off Bash commands to make it happen.  This is when I started getting the comments about being a &#39;bash wizard&#39; or &#39;command line guru&#39; as apparently nobody else on the team is as comfortable with these things.  When it comes time to find occurrences of things and usages throughout the entirety of our project Eclipse proved to be a poor tool for the job as it was very slow and cumbersome to deal with.  IntelliJ on the other hand offers quick tools for these things.  Again, I hear sighs and comments about &#39;we know, IntelliJ is better&#39; as everyone around me continues using Eclipse and Spring Tool Suite.  Many of the developers on this team have been coding for more than a decade, and are respecting of my seemingly well formed opinion on things.  ** &lt;strong&gt;MIND BLOWN&lt;/strong&gt; **&lt;/p&gt;
&lt;h2&gt;Am I a Senior?&lt;/h2&gt;
&lt;p&gt;Now I&#39;m forced to evaluate whether my previous thoughts of being a junior to --maybe-- mid level developer could be largely mistaken.  After having gotten a deep knowledge around some subjects (even beyond the engineering classes in college) I somehow managed to &lt;strong&gt;completely&lt;/strong&gt; overlook the value of my skill set.  I have done all that I know how in terms of assisting anyone that I know with high level troubleshooting of issues that they may be facing in whatever development work that they might have as well as working with some online communities to help people learn programming and overcome issues that they may be facing.  Looking back, I do realize that most of the times I can help them at least find the direction to look in for finding the cause of their problem.&lt;/p&gt;
&lt;h2&gt;Impostor Syndrome&lt;/h2&gt;
&lt;p&gt;It dawns on me only after this realization that the standard explanation of &amp;quot;believing that someone will discover you as a phony&amp;quot; might not encompass all of what entails impostor syndrome.  My belief wasn&#39;t that I&#39;d be found as a phony, but instead that the position that I held was of little importance and skill; especially as most of my work didn&#39;t involve writing &#39;code&#39;.  I&#39;m just now coming to realize that having been so far junior to the peers in my old team led me to a &lt;em&gt;very&lt;/em&gt; skewed view of what is junior.  I had been given tasks thought to be below the rest of my team and just believed that these were super easy, and not that my skills were sufficient that I was getting bigger work than a fresh graduate would be given.  Complex data manipulation with hand written scripts and giant Bash one-liners isn&#39;t something that someone exactly understands right out of school, but it would be something that I did as a &#39;menial&#39; task.&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;With so much material already out there on impostor syndrome, I still never understood it to be quite what I&#39;ve experienced.  These random thoughts might be a bit off on the definition of what most people would consider the syndrome to be, but overall I feel like the intention comes down very much to the same thing.  I really hope that this helps somebody else along their journey.&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>Dependency Hell</title>
		<category term="java" />
		<category term="gradle" />
		<category term="technicaldebt" />
		<category term="codequality" />
		<summary>Best practices must evolve</summary>
		<link href="https://coreydmccarty.dev/posts/2019_09_20_dependency_hell/"/>
		<updated>2019-09-20T00:00:00Z</updated>
		<id>https://coreydmccarty.dev/posts/2019_09_20_dependency_hell/</id>
		<content type="html">&lt;h2&gt;Traditional Best Practices&lt;/h2&gt;
&lt;p&gt;It is typically accepted that any code that is needed in more than one place should be abstracted away somewhere.  Classes with repeated logic get methods, packages with repeated logic get classes, projects with repeated logic get dependency projects.  It makes sense.  You don&#39;t want to update the code in many places, just do it once and let it trickle through the code base, and when you moved jar files manually from output of one project into another for usage then you could be pretty confident that things would remain stable.&lt;/p&gt;
&lt;h2&gt;To the Cloud!&lt;/h2&gt;
&lt;p&gt;Once you move a legacy java web service into the modern era then a few things happen. SOAP becomes REST (I wish), XML becomes annotations and Java configuration classes, and you move from a traditional servlet container (Tomcat, WebLogic, etc) into Springboot jars (typically with Tomcat baked in). Something that should also happen between Y2K and cloud native application deployment would be a modern build tool with an artifact repository.  We&#39;re moving from Ant to Gradle, and utilizing a Nexus artifact repository for our dependencies.&lt;/p&gt;
&lt;p&gt;This is all great, and I&#39;m thoroughly enjoying the learning that I&#39;m getting in this position. But, our application has a spiderweb of 6 &#39;common&#39; dependency jars that we own.  The application that we are currently upgrading uses 4 of them.  There is one for each of two databases (logical) and then there is a SUPER DEPENDENCY that all of the others inherit EVERYTHING from.  To make things even more difficult, the application that we are working on depends directly on the SUPER jar as well as three jars that then depend on the SUPER jar.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;ENTER HEARTACHE&lt;/strong&gt;&lt;br /&gt;
Gradle is a wonderful tool. After our having gotten it working, I realized that local environment setup means being on the right git branch and having some environment variables setup for running the application so that we don&#39;t accidentally commit passwords while working around things that are done by our CI/CD.  Along the way however, there were many pain points.  Logging dependencies are apparently buried in every single thing that we use, and apparently SLF4J was being pulled down by the dozens.&lt;/p&gt;
&lt;p&gt;We are told that the original architect and developer of our application was an absolute genius.  We are not.  This thing implemented it&#39;s own hibernate, property handler, application context, and many other things that are gotten for free with modern build tools, frameworks, and dependency injection; and many of these features are implemented deep within our dependency jars.  Particularly the application context and property handler were implemented all the way down in the SUPER jar.  They required access to a particular property file on the filesystem where the application resides.  I can see where that would have made the management of some dozen applications more uniform and easily understood.  When you deploy into a Cloud Foundry environment then the file system isn&#39;t exactly something that is at your disposal.  We have overcome this by adopting a configuration server to serve property files from git through a web server that makes them immediately available to any server making request for it.  SUPER jar doesn&#39;t like that.  FILE NOT FOUND meets NULL POINTER and everything breaks. Refactoring the four dependencies has been deemed outside the scope of our seven week engagement with the cloud foundry team that is helping us.&lt;/p&gt;
&lt;h2&gt;Solutions&lt;/h2&gt;
&lt;p&gt;We eventually managed some quick fixes to make things work, and were given the confidence by our business team that we will be working on a complete ground up redesign of our applications in the future where we would have the opportunity to make corrections to the things that caused us so many problems.&lt;/p&gt;
&lt;p&gt;Java configuration classes replaced each of our XML files that were used previously, and we were able to force feed the home baked application context with properties from the configuration server, and overcome some issues.&lt;/p&gt;
&lt;p&gt;Later we found an issue with our Junit design that meant that initialization was attempting to read that same property file, and we were able to overcome this by a quick fix to the SUPER jar to make direct use of &lt;code&gt;&amp;quot;${foo}&amp;quot;&lt;/code&gt; notation and commenting away the file read.&lt;/p&gt;
&lt;p&gt;The gradle build file required a &lt;strong&gt;TON&lt;/strong&gt; of excluding to prevent duplication of dependencies (which may or may not have been based in different groups).  We have decided that these common jars should not be so interdependent because we currently require touching of six projects in order to make one work.&lt;/p&gt;
&lt;p&gt;If you have any stories, recommendations, or solutions that you&#39;ve come across for such thing then I ask that you please comment.&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>Using Markdown for Notes</title>
		<category term="productivity" />
		<category term="markdown" />
		<category term="vscode" />
		<category term="css" />
		<summary>Increasing Productivity with Markup Language</summary>
		<link href="https://coreydmccarty.dev/posts/2020_01_02_markdown_for_notes/"/>
		<updated>2020-01-13T00:00:00Z</updated>
		<id>https://coreydmccarty.dev/posts/2020_01_02_markdown_for_notes/</id>
		<content type="html">&lt;p&gt;I recently found myself with four different files opened long term in Notepad++ that all centered around one set of changes that I was working on, and that seemed a bit absurd.  I was keeping one file open for schema definitions, another for java snippets, another for meeting notes, and another for the actual requirement description. I decided that I should be able to consolidate these notes in a meaningful way, and spent several hours walking through formatting these things together as YAML and then XML before settling on Markdown.&lt;/p&gt;
&lt;p&gt;If you aren&#39;t familiar with Markdown, &lt;a href=&quot;https://en.wikipedia.org/wiki/Markdown&quot;&gt;Wikipedia&lt;/a&gt; says this:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Markdown is a lightweight markup language with plain text formatting syntax. Its design allows it to be converted to many output formats, but the original tool by the same name only supports HTML.[9] Markdown is often used to format readme files, for writing messages in online discussion forums, and to create rich text using a plain text editor.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;You are likely familiar with Markdown already as it is used on Github (README.md), Reddit comments, Discord, Slack and others. It has functionality to include code blocks with language specific highlighting, links, bullet lists, numbered lists, six levels of headers, not to mention &lt;strong&gt;different&lt;/strong&gt; &lt;em&gt;text&lt;/em&gt; &lt;s&gt;decorations&lt;/s&gt;.&lt;/p&gt;
&lt;h1&gt;Example&lt;/h1&gt;
&lt;p&gt;This code&lt;/p&gt;
&lt;pre class=&quot;language-markdown&quot;&gt;&lt;code class=&quot;language-markdown&quot;&gt;&lt;span class=&quot;token title important&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;#&lt;/span&gt; Heading 1&lt;/span&gt;&lt;br /&gt;information&lt;br /&gt;&lt;span class=&quot;token list punctuation&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token bold&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;token content&quot;&gt;bold&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;**&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token list punctuation&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token italic&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;token content&quot;&gt;italic&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;*&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token list punctuation&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token bold&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;token content&quot;&gt;&lt;span class=&quot;token italic&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;token content&quot;&gt;bold/italic&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;*&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;**&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token list punctuation&quot;&gt;+&lt;/span&gt; nested&lt;br /&gt;&lt;span class=&quot;token title important&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;##&lt;/span&gt; Heading 2&lt;/span&gt;&lt;br /&gt;stuff and things&lt;br /&gt;&lt;span class=&quot;token list punctuation&quot;&gt;1.&lt;/span&gt; [ ] Unchecked box&lt;br /&gt;&lt;span class=&quot;token list punctuation&quot;&gt;2.&lt;/span&gt; [x] Checked box&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Looks like this:&lt;/p&gt;
&lt;h1&gt;Heading 1&lt;/h1&gt;
&lt;p&gt;information&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;bold&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;italic&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;strong&gt;bold/italic&lt;/strong&gt;&lt;/em&gt;
&lt;ul&gt;
&lt;li&gt;nested&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Heading 2&lt;/h2&gt;
&lt;p&gt;stuff and things&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;[ ] Unchecked box&lt;/li&gt;
&lt;li&gt;[x] Checked box&lt;/li&gt;
&lt;/ol&gt;
&lt;hr /&gt;
&lt;p&gt;My primary goal when I set out on this journey was to have support to fold sections that I&#39;m not currently looking at, but what I got with Markdown is so much more. I usually keep notes open in Notepad++, but for some reason I decided to use VSCode. I&#39;m pretty glad that I did, in hindsight because what I currently have configured works significantly better than anything I&#39;ve ever gotten in Notepad++.&lt;/p&gt;
&lt;p&gt;Through the last week I&#39;ve wound up with a few customizations that make life a bit better for me. I got a few plugins and wrote some custom CSS, and now I&#39;m really happy with the whole thing.&lt;/p&gt;
&lt;h2&gt;Markdown All in One plugin&lt;/h2&gt;
&lt;p&gt;Helps alot, with live preview, formatting lists, toggling styles, generating linked table of contents, print to html, format tables, and pretty math symbols.
&lt;a href=&quot;https://github.com/yzhang-gh/vscode-markdown&quot;&gt;The Markdown All in One plugin repository can be found here&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Custom CSS&lt;/h2&gt;
&lt;p&gt;This relates directly to the live preview which by default does not differentiate the headers from the primary text (although it does color the code blocks).  markdown.styles setting allows you to define a css file to apply to the preview.  I then used the markdown.extension.print.onFileSave setting to figure out how to select the bits that I wanted to cutomize. The parts that I thought to be important were having different colors for the different header levels, code block backgrounds that are visibly distinct from the other text,&lt;/p&gt;
&lt;h2&gt;Insert Date String&lt;/h2&gt;
&lt;p&gt;To quickly insert date or dateTime into my notes this plugin is helpful.  I added a keybind to &lt;code&gt;Ctrl+Shift+i+d&lt;/code&gt; to insert date without time. The formatting is configurable to your needs. &lt;a href=&quot;https://github.com/jsynowiec/vscode-insertdatestring&quot;&gt;The Insert Date String repository can be found here&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Snippets&lt;/h2&gt;
&lt;p&gt;For my personal usage I also wanted to include information for frontmatter/header.  This one is specifically for my 11ty blog entries which is also written in markdown.&lt;/p&gt;
&lt;pre class=&quot;language-json&quot;&gt;&lt;code class=&quot;language-json&quot;&gt;	&lt;span class=&quot;token property&quot;&gt;&quot;frontmatter&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;		&lt;span class=&quot;token property&quot;&gt;&quot;scope&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;markdown&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;		&lt;span class=&quot;token property&quot;&gt;&quot;prefix&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;frontmatter&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;		&lt;span class=&quot;token property&quot;&gt;&quot;body&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;br /&gt;			&lt;span class=&quot;token string&quot;&gt;&quot;---  &quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;			&lt;span class=&quot;token string&quot;&gt;&quot;title: ${1:title}  &quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;			&lt;span class=&quot;token string&quot;&gt;&quot;description: ${2:description}  &quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;			&lt;span class=&quot;token string&quot;&gt;&quot;date: ${3:Ctrl+Shift+i+d}  &quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;			&lt;span class=&quot;token string&quot;&gt;&quot;tags:  &quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;			&lt;span class=&quot;token string&quot;&gt;&quot;	- ${4:first}  &quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;			&lt;span class=&quot;token string&quot;&gt;&quot;	- ${5:second}  &quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;			&lt;span class=&quot;token string&quot;&gt;&quot;layout: layouts/post.njk  &quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;			&lt;span class=&quot;token string&quot;&gt;&quot;---  &quot;&lt;/span&gt;&lt;br /&gt;			&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;			&lt;span class=&quot;token property&quot;&gt;&quot;description&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;front-matter for 11ty blog post&quot;&lt;/span&gt;&lt;br /&gt;	&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;which get&#39;s pasted in like this, and i can tab through the variables easily.&lt;/p&gt;
&lt;pre class=&quot;language-yaml&quot;&gt;&lt;code class=&quot;language-yaml&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;---&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token key atrule&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; title&lt;br /&gt;&lt;span class=&quot;token key atrule&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; description&lt;br /&gt;&lt;span class=&quot;token key atrule&quot;&gt;date&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; Ctrl+Shift+i+d&lt;br /&gt;&lt;span class=&quot;token key atrule&quot;&gt;tags&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; first&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; second&lt;br /&gt;&lt;span class=&quot;token key atrule&quot;&gt;layout&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; layouts/post.njk&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;---&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I&#39;d also love to hear thoughts and experiences that you may have with markdown or other languages for taking your notes.  Editor/plugin recommendations, tips, and tricks are all welcome as well.&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>Markdown Style</title>
		<category term="markdown" />
		<category term="css" />
		<category term="vscode" />
		<summary>This is what I use for markdown in VSCode</summary>
		<link href="https://coreydmccarty.dev/posts/2020_01_02_markdown_css/"/>
		<updated>2020-01-14T00:00:00Z</updated>
		<id>https://coreydmccarty.dev/posts/2020_01_02_markdown_css/</id>
		<content type="html">&lt;p&gt;While writing about &lt;a href=&quot;https://coreydmccarty.dev/posts/2020_01_02_markdown_for_notes&quot;&gt;using Markdown to boost productivity in note taking&lt;/a&gt; I thought that maybe some people might be interested. in this configuration.&lt;/p&gt;
&lt;pre class=&quot;language-css&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;&lt;span class=&quot;token selector&quot;&gt;:root&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token comment&quot;&gt;/* from https://www.behance.net/gallery/8482091/Flat-Bold-UI-Kit */&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token property&quot;&gt;--black&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; #333333&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token property&quot;&gt;--light-gray&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; #B3B8BC&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token property&quot;&gt;--dark-gray&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; #656565&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token property&quot;&gt;--blue&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; #46BDDF&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token property&quot;&gt;--green&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; #52D273&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token property&quot;&gt;--red&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; #E95065&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token property&quot;&gt;--orange&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; #E57255&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token property&quot;&gt;--yellow&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; #E5C453&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token property&quot;&gt;--background&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; #484848&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;br /&gt;  &lt;span class=&quot;token comment&quot;&gt;/* Other Sources */&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token property&quot;&gt;--other-background&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; #252525&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token property&quot;&gt;--white&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; #FFF&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;br /&gt;  &lt;span class=&quot;token property&quot;&gt;background-color&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;var&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;--other-background&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;br /&gt;&lt;span class=&quot;token selector&quot;&gt;h1, h2, h3, h4, h5, h6&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token property&quot;&gt;font-weight&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; bolder&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token selector&quot;&gt;h1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token property&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;var&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;--blue&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token selector&quot;&gt;h2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token property&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;var&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;--green&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token selector&quot;&gt;h3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token property&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;var&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;--yellow&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token selector&quot;&gt;h4&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token property&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;var&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;--orange&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token selector&quot;&gt;h5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token property&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;var&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;--red&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token selector&quot;&gt;h6&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token property&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;var&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;--white&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token selector&quot;&gt;a:link&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token property&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; skyblue&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token property&quot;&gt;font-weight&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; bolder&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token selector&quot;&gt;a:visited&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token property&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; lightskyblue&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token property&quot;&gt;font-weight&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; bolder&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token selector&quot;&gt;p, ul, ol, li&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token property&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;var&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;--light-gray&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token selector&quot;&gt;pre&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token property&quot;&gt;background-color&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; #000 &lt;span class=&quot;token important&quot;&gt;!important&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token selector&quot;&gt;strong&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token property&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;var&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;--white&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
</content>
	</entry>
	
	<entry>
		<title>Blogging Goals</title>
		<category term="discuss" />
		<category term="watercooler" />
		<category term="blogging" />
		<category term="writing" />
		<summary>Direction for blogging success</summary>
		<link href="https://coreydmccarty.dev/posts/2020_01_06_why_blog/"/>
		<updated>2020-01-17T00:00:00Z</updated>
		<id>https://coreydmccarty.dev/posts/2020_01_06_why_blog/</id>
		<content type="html">&lt;h1&gt;Blogging Guidelines&lt;/h1&gt;
&lt;p&gt;I was reading &lt;a href=&quot;https://dev.to/chillhumanoid/how-to-make-dev-better-in-2020-9oj&quot;&gt;How To Make Dev Better In 2020&lt;/a&gt; and thought that it would be really valuable to consider some guidelines for our blogging.&lt;/p&gt;
&lt;p&gt;Excerpt:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;In some ways we have a reverse stack overflow here. No one&#39;s asking, everyone&#39;s offering.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;While this article talks against blog promotion and writer&#39;s block as topics, I believe that discussion of post content is a fundamental of our community here.&lt;/p&gt;
&lt;h1&gt;Who?&lt;/h1&gt;
&lt;p&gt;One of the greatest things about blogging is that there isn&#39;t a threshold of entry so everyone can write a blog.&lt;/p&gt;
&lt;p&gt;One of the worst things about blogging is that there isn&#39;t a threshold of entry so everyone can write a blog.&lt;/p&gt;
&lt;p&gt;When everyone has the power to blog then you wind up with a lot of noise. This means that we should consider value additions for a functional community both as blog writers and commentary in the threads, but everyone can contribute something in the community, and more importantly you will understand things more deeply when you are forced to put it into words for someone else&#39;s understandin.&lt;/p&gt;
&lt;h1&gt;What?&lt;/h1&gt;
&lt;p&gt;For the most part none of us is an authority on anything except our personal experiences and opinions. As such we should be careful about presenting things that assert themselves as law such as &amp;quot;don&#39;t ever do X&amp;quot; or &amp;quot;Y reasons why Q is a terrible thing.&amp;quot; Value in any community from discussion and openness to grow and learn together.&lt;/p&gt;
&lt;h1&gt;When?&lt;/h1&gt;
&lt;p&gt;I&#39;d say that motivation is a major factor in this. If your motivation is increase of readership then you had better keep a regular cadence. If your intention is sharing your experience with a particular issue then you write as things come up. I keep reading (and trying to enact in myself) recommendations of daily writing. The practice improves your writing as you edit previous writing before posting, and over time the editing required will reduce greatly.&lt;/p&gt;
&lt;h1&gt;Where?&lt;/h1&gt;
&lt;p&gt;There are many posts around dev.to focused on running your own blog, places for cross-posting (always remember to use canonical links), and the benefits of different communities. I personally appreciate the value in having your own hosting of all posts and I utilize 11ty&#39;s base blog forked on GitHub and served with GitHub Pages and my own custom domain (a fancy *.dev domain). Dev.to will &lt;a href=&quot;https://dev.to/p/publishing_from_rss_guide&quot;&gt;pick up the RSS and create posts for you automatically&lt;/a&gt;, and I really enjoy that both 11ty and dev.to posts can be written in markdown (my new favorite language).&lt;/p&gt;
&lt;h1&gt;Why?&lt;/h1&gt;
&lt;p&gt;This is, I think, the most important question in writing anything. What is its purpose? Who is it for? This will be different for each post, but if you don&#39;t consider it then you risk boring your audience. If the audience is beginners then you should make sure that you explain yourself thoroughly as to not confuse, but if the audience is more advanced then that level of detail will keep someone from reaching the end.&lt;/p&gt;
&lt;h2&gt;Start Discussion&lt;/h2&gt;
&lt;p&gt;I see Ben and lots of people lately posting very short questions or statements and there is usually a good amount of engagement to answer the question or thoughts on the topic.&lt;/p&gt;
&lt;h2&gt;Share Experience&lt;/h2&gt;
&lt;p&gt;These have the opportunity to be some of the very best posts. Be sure to include the finer details of the problem that you are solving, the tools that you are using and how you utilized the tools to resolve your issue. Eventually someone else will have a similar issue and your post could be paramount in helping them. Even if others don&#39;t have the same issue, it could make them aware of an issue in order prevent their encountering such.&lt;/p&gt;
&lt;h2&gt;Learn or Mold Thoughts&lt;/h2&gt;
&lt;p&gt;One of the better premises that I&#39;ve read for a post recently was &lt;a href=&quot;https://dev.to/deciduously/correct-a-beginner-about-buzzword-technologies-4bbe&quot;&gt;Correct a Beginner About Buzzword Technologies&lt;/a&gt; which led off with this:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Learning in Public&lt;br /&gt;
As I keep learning, DEV knows things. Ask them stuff.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The writer then went on to state the bits that they understood about several things and invited others correction. I find that this is actually the way that I learn about many of my misunderstandings in this field. I either make a statement or ask a question like &amp;quot;isn&#39;t X the way that Y works?&amp;quot; and I get corrected. It&#39;s the most straight forward way that I know to get information out of others as people naturally love correcting you whether it is constructive or not. Over time I know more things and my statements get corrected about fewer things.&lt;/p&gt;
&lt;p&gt;Personally I find that the mere act of writing something helps me to put my thoughts into focus and better understand my own situations and what the root of some issue may be.&lt;/p&gt;
&lt;h2&gt;Teach (something specific)&lt;/h2&gt;
&lt;p&gt;From &amp;quot;&lt;a href=&quot;https://dev.to/chillhumanoid/how-to-make-dev-better-in-2020-9oj&quot;&gt;How to Make Dev Better in 2020&lt;/a&gt;&amp;quot;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;no, we really don&#39;t need a &#39;python for beginners&#39; made by every single person ever.
Stop. It&#39;s not just python. But it&#39;s always the big languages, and it&#39;s never anything new. but it&#39;s also always different (and not in a good way). In some ways we have a reverse stack overflow here. No one&#39;s asking, everyone&#39;s offering.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://dev.to/chillhumanoid&quot;&gt;@chillhumanoid&lt;/a&gt; goes on to say:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;So what do I propose we post more of instead? Experiences. What was YOUR experience in implementing a feature in your application? Even if it&#39;s something that&#39;s common, maybe it was your first time implementing it. Talk about it. Chances are there ARE people looking for it.
But chances are that people on dev.to aren&#39;t looking for a python tutorial. Or how to get 60000 looking at their blog in 2020.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Overall, I think that the best way that we can figure out whether or not something will contribute positively in the community is participation. Read posts, comment where you can, and try writing things that aren&#39;t already done a million times.&lt;/p&gt;
&lt;h1&gt;How?&lt;/h1&gt;
&lt;p&gt;Honestly I only included this question for completeness of the most basic questions. I&#39;ve written about &lt;a href=&quot;https://dev.to/xanderyzwich/customizing-11ty-blog-1hm8&quot;&gt;personal blog setup already&lt;/a&gt;. Beyond that, basic writing development focuses on practice. Practice writing, and reading lots of things. Make yourself answer what makes you like or dislike a post. I currently have six drafts open right now that I go back and forth between as things come to mind that might help develop one post or another. I&#39;m also finding that as I write one post that I get ideas for more. Open a new file and get the basis for the idea put in there immediately. As you work on other posts you might get more ideas about that stub that you opened.&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>What Text Editors Do You Use?</title>
		<category term="watercooler" />
		<category term="discuss" />
		<category term="tools" />
		<category term="editor" />
		<summary>However many it may be, what editors do you find helpful in your workflow?</summary>
		<link href="https://coreydmccarty.dev/posts/2020_01_08_text_editors/"/>
		<updated>2020-01-17T00:00:00Z</updated>
		<id>https://coreydmccarty.dev/posts/2020_01_08_text_editors/</id>
		<content type="html">&lt;p&gt;When your work involves typing and manipulating data files with many different sources then you wind up with different tasks that can be accomplished in many ways. What are your favorite text editors or ways of manipulating text for different tasks?&lt;/p&gt;
&lt;h2&gt;VSCode&lt;/h2&gt;
&lt;p&gt;This is the newest editor in my toolbox. It has really good support for markdown and you can use it to open a regular file folder and access all of the contents. Lots of plugins and themes available.&lt;/p&gt;
&lt;h2&gt;Notepad++&lt;/h2&gt;
&lt;p&gt;I&#39;ve used this for years and gotten a lot of enjoyment out of it. The code highlighting is entirely customizable in addition to the themes that are available online. There are plugins, but I&#39;ve personally had issues with using them on my work laptop with user policies. One great feature is that when you close Notepad++ it will actually keep any unsaved work that you have without your explicitly saving the file anywhere. I used this for years ;keeping text files for ongoing tasks where the information wasn&#39;t relevant long term. VSCode is actually starting to replace this for me, especially with my adoption of markdown for notes that might include several different languages.&lt;/p&gt;
&lt;h2&gt;Programmer&#39;s Notepad&lt;/h2&gt;
&lt;p&gt;While very similar to Notepad++, Programmer&#39;s Notepad has a find/replace functionality that can use mixed backslash characters (\n, \r, \t, etc.) and simple regular expressions. While the finding could be done with regular expression in another editor, Programmer&#39;s notepad will let you replace the new line characters easily, which I found to be usefule when dealing with reformatting of data extracts and programmatically formed queries.&lt;/p&gt;
&lt;h2&gt;JetBrains IDEA &amp;amp; PyCharm&lt;/h2&gt;
&lt;p&gt;Anytime that I need to run Python code, or run Java projects (including Maven, Gradle, and Springboot tasks) then I greatly prefer the JetBrains editors. Also, the tooling for interaction with version control systems is top shelf! The merge tool, diff, and local history are very helpful. I also find that the global find tools are better than the rest. There are separate tools for finding a file name that contains your string or finding the string in a file. The global string replace tool has assisted me with package restructuring of java projects without effort.&lt;/p&gt;
&lt;h2&gt;Oracle SQL Developer&lt;/h2&gt;
&lt;p&gt;Writing queries with code completion with your actual database information is great. It helps that you can execute queries and export result data in multiple file formats.&lt;/p&gt;
&lt;h2&gt;Excel&lt;/h2&gt;
&lt;p&gt;While it seems a bit out of place in a discussion of code editors, when you have comma separated data that needs to be reformatted adhoc then Excel can be a really good tool, especially when coupled with another pure text editor. We had a playbook that clients would fill out that I would translate into sql for the database insertion (it actually controlled the functionality of our application), and I would use Excel for moving the columns around, clear out unnecessary data, auto incrementing some values, and then I could paste the first and last parts of the insert statement into the first and last columns of the spreadsheet.&lt;/p&gt;
&lt;h2&gt;Microsoft Word&lt;/h2&gt;
&lt;p&gt;This is the only tool that I&#39;ve found that will quickly and easily make everything lowercase. That&#39;s really all that I use it for. Well, that and writing documentation that will be for someone who isn&#39;t a programmer.&lt;/p&gt;
&lt;h2&gt;grep/sed/awk&lt;/h2&gt;
&lt;p&gt;Grep helps pull out the data that does/doesn&#39;t match a given pattern/string.&lt;/p&gt;
&lt;p&gt;Sed helps replace a given pattern/string (even several at a time).&lt;/p&gt;
&lt;p&gt;Awk is really helpful for pulling out certain pieces of column formatted data.&lt;/p&gt;
&lt;p&gt;It&#39;s also of important note that with these tools that you really get the most power out of them when you start chaining them together with linux command line pipes (&amp;quot;|&amp;quot;) and output redirects (&amp;quot;&amp;gt;&amp;quot; or &amp;quot;&amp;gt;&amp;gt;&amp;quot;) to write files or &lt;code&gt;wc -l&lt;/code&gt; to count the lines.&lt;/p&gt;
&lt;p&gt;Altogether these things can be used almost like sql from the linux command line.&lt;/p&gt;
&lt;h2&gt;Python Scripts&lt;/h2&gt;
&lt;p&gt;Python is really quick and powerful for writing text manipulation scripts. Opening a file, iterating through it&#39;s lines, splitting the line into variables and checking for given values can be achieved in 5 lines of code.&lt;/p&gt;
&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;file.csv&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;r&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;as&lt;/span&gt; input_data&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; line &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; input_data&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br /&gt;	    a&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; b&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; c&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; d &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; line&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;split&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;,&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;		&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; b &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;fubar&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br /&gt;		    do&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;thing&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
</content>
	</entry>
	
	<entry>
		<title>Writing Pitfalls</title>
		<category term="blogging" />
		<category term="writing" />
		<category term="discuss" />
		<category term="watercooler" />
		<summary>As you write more, you realize that you need to improve some things.</summary>
		<link href="https://coreydmccarty.dev/posts/2020_01_08_writing_faults/"/>
		<updated>2020-01-17T00:00:00Z</updated>
		<id>https://coreydmccarty.dev/posts/2020_01_08_writing_faults/</id>
		<content type="html">&lt;p&gt;I&#39;ve been working since New Year&#39;s trying to write something daily without completing it. As I write ideas come to mind and I&#39;ll open a new file to hold the new thought however short it may be. The continuing echo of &#39;write more&#39; has permeated dev.to recently, so I&#39;m surely not the only one.&lt;/p&gt;
&lt;p&gt;I just want to discuss bad habits, and maybe we can help one another to be more aware of what we may be doing, similar to saying &#39;umm&#39; too much when you talk.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;I have found that I use the word &#39;to&#39; constantly; so much so, that I currently have VSCode set to highlight &#39; to &#39; and I&#39;m refactoring as many of them away as I can.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;My spacing after periods is terribly inconsistent. I learned in school that there should be two, but in recent years I have succumbed to the one that my phone prefers. As a result, I find myself replacing everytime I used two space to be one, just for consistency.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;I also find that I tend towards writing very long sentences. I make sure that they are grammatically correct and not just run-ons, but long clauses strung together can lend itself to be more difficult to follow.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
</content>
	</entry>
	
	<entry>
		<title>My Introduction to Jenkins</title>
		<category term="jenkins" />
		<category term="devops" />
		<category term="productivity" />
		<category term="learning" />
		<summary>What I&#39;ve learned about Jenkins CI/CD in the last six months.</summary>
		<link href="https://coreydmccarty.dev/posts/2020_02_13_jenkins/"/>
		<updated>2020-02-13T00:00:00Z</updated>
		<id>https://coreydmccarty.dev/posts/2020_02_13_jenkins/</id>
		<content type="html">&lt;p&gt;Last fall I had the joy of working through a PI in my company&#39;s cloud readiness dojo, and it was really fun and exciting to those of us that like to play with new tech (oddly enough, not my entire dev team). The overall goal of this activity was to take our existing applications and make them function in the cloud that our internal Platform as a Service (Paas) team had put together.&lt;/p&gt;
&lt;h2&gt;What We Had&lt;/h2&gt;
&lt;p&gt;The team owns around 15 Java applications; nearly half of which are SOAP web services that are deployed into Weblogic servlet containers. Weblogic handles most of your connection related things externally from the application. There was a developer framework library that we used from another internal team that did many things for us. There was a nice neat logging configuration with four types of logs that each rolled through 20 files automatically using an internal flavor of Log4j. Any configuration that needed to be done was externalized into the file system so that when you needed to change something then you could just update the config file and bounce the servlet container. Our build process had been recently converted from Ant to Gradle, and we&#39;d adopted a Nexus artifact repository where we stored our built products.&lt;/p&gt;
&lt;h2&gt;Where We Were Going&lt;/h2&gt;
&lt;p&gt;The deployment platform that we were instructed to adopt involves Pivotal Cloud Foundry and a Cloudbees Jenkins pipeline utility that is shared by most of the company. Splunk is used for logging. Springboot cloud config server is utilized in place of properties files, and for all practical purposes the filesystem doesn&#39;t exist.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note: None of us really knew anything about any of these tools.&lt;/strong&gt;&lt;/p&gt;
&lt;h2&gt;The Experience&lt;/h2&gt;
&lt;p&gt;In the first few days we went through PI planning; listing our existing things and what we needed to accomplish. They had a custom Springboot Initializr that saved us a week or two of time, after we got all of our credentials setup. It was really easy to get space allocated in PCF and to get a simple build to deploy something into that space. Next we went on to get our configuration server in place (it was mostly generated from the Initializr) and the repository for our config files that it would serve. After all of that really fun and exciting stuff we had a demo REST endpoint running in PCF with Springboot and reading its config from the cloud config server. COOL!&lt;/p&gt;
&lt;p&gt;It wasn&#39;t long after that when we settled into the monotony of moving several thousand lines of code into the new project. We did take the opportunity to cleanup some things like needless package depths and a ton of commented out code. We moved in the endpoint classes and began to bring over only the classes necessary to make them run. The idea being that we may shake off some cruft in the process. After the main code we would then take a few weeks to move in 415 classes full of junits that build their data in the actual database in a special schema, and we still can&#39;t figure out how to prevent these from initializing the application context between every Junit class.&lt;/p&gt;
&lt;h2&gt;Still learning&lt;/h2&gt;
&lt;p&gt;We left with a (just) functioning SOAP webservice running with Springboot jar and built-in Tomcat. It was able to deploy into our two PCF test environments but not our still-necessary VM test environments.&lt;/p&gt;
&lt;p&gt;We formed a plan and instruction document for what we&#39;d done up to that point, and our offshore team was able to do some really amazing things and get another 5 application migrated to a similar point in the next 5 months. While there were some performance enhancements and contract expectations to resolve (exceptions should match those from the previous version of the application), the applications are Cloud Native!&lt;/p&gt;
&lt;p&gt;I personally started doing the additional Jenkins pipeline enhancements While this has somehow turned into a very long story (I don&#39;t do short very well), it is actually my intention to write about what I&#39;ve learned about Jenkins.&lt;/p&gt;
&lt;h2&gt;JENKINS (for real this time)&lt;/h2&gt;
&lt;p&gt;The first things that we learned about the tool was that it is a CI/CD/CT platform that lets us deploy into PCF (with internally built tools from our Paas team), and that it can hold our secrets to prevent their having to be placed into our code or configuration repositories. That&#39;s really cool!&lt;/p&gt;
&lt;p&gt;The more that I&#39;ve spent time working on Jenkins pipelines, the more I come to realize that Jenkins (and let&#39;s face it CI/CD pipelines in general) is just a fancy UI/automation for running scripts. Much of what we use is Groovy scripts that were put into a reference library that we can bring in for effortless interaction with the PCF environment and running our Gradle builds with Java that someone else manages updates for. When you get to the point of interacting with VM&#39;s for other deployments, it is done by executing SSH commands against your Linux servers. As such, there is a lot of shell scripting involved.&lt;/p&gt;
&lt;p&gt;Our Jenkins pipeline is a multi-branch pipeline that executes our Jenkinsfile definition. This allows us to build from different branches of our Gitlab repositories. The basic form of a Jenkinsfile can be found below (although to be honest I&#39;m not 100% sure what of this is standard and what is given to us by our Paas team reference pipeline).&lt;/p&gt;
&lt;pre class=&quot;language-groovy&quot;&gt;&lt;code class=&quot;language-groovy&quot;&gt;library &lt;span class=&quot;token string&quot;&gt;&#39;fu&#39;&lt;/span&gt;&lt;br /&gt;library &lt;span class=&quot;token string&quot;&gt;&#39;bar&#39;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;pipeline&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;	agent any&lt;br /&gt;	options&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;		&lt;span class=&quot;token function&quot;&gt;buildDiscarder&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;logRotator&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;numToKeepStr&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;10&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;	&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;	parameters &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;		&lt;span class=&quot;token function&quot;&gt;choice&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;name&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;PARAM_ONE&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; choices&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;fu\nbar\nbaz&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; description&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;This is the first option when you build with parameters&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;	&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;	environment&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;		FIRST &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string gstring&quot;&gt;&quot;&lt;span class=&quot;token expression&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;$&lt;/span&gt;params&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;PARAM_ONE&lt;/span&gt;&quot;&lt;/span&gt;&lt;br /&gt;		SECOND &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string gstring&quot;&gt;&quot;to.dev.thing.second&quot;&lt;/span&gt;&lt;br /&gt;		PI &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string gstring&quot;&gt;&quot;3.14159&quot;&lt;/span&gt;&lt;br /&gt;	&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;	stages &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;		&lt;span class=&quot;token function&quot;&gt;stage&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;First&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;			when &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;				anyOf &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;					environment name&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;FIRST&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; value&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;bar&#39;&lt;/span&gt;&lt;br /&gt;					environment name&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;FIRST&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; value&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;baz&#39;&lt;/span&gt;&lt;br /&gt;				&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;			&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;			steps &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;				firstThing &lt;span class=&quot;token punctuation&quot;&gt;$&lt;/span&gt;SECOND&lt;br /&gt;			&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;		&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;	&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;	&lt;span class=&quot;token function&quot;&gt;stage&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Second&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;		steps &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;			secondThing &lt;span class=&quot;token punctuation&quot;&gt;$&lt;/span&gt;PI&lt;br /&gt;			echo &lt;span class=&quot;token string gstring&quot;&gt;&quot;Hello World!&quot;&lt;/span&gt;&lt;br /&gt;			script &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;				&lt;span class=&quot;token punctuation&quot;&gt;$&lt;/span&gt;env&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;BOB &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string gstring&quot;&gt;&quot;Steve&quot;&lt;/span&gt;&lt;br /&gt;			&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;			echo &lt;span class=&quot;token string gstring&quot;&gt;&quot;Hello &lt;span class=&quot;token expression&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;$&lt;/span&gt;env&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;BOB&lt;/span&gt; !&quot;&lt;/span&gt;&lt;br /&gt;		&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;	&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I&#39;ve come to find out that the way that the reference pipeline is built is primarily just &lt;code&gt;thing.groovy&lt;/code&gt; scripts that execute &lt;code&gt;thing [params]&lt;/code&gt; command from the pipeline. I kind of wish I had known this earlier and made use of this functionality because most of my solutions look a bit more hacky. What I wound up doing was to abuse the &lt;code&gt;script&lt;/code&gt; sections as steps, and to define groovy functions outside the &lt;code&gt;pipeline&lt;/code&gt; scope that I could use to define more complex functionality to keep it from muddying the readibility of the pipeline.&lt;/p&gt;
&lt;h2&gt;That Seems Easy&lt;/h2&gt;
&lt;p&gt;What is far more complicated than actually executing any of that development work is that, I don&#39;t know if you are aware or not, but pipeline design is so complex that many people lean on other people/teams (specialists) to do it for them. We have two basic types of pipelines that we utilize.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Application Pipeline
&lt;ol&gt;
&lt;li&gt;Defined by a Jenkinsfile in the repository for that applciation&lt;/li&gt;
&lt;li&gt;Doesn&#39;t interact with any other applications&lt;/li&gt;
&lt;li&gt;Interaction with it is USUALLY triggered automatically from push/merge of the primary branches in Gitlab&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;DevOps Pipeline
&lt;ol&gt;
&lt;li&gt;Defined in it&#39;s own otherwise empty code repository&lt;/li&gt;
&lt;li&gt;Interacts with many applications&lt;/li&gt;
&lt;li&gt;Interaction with it is intentional from the &#39;Build with Parameters&#39; on Jenkins&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;That&#39;s it! It seems really straight forward, right? The issues that we have found ourselves having biggest issues with is deployment that are not in PCF and not triggering automatically from a build. We need to get similar functionality to what we have in PCF (Start, Stop, ConfigRefresh, Status, Deploy, etc).&lt;/p&gt;
&lt;p&gt;Without having the reference pipeline that handles setting environment variables in PCF when when deploy into our VM environments we had to get the credentials from Jenkins and store them in the build server for each environment. This had to be carefully considered because while we didn&#39;t want to require a build of the application to move new credentials, the number of credentials necessary for each application is different, so if we did it in the second type of pipeline then we would need to define those credentials in two different places and that becomes a tripping point to manage long term. This means that we have to build those environment variable files during build time, and we actually chose to do that for all of the VM environments during each and every build.&lt;/p&gt;
&lt;p&gt;Another thing that has taken some time and design consideration is that having to perform a build with parameters for stopping the application in an environment and then another for pushing the code, and then pushing the configuration, and then finally starting the application is a bit absurd. We do need to have each of those activities accessible individually, but now we actually need a &lt;code&gt;deploy&lt;/code&gt; action that will simplify the flow a bit.&lt;/p&gt;
&lt;h2&gt;The Benefits&lt;/h2&gt;
&lt;p&gt;While our journey with Jenkins is far from over, we are beginning to see some tremendous benefits to our life with the changes that we have. Previously we had a DevOps team that made the changes that we needed with configurations and deploying code into different test levels. With this new flow we are able to do those things at will, and even better is that we can even have someone that isn&#39;t comfortable diving into the old build server to perform these activities if needed. Our tester is not a developer by training, and is really excited at the possibility of moving a given build when necessary. We also intend on bringing any activity that we have previously executed in a server directly into a Jenkins pipeline.&lt;/p&gt;
&lt;p&gt;The next big thing that we are excited for is having our integration, regression, and stress tests executable with parameters from Jenkins instead of having someone dig around in configuration files and then run the start scripts from the server. A simple build with parameters that says to run &#39;Stress Test&#39; on &#39;VM L4&#39; with length of &#39;6hrs&#39; will be able to do all of the things that take nearly an hour presently.&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>Wholeness of Life</title>
		<category term="career" />
		<category term="learning" />
		<category term="discuss" />
		<category term="mentalhealth" />
		<category term="life" />
		<summary>Overall strategy for growth.</summary>
		<link href="https://coreydmccarty.dev/posts/2019_12_31_wholeness_of_life/"/>
		<updated>2020-02-22T00:00:00Z</updated>
		<id>https://coreydmccarty.dev/posts/2019_12_31_wholeness_of_life/</id>
		<content type="html">&lt;p&gt;We often talk about what makes a good developer and how to deal with things specifically in and around the tech industry, but I believe that most of it really comes down to how we live our life.&lt;/p&gt;
&lt;h2&gt;Hobbies&lt;/h2&gt;
&lt;p&gt;I came across this tweet that I feel is really important to acknowledge&lt;/p&gt;
&lt;blockquote class=&quot;twitter-tweet&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;i feel like my generation lost hobbies. &lt;br /&gt;&lt;br /&gt;everything doesnâ€™t have to be a hustle, side hustle, or money making enterprise. sometimes itâ€™s just fun to do something because it brings you joy, peace, relaxation, or allows you to be creative. &lt;br /&gt;&lt;br /&gt;letâ€™s rediscover hobbies in 2020.&lt;/p&gt;&amp;mdash; Kashia (@kashia) &lt;a href=&quot;https://twitter.com/kashia/status/1212041240658747393?ref_src=twsrc%5Etfw&quot;&gt;December 31, 2019&lt;/a&gt;&lt;/blockquote&gt; &lt;script async=&quot;&quot; src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt; 
&lt;p&gt;This pinpoints something that I&#39;ve been struggling to put into words as I&#39;ve developed this post. At 16 I started my first real job the day after my birthday because I had always wanted to work and have my own money. I proceeded to work more than I should as a general rule, even as my only actual bills were a cell phone and my car insurance.  I found myself voluntarily working more shifts and later than a minor should. The idea of having my own money, and thus freedom, was too attractive. It&#39;s only recently that I have noticed that I spend little time living in that freedom.  I was dedicated to work, romance, and social gatherings.&lt;/p&gt;
&lt;p&gt;I found myself in interviews at the age of thirty struggling to answer &#39;what do you like to do with your free time?&#39; which is absurd. I was unclear of my own likes. I started into gaming before my son was born (and long periods of free time disappeared). I focused on vape culture in researching, maintaining my devices, and even mixing my own liquids. More recently I&#39;ve dipped my toes into traditional wetshaving, mechanical keyboards, and fountain pens. It was after I picked up fountain pens and started doing writing with them for pleasure that I finally realized how much of my life was spent previously without any real hobbies. While this seems like a minor detail, life becomes really stressful when you don&#39;t allow yourself something to enjoy.&lt;/p&gt;
&lt;p&gt;I had actually acquired some hobbies that I hadn&#39;t even really registered as such until I pressed into writing this post. Not long after I began my first programming job I made the decision to stop smoking and start vaping. At the time there was a very large community for vaping in my area and I would go on to learn how to use and maintain my vaping equipment even to the extent of building my own coils and mixing my own liquid. My wife and I had also made an effort to get back into gaming after Fable was re-released to 360. I played through all three games in reverse order and a few other big world games for hundreds of hours over a few years. One of the friends that I made in the vaping community actually made me aware of traditional wetshaving and I wound up doing a good bit of research into that and wound up really enjoying it. More recently My local tech community got me into both mechanical keyboards and fountain pens and I have really come to enjoy using them everyday at work.&lt;/p&gt;
&lt;p&gt;After this epiphany I reflected on my career as well; how I had taken a very passive approach to advancement. It thrills me to see younger and younger people finding programming as a hobby and teaching themselves to ther point of hireability without a degree. At the same time, I reflect on the difficulty that I&#39;ve experienced finding work even with a BS in computer engineering. I want to discuss how you can more actively approach enrichment of your career. This is intended as a guide for myself and I hope that somebody else finds it helpful as well.&lt;/p&gt;
&lt;h2&gt;Code&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;How we treat our code is much like how we think of our world.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Is the glass half full or half empty? Our general feeling about this probably relates closely with how we feel about our code base. If you love your code then that&#39;s great, but I don&#39;t know many people who do. Most developers seem to feel that there is much improvement that can be done on their code, but few feel they have time to correct it.&lt;/p&gt;
&lt;p&gt;Much of what developers like to talk about is shiny and new, but most of us are working with legacy cruft. While I agree that playing with new things is great, I think that you can find lots of interesting things in your own stack to play with. Green fields are nice, but they always wind up filled with cruft eventually, and getting hands on with that cruft can be the best way to minimize its creation. A legacy system tends to have lists of known issues that provide more direction than a blank page. Issues cause us headaches, but if you make yourself take the time and improve/standardize/automate your process then you will find pride in the improvement everytime that you use the process. Ultimately we find ourselves slowly touching every last bit of code in a system over time and if you make the effort for ongoing improvement it then the resulting ownership and pride make the work of legacy code maintenance more fulfilling than moving a green field project into production.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;This post is part of a series about life, community, and learning.&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>The Importance of Community</title>
		<category term="career" />
		<category term="learning" />
		<category term="discuss" />
		<category term="mentalhealth" />
		<category term="life" />
		<summary>How we perform as a part of a team stems directly from how we interact with any group or community</summary>
		<link href="https://coreydmccarty.dev/posts/2019_12_31_community/"/>
		<updated>2020-02-23T00:00:00Z</updated>
		<id>https://coreydmccarty.dev/posts/2019_12_31_community/</id>
		<content type="html">&lt;p&gt;In this information age, driven largely by social media and online interactions it is common for people to self identify as anti-social, but I think this is a bit of a misnomer. Our involvement with communities is changing and the definition of what it social should be evolving with the available interactions. Humans are social creatures and we have characteristics that can only be realized in some type of a social environment. Not only that, but research actually shows that depression and drug use occur less often in people that take part in activities with other people.&lt;/p&gt;
&lt;p&gt;I&#39;ve found some really great (and really terrible) communities online. These were across Reddit, Facebook, Discord, Slack/IRC, and the really good communities operate with the same standards that an in person community would operate. The two most prevalent set of rules that I&#39;ve come across are  &lt;a href=&quot;https://www.reddithelp.com/en/categories/reddit-101/reddit-basics/reddiquette&quot;&gt;Reddit&#39;s rules of reddiquette&lt;/a&gt; and &lt;a href=&quot;https://www.python.org/psf/conduct/&quot;&gt;Python&#39;s Community Code of Conduct (COC)&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I&#39;ll list the Python COC as it is more succinct than Reddit&#39;s.&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Being open&lt;/strong&gt;. Members of the community are open to collaboration, whether it&#39;s on PEPs, patches, problems, or otherwise.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Focusing on what is best for the community&lt;/strong&gt;. We&#39;re respectful of the processes set forth in the community, and we work within them.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Acknowledging time and effort&lt;/strong&gt;. We&#39;re respectful of the volunteer efforts that permeate the Python community. We&#39;re thoughtful when addressing the efforts of others, keeping in mind that often times the labor was completed simply for the good of the community.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Being respectful of differing viewpoints and experiences&lt;/strong&gt;. We&#39;re receptive to constructive comments and criticism, as the experiences and skill sets of other members contribute to the whole of our efforts.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Showing empathy towards other community members&lt;/strong&gt;. We&#39;re attentive in our communications, whether in person or online, and we&#39;re tactful when approaching differing views.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Being considerate&lt;/strong&gt;. Members of the community are considerate of their peers -- other Python users.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Being respectful&lt;/strong&gt;. We&#39;re respectful of others, their positions, their skills, their commitments, and their efforts.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Gracefully accepting constructive criticism&lt;/strong&gt;. When we disagree, we are courteous in raising our issues.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Using welcoming and inclusive language&lt;/strong&gt;. We&#39;re accepting of all who wish to take part in our activities, fostering an environment where anyone can participate and everyone can make a difference.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;These are all things that mirror what we do in real life (IRL) communities, and are pretty easy to follow for most people; however, these rules have come about in response to a real issue that happens when you allow people to interact while being anonymous. Trolls are a real problem with any community. It just so happens that IRL people come to know you by face and reputation and you are either disallowed from joining events or people avoid you.&lt;/p&gt;
&lt;p&gt;Like anything else, we get better at membership to a community by practice.  Taking part in the conversation with people and working together is necessary to contribute to any social group, and for the most part software development is always done with a team.  We each need to focus on communication and the good of the group in order to achieve anything in a timely manner. We need the ability to both learn and teach within the group. This requires that we communicate effectively, making sure to listen intently and ask questions to understand what everyone is intending to say. It&#39;s really easy for us to get caught in a way of thinking that imparts rightness to someone while conversations are typically more fruitful when nobody is trying to win, instead speaking with humility. Many times we need to consider complex strengths and weaknesses. Through this process we hone our vocabulary and the definitions that we have for things so that they more closely align with our team and our industry as a whole when applicable. I believe that as a professional community we should have a value system whereby we value people by the content of their character and their ability to contribute to the community regardless of the role that they play. We should be able to easily model societal ideals of acceptance of our peers regardless of any labels or belonging to any particular group.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Networking
&lt;ul&gt;
&lt;li&gt;make friends&lt;/li&gt;
&lt;li&gt;learn about companies in your area that hire programmers&lt;/li&gt;
&lt;li&gt;understand company processes that aren&#39;t your own&lt;/li&gt;
&lt;li&gt;learn about strengths and weaknesses of tools and languages&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I try to open my network up to many different communities.  Twitter is a great place to find lots of development interaction. I also find Dev.to to be really great. I&#39;ve found a couple of Discord and Slack servers with good community where I can both learn and teach.  I think that this is really important for our understanding of things. Someone smarter than me once said that if you can&#39;t explain something to a five year old then you don&#39;t understand it. In programming I&#39;d rephrase it that if you can&#39;t explain it to a fresh junior dev then you don&#39;t understand it. Learning, as I understand it, has three phases. First we acquire information, then we process it, and finally we share it. If you aren&#39;t a part of some community (at work or otherwise) then it is really difficult to complete this process and finally commit the ideas into long term memory.&lt;/p&gt;
&lt;p&gt;One of the Slack servers that I&#39;m on posts questions every M-F morning for engagement. Sometimes it is general advice for less experienced people, other times it is just an explanation of what you are doing or have accomplished this week. I at least read the question every morning when the notification pops up on my phone. I don&#39;t clear that notification until I either have commented or I decide that I don&#39;t have anything to comment. Engaging in the community is easily forgotten when you get busy at work, but it is that community that will help you to grow the most.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;This post is part of a series about life, community, and learning.&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>Always Be Learning</title>
		<category term="career" />
		<category term="learning" />
		<category term="discuss" />
		<category term="mentalhealth" />
		<category term="life" />
		<summary>If you aren&#39;t geting better then  you are getting worse.</summary>
		<link href="https://coreydmccarty.dev/posts/2019_12_31_always_be_learning/"/>
		<updated>2020-02-24T00:00:00Z</updated>
		<id>https://coreydmccarty.dev/posts/2019_12_31_always_be_learning/</id>
		<content type="html">&lt;p&gt;It&#39;s a recurring theme among tech communities to reflect and offer advice to the newcomers. I find that near me that it always comes back to this one thing.&lt;/p&gt;
&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;token triple-quoted-string string&quot;&gt;&quot;&quot;&quot;&lt;br /&gt;ALWAYS BE LEARNING&lt;br /&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;not&lt;/span&gt; dead&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br /&gt;	learn&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In the software industry it seems that you are either terribly overworked or underworked. Both of these scenarios can bring difficulty to our learning process&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Being overworked&lt;/strong&gt; makes you rush around from task to task making the same decisions without room for enrichment. You will likely find lots of things along the way that  you wish you knew more about, but just don&#39;t have the time to dedicate for learning without using your personal/home/family time. If you do this long enough then you will get a great deal of work done, but not learn anything outside of the things that you broke while trying to keep from breaking deadlines.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Being underworked&lt;/strong&gt; means that you probably aren&#39;t coming across so many things that you need to learn. With a lacking work load you likely have figured out all of the difficulties that face you on any given day, and mostly fill your time with some mix of different social medias (reddit, facebook, twitter, youtube, slack, discord, twitch, or whatever). Going through day after day without any challenge can actually be miserable (regardless of how nice it sounds if you&#39;re in the previous camp).&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;always&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;thing&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;bar&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br /&gt;	&lt;span class=&quot;token keyword&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;token string-interpolation&quot;&gt;&lt;span class=&quot;token string&quot;&gt;f&#39;Raise the &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;thing&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Regardless of which side you might find yourself in today, I&#39;d like to challenge you to reclaim a bit of your time and direction. The end goal isn&#39;t to deliver that thing that your boss is asking for, but to advance your career and continue to learn more. Most managers aren&#39;t going to give you direction to go off and learn something new or to take the time and really get to know the framework that your current project is using. Most managers want you to continue delivering the most benefit to the company/team in the shortest amount of time possible. But, most of the managers that I&#39;ve come across are really interested in having you be able to take on new bits that nobody on the team is comfortable with or having more people on the team to actually know the deeper parts of the infrastructure in order to prevent issues.&lt;/p&gt;
&lt;h2&gt;OWN YOUR ADVANCEMENT&lt;/h2&gt;
&lt;p&gt;Active pursuit of betterment is required in our ever changing field; in other words &amp;quot;if you aren&#39;t moving forward then you&#39;re moving backward.&amp;quot; But it is really difficult to judge ability without a comparison and context. My first 5 years in the industry were largely spent performing what most people would consider support activities.  I elicited change requirements from clients, made changes to implement these changes that, and deployed changes in test levels and production.  A good deal of debugging occurred with client issues, but my explanations of these activities typically fail to persuade someone to hire me as a developer. All of those first years were spent in a group of very skilled developers and while I learned a great deal during that time, I remained the most junior member. It wasn&#39;t until I joined a new team and was able to gain the context to compare my skill set to others that were different from my own that I gained the ability to explain these things. Looking at our own advancement through the lens of life is my overall goal with this series.&lt;/p&gt;
&lt;p&gt;In the last year or so I decided to learn Javascript, and wound up making myself a resume that would populate from data file. This all stemmed from my acquisition of a &lt;code&gt;.dev&lt;/code&gt; domain. I wound up needing to learn about dns configuration, github pages, node js, and alot of frontend design things that I hadn&#39;t touched in years. I would come to learn about JamStack and eventually wind up with a blog site using 11ty static site generator and replicating that into the Dev.to community. These things all kind of snowballed from the idea of owning a domain and figuring out what to do with it.&lt;/p&gt;
&lt;h2&gt;What to learn?&lt;/h2&gt;
&lt;p&gt;I read SO many different posts about what people are learning or people asking what they should learn. This isn&#39;t a one size fits all thing. Everyone has different interests and every area has different needs. I have been developing some tricks (read as getting pointers from others and figuring out which ones work for me) and I&#39;ll share these with you (tl;dr the answer is lists). I keep a spread in my bullet journal for &#39;Professional Goals&#39; and my current lists are below.&lt;/p&gt;
&lt;p&gt;But how do you figure out what should go on the list?  I add things to the list (with top priority) that my current projects use and I don&#39;t already know/understand. The next group of things comes from the communities that I&#39;m in and the things that they speak well about. The last group of things that I add to the list are things that are on job listings that I find interesting. When you are doing this last part you should make sure to look at listings in your desired physical areas and fields of work. Different areas and industries can have drastically different technology stacks and standards, and it&#39;s important to keep your skills relevant to your current and potential work.&lt;/p&gt;
&lt;h3&gt;Side One&lt;/h3&gt;
&lt;h4&gt;Resources&lt;/h4&gt;
&lt;p&gt;Places to learn that I don&#39;t remember off the top of my head&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Hacker Rank&lt;/li&gt;
&lt;li&gt;Leet Code&lt;/li&gt;
&lt;li&gt;Codepen.io&lt;/li&gt;
&lt;li&gt;Repl.it&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I also frequently use Java API documentation, W3Schools, learnxinyminutes.com, and stack overflow&lt;/p&gt;
&lt;h4&gt;Things to Research&lt;/h4&gt;
&lt;p&gt;Things that I&#39;ve heard the name of and don&#39;t even know what they are (If anyone wants to define these then feel free). I&#39;ll mark things off of this list once I can at least explain what it is and what makes it good/helpful and hopefully when it should be used.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;[ ] TOGAF&lt;/li&gt;
&lt;li&gt;[ ] RWD&lt;/li&gt;
&lt;li&gt;[ ] ElasticSearch&lt;/li&gt;
&lt;li&gt;[ ] Cucumber&lt;/li&gt;
&lt;li&gt;[ ] Kafka&lt;/li&gt;
&lt;li&gt;[ ] CockRoachDB&lt;/li&gt;
&lt;li&gt;[ ] Reactive Programming / Even Streaming&lt;/li&gt;
&lt;li&gt;[ ] PKS&lt;/li&gt;
&lt;li&gt;[ ] Pivotal Geode&lt;/li&gt;
&lt;li&gt;[ ] Gemfire&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Side Two: Things to Learn&lt;/h3&gt;
&lt;p&gt;I&#39;ll mark these things off once I would be comfortable enough to work on them (regardless of how much research I may need while I would do so)&lt;/p&gt;
&lt;h4&gt;Languages&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;[ ] Go&lt;/li&gt;
&lt;li&gt;[ ] Rust&lt;/li&gt;
&lt;li&gt;[ ] Lua&lt;/li&gt;
&lt;li&gt;[ ] Kotlin&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Frameworks&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;[ ] Node JS&lt;/li&gt;
&lt;li&gt;[ ] Angular JS&lt;/li&gt;
&lt;li&gt;[ ] Flask Python&lt;/li&gt;
&lt;li&gt;[x] Spring Java&lt;/li&gt;
&lt;li&gt;[ ] Junit&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Technology&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;[ ] Docker&lt;/li&gt;
&lt;li&gt;[ ] Kubernetes&lt;/li&gt;
&lt;li&gt;[ ] Pivotal Cloud Foundry&lt;/li&gt;
&lt;li&gt;[ ] PKS&lt;/li&gt;
&lt;li&gt;[x] Jenkins&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Processes / Principles&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;[x] IOC&lt;/li&gt;
&lt;li&gt;[x] AOP&lt;/li&gt;
&lt;li&gt;[ ] TDD&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;p&gt;This post is part of a series about life, community, and learning.&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>Logging Improves Quality of Life</title>
		<category term="logging" />
		<category term="development" />
		<category term="programming" />
		<category term="beginner" />
		<summary>If you care then you will work to improve the logging in everything you write.</summary>
		<link href="https://coreydmccarty.dev/posts/2020_01_08_logging_improves_quality_of_life/"/>
		<updated>2020-02-25T00:00:00Z</updated>
		<id>https://coreydmccarty.dev/posts/2020_01_08_logging_improves_quality_of_life/</id>
		<content type="html">&lt;p&gt;&lt;a href=&quot;https://dev.to/theodormanolescu/comment/1b5o&quot;&gt;Here&lt;/a&gt; I found a pretty good explanation of logging.&lt;/p&gt;
&lt;p&gt;The questions posed were:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;When should I be logging information?&lt;/li&gt;
&lt;li&gt;What information should a log message always contain and what is optional?&lt;/li&gt;
&lt;li&gt;How do you decide what level this log should be set to there&#39;s many info, trace, debug, error, warn and even &amp;quot;verbose&amp;quot;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The answer given:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Consider your application a human.&lt;br /&gt;
Depends how much info do you want to get from it.&lt;br /&gt;
Example:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;6 months baby&lt;/strong&gt; -&amp;gt; App with no logs and no error handling either works or doesn&#39;t, baby is ok or crying.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;1.5 years&lt;/strong&gt; -&amp;gt; app with small error handling and 1-5 word logged like error save or error buy, baby has a vocabulary of 50 words&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;2.5 years&lt;/strong&gt; - app has some error handling and logs that express an action like could not save order, baby can make simple sentences like i fell down&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;5 years&lt;/strong&gt; - app logs that express intention with some context and can provide info about what&#39;s wrong with it, for baby while eating some candy i got sick and my stomach hurts&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;18 years&lt;/strong&gt; - app handles errors correctly and logs with full relevant context and can provide info for most of the problems, human drank allot of beer now is drunk and he knows he needs to sleep it off or eat something&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;p&gt;Knowing that there was some terrible event is a good start, but knowing what happened is far better, and even better still is knowing the cause.  Moving even further still,  you will figure out that it is really good to know if anything good has happened, or when was the last time that X thing didn&#39;t fail.&lt;/p&gt;
&lt;p&gt;I spent some years performing support activities for an application before having the opportunity to upgrade the logging framework (we went from log4j to log4j2) and while I was in there making changes in every single class that performed logging, I increased the logging functionality. Log4j2 has a thread context hashmap that can hold whatever you like, and those variables can be referenced in the configured logging pattern. I was really excited. For the most part I didn&#39;t create any entries in the logs that didn&#39;t previously exist, but I did make several enhancements.&lt;/p&gt;
&lt;p&gt;So many times when you are debugging something you find yourself looking for a little more context. Logging should give you an idea of where you should look for when something is going wrong. Debug logging should capture notable data. If your sql is being generated in a completely different place than the original flow of the logic then you should really log the sql. If you don&#39;t log enough information then you will find yourself struggling to debug issues, but if you have the right information being logged then you should find that debugging sessions are less intensive.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;Basic Improvements&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Generate a transaction id for every request, return it in the response header, and add it to the logging context. This allows for a transaction to be traced as long as the client can provide the transaction id.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Log the class where the message was generated&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;and the method/function&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Debug level logs AND Error logs should both contain the request and response.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Database queries should be logged in debug (even if not needed elsewhere).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Log as much as possible of the following&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;timestamp&lt;/li&gt;
&lt;li&gt;requesting system identification&lt;/li&gt;
&lt;li&gt;database table/schema/ being accessed&lt;/li&gt;
&lt;li&gt;entry point&lt;/li&gt;
&lt;li&gt;response time&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Overall you want to know as much as possible about who or what system is making the call to the applicaiton, what that transaction looks like, what generated calls look like, and what particular exceptions are occurring (even if being captured). You will learn over time what things are helpful for debugging your applications and you can add or remove from this list for your own usage. Make sure that each logging level has a purpose and that the messages generated for that level apply to that purpose.&lt;/p&gt;
&lt;h2&gt;My Personal Beliefs&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;ERROR&lt;/strong&gt; is when something goes wrong
&lt;ul&gt;
&lt;li&gt;i.e. &amp;quot;This thing went wrong&amp;quot;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;WARN&lt;/strong&gt; should illuminate any potentially harmful situations
&lt;ul&gt;
&lt;li&gt;i.e. &amp;quot;This odd thing happened and could be relevant if something is going wrong&amp;quot;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;INFO&lt;/strong&gt; should show how the application is progressing from a little higher of a level; Incomming calls, outgoing calls, anything substantial on an external unit of work level.
&lt;ul&gt;
&lt;li&gt;i.e. &amp;quot;Received request of type X, called Y database,&amp;quot;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;DEBUG&lt;/strong&gt; should help me track the exact process that is going on when I am researching issues and help me to find the source of a problem fairly quickly.
&lt;ul&gt;
&lt;li&gt;i.e. &amp;quot;Entering/exiting X method call with input/output data that looks like Y&amp;quot;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</content>
	</entry>
	
	<entry>
		<title>I&#39;m Corey McCarty, and I support women devs.</title>
		<category term="shecodedally" />
		<category term="women" />
		<category term="tech" />
		<category term="inclusion" />
		<summary>Women&#39;s day is important</summary>
		<link href="https://coreydmccarty.dev/posts/2020_03_06_womens_day/"/>
		<updated>2020-03-06T00:00:00Z</updated>
		<id>https://coreydmccarty.dev/posts/2020_03_06_womens_day/</id>
		<content type="html">&lt;p&gt;I find it hard to understand that sexism still exists in 2020. I have multiple women in development lead and management roles all around me, and I honestly don&#39;t know any women in software development that aren&#39;t good at what they do whereas I can easily think of several men who get by without being strong developers. It seems quite foreign that there remain people that are not accepting of women in the workforce or that women consistently face income inequality.&lt;/p&gt;
&lt;p&gt;Equality in tech must involve women being valued and empowered in the the tech community as well as the industry. This should include equality in respect, pay, and position.&lt;/p&gt;
&lt;p&gt;This tweet is crazy to me. As a hetero white man, I&#39;ve never felt this, but it is enough of an issue that many people have also felt the need to utilize this tactic.&lt;/p&gt;
&lt;blockquote class=&quot;twitter-tweet&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;Women: Have you ever had a man deliver a message or a point you thought was important because you knew the room was more likely to listen?&lt;/p&gt;&amp;mdash; Ashley Willis (McNamara) (@ashleymcnamara) &lt;a href=&quot;https://twitter.com/ashleymcnamara/status/1235684675609178112?ref_src=twsrc%5Etfw&quot;&gt;March 5, 2020&lt;/a&gt;&lt;/blockquote&gt; &lt;script async=&quot;&quot; src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt; 
&lt;p&gt;I will advocate for equality by offering any assistance that I can to the women around me. These may be small things, but I&#39;ll make sure that I endorse them on LinkedIn and write personal recommendations so that they can more easily be found as the strong developers that they are. My coworker was looking for a new job. She and I spent time working together to make ourselves more employable. This included training courses on various sites, sharing books back and forth for learning, and tell one another about jobs that we had found. I made it a focus of mine to think of her anytime that I was researching things about interviewing or bettering my hirability.&lt;/p&gt;
&lt;p&gt;My advice for fellow allies to support women and any minority group member in your life is to first acknowledge that their career is set at a steep incline. Know that there are factors at play that you will not have used against you. You can help to insure that everyone around you gets their due recognition. Simply allowing light to shine on the good things being done by women (or any minority group member). The women around you are likely to be some of the best workers due to the difficulties that they face. Make sure that any recognition programs that you have or any mentions that occur in review rituals include the women. If we aren&#39;t intentional about equality then it is easy to even accidentally list someone last that may have been the hardest worker. Also, make sure that at no point are you alienating women in conversation. This really goes for anyone that is a part of a given group. The moment that you begin talking about something that isn&#39;t the focus or interest of the entire group then you begin to alienate people, and inadvertently you are building stronger bonds between the people in that conversation while the others are left out made to feel less than whole members of the group. This isn&#39;t to say that you can&#39;t have friends in your work group and that you can&#39;t talk to them about the things that you enjoy, but while you are with the whole group then you should work to include everyone together so that all of the group members are bonded stronger.&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>Agility and Improvement</title>
		<category term="agile" />
		<category term="productivity" />
		<category term="career" />
		<category term="development" />
		<summary>Agile methodologies are really easy to let become strict process instead of dynamic workflow</summary>
		<link href="https://coreydmccarty.dev/posts/2020_03_17_agility_and_improvement/"/>
		<updated>2020-03-17T00:00:00Z</updated>
		<id>https://coreydmccarty.dev/posts/2020_03_17_agility_and_improvement/</id>
		<content type="html">&lt;p&gt;Agile (Capital A) is something that many/most software development teams are adopting, whether that is pure Agile, Safe, Scrum, Kanban, or some other thing that I don&#39;t know. The majority of the issues that I hear about surrounding Agile are having to do with forgetting the manifesto OR forgetting to be agile (lowercase a). So let&#39;s take a look at what can be done about these.&lt;/p&gt;
&lt;h2&gt;Agile Manifesto:&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;We are uncovering better ways of developing software by doing it and helping others do it.

Through this work we have come to value:

Individuals and interactions 
	over processes and tools

Working software 
	over comprehensive documentation

Customer collaboration 
	over contract negotiation

Responding to change 
	over following a plan

That is, while there is value in the items on the right, we value the items on the left more
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Processes and tools are largely the way that management ensures that a team is on track. I regularly hear complaints about stories not being updated in the agile management software, or processes not being followed. I find that this largely means that we aren&#39;t interacting effectively. While individual empowerment is largely a pillar of agile, being a part of a team where you aren&#39;t the only one interacting with or planning the activies for a given product/application means that you must communicate effectively. In order to reduce your focus on processes and tools you have to get to a point where your team communicates well without the rigidness of those things.&lt;/p&gt;
&lt;p&gt;Comprehensive documentation would be really nice in an ideal world. I personally work with fifteen applications which have been managed by a team that has completely turned over at least twice. There have been large blindspots in regard to the applciations&#39; functionalities which is an ongoing process of remedying. But, even for the things that we have sufficient documentation there is an issue of being able to find it. Further as the team has turned over through the last decade, the code styles are a world away from consistent. The betterment of the team and the code has not come through writing large documents that explain everything, but instead through taking the time to gather and share knowledge as necessary. It has been my experience that if your organizational skills are lacking then the documentation will likely not be a fix for it. Making sure that we have testing suites that find issues and profiling systems to evaluate issues with runtime have been paramount in our moving forward.&lt;/p&gt;
&lt;p&gt;Contract negotiations can be really helpful but will ultimately have details that are left out. This comes down to one of the fundamental issues with waterfall as a whole. You would take the contract that was poured over for weeks, and then you would take it with a bit of interpretation and make what you believed to be desired. Customer collaboration allows for us to ask the questions as we have them and not make assumptions that go unchecked until final delivery. Customer collaboration also means that iterative deliveries can be checked agaisnt assumptions that customers may have had without ever having specified them. You still wind up with an effective contract, but by letting that negotiation be ongoing collaboration rather than a pre-development meetings that produce a clean cut document you minimize the amount of work done on something that is not wanted.&lt;/p&gt;
&lt;p&gt;Following a plan goes hand in hand with contract negotiation. Responding to change means that you are allowing for feedback that prevents excessive time waste in direction corrections.&lt;/p&gt;
&lt;h2&gt;Lowercase a agile&lt;/h2&gt;
&lt;p&gt;Going back to the bit about processes and tools, I believe that the problem comes down largely to things that are mostly minor details. Do you estimate story points by days of work or complexity of work? Do you assign multiple people to the same story or make a copy of the story for each person involved? You can go either way with these and several other decisions and have them be helpful to your team, but ultimately you should remember that if any part of the process or the tool are getting in the way of doing actual work then you need to evaluate how to remedy that.&lt;/p&gt;
&lt;p&gt;My team lost its scrum master recently after his having been with the team for more than a year. Initially we believed that it would be disasterous as we have had difficulties with several parts of our process in the past (merging of two whole scrum teams, changing managers a couple of times, completely differing approaches to standup) and he was a large part of helping us to reign in those issues. But it&#39;s a really crazy thing. When we learned that we would not be getting a replacement of our scrum master we were forced to divy out his work. This brought about executions of different steps with different understandings and personal tendencies. And in this change we have become stronger. The people that were interested in the different processes were able to consider how they could better their part of the process instead of one person trying to figure out all of the things.&lt;/p&gt;
&lt;p&gt;Scrum master activities hve been split up. Our manager takes over administration activities like scheduling meetings and mitigating external dependencies. Her vision as a manager gets us farther.  A new junior dev runs our daily standups. He is now more engaged and knowledgable. A dev lead took over for backlog grooming and sprint planning. Suddenly defining done is a non-issue. I&#39;ve picked up retrospectives. I began by asking each person for their input on &#39;done well&#39;, &#39;need to improve&#39;, and &#39;action items&#39; which brings more feedback from more people. We collectively took on our Program Increment planning activities. Showing up without pre-planning enabled us to plan more effectively due to increased awareness. Our business team is more aware of our activities as we brought them into planning. Overall we are becoming increasingly efficient with our meeting time due to these changes.&lt;/p&gt;
&lt;p&gt;Aside from just the changes that came with the loss of our scrum master, we figured out that the way we had been tracking support issues and Keep The Lights On (KTLO) activites was not providing adequate visibility, bandwidth, and pushback. We have since stopped tracking support activities as stories and instead opened a request queue for such things. We have reduced our velocity to better accommodate those activities, and we have separated out our bandwidth by onsite development, offshore development, and testing in order that we may better distribute/track our work in accordance with the people that will actually be performing it.&lt;/p&gt;
&lt;p&gt;I don&#39;t offer the things that my team has done to give our example as perfection (far from it), but as growth. We have tramendously changed the way that we carry out agile practices and are becoming stronger for it. I, being transferred to the team more recently than most, have been finding several issues with our process and questioning everyone as to why we do things the way that we do. In the process I am able to learn the good and bad reasons that we operate as we do, and I&#39;ve been able to offer thoughts as to how we might better our processes. Just opening this discussion (because I&#39;m quite open with my thoughts) has led to further discussion of streamlining our activities. There were initially a handful of meetings where we devolved into verbal sparring matches and the majority of people were quite upset. After we got everything off of our collective chest then we were able to begin seeing things from the other perspectives, function as a more cohesive team, and find value in our tramendous diversity of skills and experience.&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>Bullet Journaling Basics</title>
		<category term="productivity" />
		<category term="bulletjournal" />
		<category term="tools" />
		<category term="journal" />
		<summary>Where do you start with bullet journaling?</summary>
		<link href="https://coreydmccarty.dev/posts/2020_03_18_bullet_journal_basics/"/>
		<updated>2020-03-18T00:00:00Z</updated>
		<id>https://coreydmccarty.dev/posts/2020_03_18_bullet_journal_basics/</id>
		<content type="html">&lt;p&gt;As a developer with ADHD I&#39;ve found myself frequently talking about bullet journaling. It has become a really popular tool with uncountable YouTube videos surrounding different people&#39;s methods. You many be asking yourself &amp;quot;what is a bullet journal?&amp;quot; Bullet Journaling is a technique created by Ryder Carrol, a digital product designer and authoer that was diagnosed with learning disabilities early in life. He created the technique for himself through years of trial and error, and now has a &lt;a href=&quot;https://bulletjournal.com/&quot;&gt;website&lt;/a&gt; where he shares his methods. I will summarize here but I highly recommend reading more on his website and watching his YouTube videos as he goes into far more detail than I intend to.&lt;/p&gt;
&lt;p&gt;Bullet journaling is a type of rapid logging that can allow for tracking of tasks, events, and data in an imperfect format. The central design uses different bullets for tasks, notes, and events in order to track your day. While the basis is rapid logging, there is also a periodic activity called a migration where you periodically go through the days since your last migration in order to gather missed items, and evaluate when they should be done if at all.&lt;/p&gt;
&lt;h2&gt;Collections&lt;/h2&gt;
&lt;p&gt;A collection is a pair of pages that is viewable together when the book is open.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Index / Table of Contents&lt;br /&gt;
Maps page numbers to given logs&lt;/li&gt;
&lt;li&gt;Future Log&lt;br /&gt;
A collection that is divided into regions for six month period&lt;/li&gt;
&lt;li&gt;Monthly Log
&lt;ul&gt;
&lt;li&gt;Calendar Page
Listing of the days of the month&lt;/li&gt;
&lt;li&gt;Task Page
Listing of tasks that are intended for completion during that month&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Daily Log&lt;br /&gt;
An ongoing collection for the rapid logging of individual days&lt;/li&gt;
&lt;li&gt;Custom Collection&lt;br /&gt;
One that is for gathering information on a given topic for ongoing usage of your own design. Tailoring these to your purposes can be one of the most power things about bullet journaling.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Bullets&lt;/h2&gt;
&lt;p&gt;These are signifiers giving type to the item being logged and drawn to the left of the log entry in such a way that bullets are stacked above one another (unless nested) and clearly set apart from the beginning of the log entry. The focus of rapid logging is to make entries when they occur and not to worry with organizing entries by type.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Tasks&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;initially denoted with a dot&lt;/li&gt;
&lt;li&gt;X - upon completion&lt;/li&gt;
&lt;li&gt;&amp;gt; - migrated to a collection&lt;/li&gt;
&lt;li&gt;&amp;lt; - migrated to Future Log&lt;/li&gt;
&lt;li&gt;crossed out if no longer necessary&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Events
Denoted with a circle&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Notes
Denoted by a dash&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Signifiers&lt;br /&gt;
These are ways of setting things apart from the rest and include specific symbols that appear to the left of the previous bullet types mentioned. The ones listed on the website are below.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;* = priority&lt;/li&gt;
&lt;li&gt;! = Inspiring&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Migration&lt;/h2&gt;
&lt;p&gt;In order to harness the power of the logs, it is important to go back and address tasks that haven&#39;t been completed. It is recommended to perform a migration at the end of the month. If you do this when you create your monthly log then you can easily migrate the tasks that need to be done soon into the task page of the monthly log. If the item is something that should be scheduled further out then you can migrate it to the future log.&lt;/p&gt;
&lt;h2&gt;Next Steps&lt;/h2&gt;
&lt;p&gt;I haven&#39;t personally taken the next step of buying the two books that are available on the website, but after having used my bullet journal for more than a year I have made a few modifications to fit my life.&lt;/p&gt;
&lt;p&gt;Many people find that using different colors, stickers, or other things help them. The only remotely artistic improvement that I&#39;ve made is that I use two different colored inks. I use a black ink for headings, and any drawn dividing lines, and a blue pen for everything else.&lt;/p&gt;
&lt;h3&gt;Sprint Log&lt;/h3&gt;
&lt;p&gt;As a member of an agile team, I thought that it would be beneficial to track stories in this way. I was ultimately unable to figure out a good way to do this in a manageable way with daily tasks. The premise was basically that I would have a collection where all of my stories were listed with subtasks so that I could track the work done on each and keep track of things to circle back on. I still had tasks that were unrelated to track daily and found myself still keeping a daily log which felt a bit cumbersome.&lt;/p&gt;
&lt;h3&gt;Weekly Log&lt;/h3&gt;
&lt;p&gt;Instead of a daily log as described on the website, I adopted a week based style which I&#39;ve found helpful.&lt;/p&gt;
&lt;h4&gt;Left Page&lt;/h4&gt;
&lt;p&gt;At the top is a table for my daily tasks so that I can mark them as completed or cancelled. It helps me to not only remember to do the things everyday, but also looking back to see what I missed. I got tired of making the same few tasks on everyday.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:left&quot;&gt;&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;M&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;T&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;W&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;R&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;F&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Employer Mail&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;x&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;x&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;x&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;x&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Client Mail&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;x&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;x&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;x&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;x&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;x&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Daily Standup&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;x&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;x&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;-&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;-&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;x&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Agile Manager&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;x&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;x&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Below this is a notes section that section off for the larger tasks that I&#39;m working on. I&#39;ve adapted my sprint tracking efforts from the failed sprint log to bring the story names into this section and allow myself to track next steps when I come across them.&lt;/p&gt;
&lt;h4&gt;Right page&lt;/h4&gt;
&lt;p&gt;Here I do the exact things that would be in a daily log as described before, but I find it helpful to have them grouped in blocks of weeks instead of the generic daily log which could have an entire month of days running together however they fit on pages.&lt;/p&gt;
&lt;h3&gt;My Custom Collections&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Learning and career direction are important in software development as you so often come across new terms and tools. As a way to help myself to track the things that come up without stopping my current work or trying to learn new things before finishing the work at hand I have made a collection for learning. It&#39;s broken down into languages, frameworks, technologies, processes/principles that I&#39;d like to learn about on one page. The other page of that collection has a list of learning resources that I don&#39;t already have committed to memory, and a list of things to research. This list of things to research is basically things that I&#39;ve seen named and didn&#39;t know what they were.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Ideas for blog posts and projects to do in the future. I also keep blog ideas in a markdown list in the repository where I keep my blog (carefully gitignored), and I have a list of project ideas on Google Keep. You never know when you will come across an idea and I find myself using speak to text for sending myself text messages and gathering them into other places when I have more time.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Pregnancy information can be easy to forget with all that is going on. While my wife was pregnant we would come up with questions for the doctor and unless we had the written down we would surely forget when we were in front of him. I would record these questions, and track any things that the doctor said for us to do in this collection.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</content>
	</entry>
	
	<entry>
		<title>Know Your Brand</title>
		<category term="career" />
		<category term="promotion" />
		<category term="advancement" />
		<category term="development" />
		<summary>The first step in brand management is to have a good understanding of what it is.</summary>
		<link href="https://coreydmccarty.dev/posts/2020_04_01_know_your_brand/"/>
		<updated>2020-04-08T00:00:00Z</updated>
		<id>https://coreydmccarty.dev/posts/2020_04_01_know_your_brand/</id>
		<content type="html">&lt;p&gt;While working on my resume, I&#39;ve had a TON of good advice from a the Slack server of &lt;a href=&quot;https://codeconnector.io/&quot;&gt;CodeConnector&lt;/a&gt; and they have actually been the source material for some of my other posts. But, one of the best bits of advice that I got was to actually ask my closest coworkers what they would tell someone about me. Specific questions listed below with answers given in line. I expected answers about being a hard worker or some other generic crap, but the answers that I got were much more substantial, and I&#39;ve been working on ways to embrace these answers and play to my strengths. This includes an ongoing effort to incorporate these qualities into my personal brand.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;What are his strengths? What would you say make him a good/unique developer/coworker?
&lt;ul&gt;
&lt;li&gt;Desire to do the right thing, code most efficiently, works well within team and outside of a team, well organized&lt;/li&gt;
&lt;li&gt;Ability to challenge any idea/motive if there seems to be a better alternative, no matter to who, not being afraid to speak up to anyone&lt;/li&gt;
&lt;li&gt;Willingness to take up a new, and unfamiliar idea and learn all he can about it in order to better apply his skills and knowledge to the solution&lt;/li&gt;
&lt;li&gt;Speaking his mind, calling BS when he sees it, and always looking for improvements&lt;/li&gt;
&lt;li&gt;Desire to do the right thing, code&lt;/li&gt;
&lt;li&gt;Asking questions, solid coding skills, good at explaining complicated topics&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;What would you tell me that I don&#39;t already know? How would you sell me to someone else?
&lt;ul&gt;
&lt;li&gt;Corey is organized and timely. He works well with his team members and folks outside of his team. He asks thorough questions. He is dependable and easy to work with.&lt;/li&gt;
&lt;li&gt;I can&#39;t think of anything you don&#39;t already know, but I&#39;d sell Corey as a determinded go-getter who will figure things out, knock down walls, and pester whoever needs pestering to get the job done.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This is all pretty specific, and not things that I have ever considered when asked in interviews how others would describe me. I can now present a better answer to that recurring interview question. I am also working to tweak my resume statements, and to include these qualities in the bio portions of my website.&lt;/p&gt;
&lt;p&gt;As another point, whether it&#39;s personal development or brand development, you need to know your weaknesses or the negative side of your strengths. In these examples my strengths were listed, but each of these could be weaknesses. Desire to do the right thing can be irritability at what is seen as incorrect, challenging processes can be distraction from the work at hand, unafraid to speak up can be constant talking. Knowing these things is the first step to mitigating these issues in how you work.&lt;/p&gt;
&lt;p&gt;You can&#39;t make your brand better if you don&#39;t really know what it is.&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>Writing Better Code</title>
		<category term="development" />
		<category term="codequality" />
		<category term="cleancode" />
		<category term="craftsmanship" />
		<summary>Even bad code runs, how do we make our code better?</summary>
		<link href="https://coreydmccarty.dev/posts/2020_04_08_writing_better_code/"/>
		<updated>2020-04-09T00:00:00Z</updated>
		<id>https://coreydmccarty.dev/posts/2020_04_08_writing_better_code/</id>
		<content type="html">&lt;p&gt;What are ways that we can write better code? As clean code is something that I really strive for, I read alot of thoughts on the subject. There are so many debates out there surrounding every miniscule decision that can be made. It is a bit crazy when you think about it. It always seems that the discussions come back to some of the same points, which I&#39;ll do my best to explain here&lt;/p&gt;
&lt;h2&gt;Consistent formatting and layout&lt;/h2&gt;
&lt;p&gt;I&#39;m not going to engage in what format and layout decisions are right and what ones are wrong here. For the most part, whatever decisions you make, you will become accustomed to them and you will become better at reading code that follows your style guide. Linters are celebrated as being one of the greatest things for readability, and rightfully so. If you aren&#39;t a large company or don&#39;t have lots of different teams and code repositories to manage, then custom configuration of a linter can be quite cumbersome work that isn&#39;t really necessary. Whatever style decisions that your linter of choice is preconfigured with is likely fine, or at least a good start.&lt;/p&gt;
&lt;h2&gt;Meaningful names are really important&lt;/h2&gt;
&lt;p&gt;Variables, classes, and function names can be quite helpful if handled well. Just consider &lt;code&gt;carOne.startEngine()&lt;/code&gt; vs &lt;code&gt;c1.go()&lt;/code&gt; where one reads like a spoken sentence, and the other could be anything (especially in a dynamic typed language). This extends to tests as well. &lt;code&gt;scenario27()&lt;/code&gt; is much more difficult to understand than &lt;code&gt;addingTwoPositiveIntegers()&lt;/code&gt;. It can be a bit of a pain, but overall it is the central tenet of the mythical &#39;self documenting code&#39;.&lt;/p&gt;
&lt;h2&gt;Single thought per line.&lt;/h2&gt;
&lt;p&gt;I heard Python core dev, Raymond Hettinger, say this during a keynote and it has become a guiding principle for me. It is the determining factor in the prolific &#39;Are ternary statements evil?&#39; debate. Tools have their place. Sometimes clever tricks are the only way that you can do make something work. When you find yourself writing clever code, I suggest you consider whether the clever code is really making anything shorter when you need a bunch of comments to explain what&#39;s happening. Again, ff there are more than two thoughts on a line then you should probably break it up.&lt;/p&gt;
&lt;h2&gt;Read other peoples&#39; code.&lt;/h2&gt;
&lt;p&gt;Code reviews are a wonderful thing. Unfortunately, they aren&#39;t always a priority or possibility due to various factors. I personally have a split onsite and offshore development team where we are forced to handoff work between the two, and we can&#39;t have all of the developers on hand-off meetings morning and night. Without official code reviews, a few of us still ask one another for a quick look over our code if we are doing something complex and quick. Pair programming is another great way to be reading other peoples&#39; code, and you get the added benefit of following along in their writing process.&lt;/p&gt;
&lt;p&gt;Added bonus for pair/group programming is that it gives you the opportunity to share productivity tricks, and ways to better use your toolset to get work done more quickly, easily, and consistently&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>Testing Difficulties</title>
		<category term="TDD" />
		<category term="testing" />
		<category term="cicd" />
		<category term="automation" />
		<summary>Testing effectively can be quite challenging.</summary>
		<link href="https://coreydmccarty.dev/posts/2020_04_20_testing_difficulties/"/>
		<updated>2020-04-30T00:00:00Z</updated>
		<id>https://coreydmccarty.dev/posts/2020_04_20_testing_difficulties/</id>
		<content type="html">&lt;p&gt;My team owns 16 applications that act as a single system managing a large hierarchical data set. We have well established dev and test teams, but we find ourselves facing challenges with a several things such that our testing takes a LOT of time.&lt;/p&gt;
&lt;p&gt;Our system has inputs that include the master system for client data, an external authority&#39;s monthly data file, and one off manual data manipulations by the people who own the data we manage. Our data is expected to be locked in with the external data which means that we shouldn&#39;t just created dummy data that could block other system&#39;s data from flowing into our databases. We currently have Junit tests which run at build time. We have regression tests which are executed by our testing team. We have a volume testing tool that they own as well. Regression tests include several suites of tests through different GUI testing tools (we don&#39;t have GUIs), SoapUI request/responses, and db checks. There have been a great deal of efforts occuring to automate our tests, which I think is a wonderful thing (in theory).&lt;/p&gt;
&lt;h2&gt;Where&#39;s the issue?&lt;/h2&gt;
&lt;p&gt;Little problems applied to 16 separate applciations become big problems. We became aware in recent months that everytime our automated regression tests were run, that somebody had to manually read through a great many reports to check for failures. Once the dev team became aware of this, we were able to build a scraper for those reports to present the necessary summary in a week&#39;s time. But, this process had been completely overlooked because goals to &#39;automate&#39; were set forth without a great deal of planning put into their design. If we are going to programmatically execute hundreds of tests then we shouldn&#39;t require a person to spend days interpreting those test results. It was simply an oversight in the design of the automations which was easily resolved once it was realized. In order to remediate issues such as this it is important that your entire team talk openly about the issues that they are facing so that problems can be understood and solutions might easily be produced. This case was a quickly resolved and had substantial impact.&lt;/p&gt;
&lt;p&gt;There is also a strong database dependency in our Junit testing where tests are prevented from running concurrently for data integrity&#39;s sake. The data is wonderfully integrated with the test cases with text files so that the data can be put in place before the test runs, but the time spent talking to the data base stretches our Junit execution for some applications out to seven hours. While an in memory data base would resolve the latency issues, we have some tests that execute Oracle specific functionality for hierarchical queries. This means that in memory adoption will not be simple. We have drawn up plans for a hybrid approach to move everything to in-memory, and move ONLY the breaking tests back to the proper Oracle database, but that WILL be time consuming.&lt;/p&gt;
&lt;p&gt;Another issue faced is that we have tests that utilize one of the systems downstream from us to make tests against a GUI that we don&#39;t own. This means that those tests cannot be run if that team&#39;s application is down for some reason, OR possibly that our GUI based tests might begin to fail due to a redesign of their front-end. While the answer seems quite simple to rewrite the tests to make calls against our systems (that those GUI&#39;s call), it is not a simple task once you realize that there are hundreds if not thousands of tests that will have to be translated, and that the transaltion of these tests provides little value to our business people that care little about how we technically achieve our tasks. This brings in a terrible reality of scale. We have many applications with many tests that would benefit from overhauling. Meanwhile, there are still business adds that are coming down and existing tech modernization efforts that have the entire team already allocated.&lt;/p&gt;
&lt;p&gt;This is actually the biggest issue that I&#39;ve come across in my five years of software development. The code bases that are managed by the team are so large many necessary efforts could take a year or more to complete. Notably our decade old Spring based applications with Weblogic containers are being moved into Springboot with a cloud based config server so that they can be deployed into a Cloud Foundry environment. We are now seven months into this process. We began with the most difficult application so that we could see what difficulties would be faced while we spent time with an advisory board. In the months since, we have done the base translation to nearly half of our applications, BUT we are still yet to deploy any of them into our production environment. We are still learning new things that need to be done in order to get our applications across the finish line. Along the way, we continue to find more and more things that we would like to see corrected in a perfect world. The time doesn&#39;t exist for perfection though.&lt;/p&gt;
&lt;h2&gt;Solutions&lt;/h2&gt;
&lt;p&gt;As you can tell, most of our problems will continue to be long term issues that we work slowly to correct over time. I offer these difficulties in response/contrast to the common narrative of &amp;quot;just adopt TDD and everything will be better.&amp;quot; Difficulties still arise. Intelligent design should be a focus, both for your applications and your tests. And sometimes the best that you can do for improvement is to iron out anything that you are currently touching so that you might reduce the difficulty of your current efforts and to make a note of something that can be done in the future if you get time.&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>I Am Privilieged</title>
		<category term="diversity" />
		<category term="inclusion" />
		<category term="community" />
		<category term="discuss" />
		<summary>Privilege and diversity are quite complex and often times difficult to understand until we can obtain context outside of our own.</summary>
		<link href="https://coreydmccarty.dev/posts/2020_04_30_privileged/"/>
		<updated>2020-04-30T00:00:00Z</updated>
		<id>https://coreydmccarty.dev/posts/2020_04_30_privileged/</id>
		<content type="html">&lt;p&gt;I grew up in a white middle-class home with both of my parents. I may have stressed about getting money for things sometimes, but I never worried about whether or not I&#39;d eat or where I would sleep. I had the opportunity to attend college while living in my parents&#39; house and being covered by their insurance. I worked for my own money, but looking back on it I realize that I didn&#39;t need as much as I made. The only bills that I had were for my cell phone and car insurance. Any expenditures beyond that were my own decision. I had a car, and even though my first car was a piece of crap, I didn&#39;t have to pay for it. When I drove it I didn&#39;t have to worry about getting pulled over due to the color of my skin and I didn&#39;t have to worry about the police in my suburban area doing me any harm.&lt;/p&gt;
&lt;p&gt;Nobody ever handed me a million dollars, but food was plentiful. Many non-minority people hear the word privilege and think of someone like Donald Trump whose family had immense piles of money, cars, helicopters, jets, and real estate. The thought is that &amp;quot;I worked hard for what I have&amp;quot; and that&#39;s true. Others have worked every bit as hard, but due to where they started they do not have everything that you have. Privilege doesn&#39;t mean that everything is really easy for you or that you live a comfortable life of luxury. Privilege means that you don&#39;t have to worry about the prejudices of other people in the room before opening your mouth. Privilege means that you didn&#39;t have to work to pay for rent before you finished high school.&lt;/p&gt;
&lt;p&gt;When I was first placed into my current position, I felt disadvantaged because I believed I was the only American working for my company, and among the Americans that I work with I was the only vendor. I wasn&#39;t entirely a part of either group. Non-vendor employees had meetings and events that I couldn&#39;t be a part of, and the vendors around me all shared knowledge of other languages which I didn&#39;t know. All of those things are true, but the conclusion that I came to was very wrong. While I wasn&#39;t entirely in either group I also wasn&#39;t entirely separate from either group. The things that I saw as the source of my isolation could also be the source of my inclusion in these groups. The vendors aren&#39;t given monitors, keyboards, and mice when they start the way that the full time employees are so I started gathering up monitors with decent resolution as well as usb keyboards and mice. Over the next couple of years I was able to get all of the vendors in my area setup with two HD monitors over twenty inches. They are now able to be more productive, and they feel more comfortable and less set apart from the others. It doesn&#39;t take much effort to treat people that are different with the same compassion and respect that are given to others.&lt;/p&gt;
&lt;p&gt;It takes people with a bit of privilege to use their position and open up discussions in order that the people without privilege can be heard more loudly. There are lots of people screaming for equality, but most people don&#39;t realize that as a part of the majority that they are complicit in systematic alienation of minorities. As long as people sit in comfort surrounded by people that look like them there will be people who are different that are being held outside of that community. Inclusion requires that we learn about the experiences of other people beyond our echo chamber. If we don&#39;t make an effort to intentionally include minority groups in our lives and communities then we are just prolonging the sameness that makes diversity not happen. If you want to make your group more diverse then perhaps the people that know best how to make it more welcoming to minorities are people with experience being from such a group. Therefore, efforts are needed to see things from the outside in order to help us to see the way that we are making others feel unwelcome.&lt;/p&gt;
&lt;p&gt;Please comment influencers, blogs, or podcasts in the programming community that openly discuss diversity. It&#39;s even better if they are here on dev.to&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>Be Excitable</title>
		<category term="discuss" />
		<category term="mentalhealth" />
		<category term="wellbeing" />
		<category term="watercooler" />
		<summary>Hobbies and interests make you a better developer and a better person.</summary>
		<link href="https://coreydmccarty.dev/posts/2020_05_04_hobbies/"/>
		<updated>2020-05-04T00:00:00Z</updated>
		<id>https://coreydmccarty.dev/posts/2020_05_04_hobbies/</id>
		<content type="html">&lt;p&gt;&lt;code&gt;All work and no play makes Jack a dull boy&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;One of the biggest issues with getting older is that it&#39;s harder to make friends once you are out of school.  When you have classes with someone then you automatically have something in common in being able to talk about the work that you are doing, and you are probably very close in age as well. Once you get away from school this becomes a bit less of a factor. Often times in software development people feel like they should be writing code 24/7 and while that is ONE possible way to spend your time, it isn&#39;t necessary. You need to unplug sometimes to prevent burn out and to keep from losing the enjoyment of programming. It is important to have things that you enjoy and motivate you forward. Hobbies are great for that.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Webster&#39;s 1913 dictionary:
Hob&#39;by - n. 
...
3.	A subject or plan upon which one is constantly setting off; a favorite and ever-recurring theme of discourse, thought, or effort; that which occupies one&#39;s attention unduly, or to the weariness of others; a ruling passion.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So often growing up nerds are given a bad name, but what is a nerd really? A nerd is someone that enjoys something whole-heartedly. Whether it be comic books, video games, or sports the idea is the same. There is something that keeps them excited about life, and without something like that it is inevitable that you will burn out. Being able to unwind sufficiently will actually help you to work better. Leisure and work are both necessary, and mindlessly staring at whatever comes on channel 5 is not real leisure.&lt;/p&gt;
&lt;p&gt;If you spend anytime at all on Reddit then you likely have found some hobbies that you didn&#39;t previously know existed. For me I&#39;ve fallen into vaping (no cigarettes in five years now), traditional wetshaving, mechanical keyboards, fountain pens, bullet journaling, blogging, and reading tabletop game stories. These all offer me something to spend time learning and thinking about. Hobbies teach us about things that lead to seeing the world with a different lens. This is really important as it allows us to provide something interesting to any team or relationship that we are a part of.&lt;/p&gt;
&lt;p&gt;Whatever you do, remember to take time and enjoy life, and PLEASE let me know about your favorite hobbies (maybe even with links) in the discussion thread below. I&#39;d love for us to help one another to find things to enjoy!&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>Carpe Diem</title>
		<category term="career" />
		<category term="mentalhealth" />
		<category term="teamwork" />
		<category term="journey" />
		<summary>Being intentional in your daily activities</summary>
		<link href="https://coreydmccarty.dev/posts/2020_05_07_carpe_diem/"/>
		<updated>2020-05-07T00:00:00Z</updated>
		<id>https://coreydmccarty.dev/posts/2020_05_07_carpe_diem/</id>
		<content type="html">&lt;p&gt;Jobs come and go, and the long reaching career is each of our goals. How we handle each job will influence our own growth and professional reputation. It&#39;s easy to fall into doing the expected minumum. If you are anything like me, then you will find yourself looking back on our time with a team and question whether your impact was sufficient. I&#39;m currently facing some changes in my job and I feeling reflective. Honestly I&#39;m facing a fleeting situational depression and this is my therapy, so buckle up.&lt;/p&gt;
&lt;p&gt;I&#39;ve been in my current job for five and a half years and it&#39;s my first in this career. First project was six months, next four years, and most recent will be ending at exactly one year. I know that I&#39;ve grown a great deal while working with each team, but in my reflection it dawned on me to consider how much growth I&#39;ve been able to influence in my teams. If we are to be truly great at what we do then we should strive to become constantly better and to constantly help to make things better.&lt;/p&gt;
&lt;p&gt;In my first role, I performed requirement illicitation for a fresh web service build. I was able to guide the questioning of the product owner and see to it that the development team (onsite and offshore) understood the requirements as work moved forward. I didn&#39;t get to see this one move into production, but I know that I wrote some utilities that enabled levels of abstraction that were honestly a bit absurd, but accomplished what was requested. I can confidently say that I made sure that this project stayed on course and made it quickly to production with minimal issues. Win!&lt;/p&gt;
&lt;p&gt;In my second role, I did a LOT of support and configured our web service to accommodate new adopters as well as old ones needing additional functionality. I was able to assist with data modeling and best practices to help conform adopters to the patterns that best fit our application. I can remember being on 50+ count production support calls with customer facing impact and represtenting my team (while having the shortest tenure of the team) in resolving issues in a timely manner with VP&#39;s and directors all watching on. I can confidently say that I did meaningful work to keep the enterprise on track and minimize impact to the bottom line.&lt;/p&gt;
&lt;p&gt;In my most recent role I seemed to find my voice as I had understanding on topics that other didn&#39;t and I was able to contribute more to the leadership and decision making. In a year&#39;s time I managed to make myself a subject matter expert for the new devops work that began not long after I joined, and subsequently never had to become extremely knowledgeable on the 16 actual applications that I was working with. I learned about cloud native springboot applications, Jenkins build pipelines, and groovy scripting of libraries for those pipelines and I was able to write pipeline scripts from scratch within that time. I know that I have created tools that will impact this team and their devops usage for possibly years to come. I continued to find things needing improvement and push for fixing any difficulty that wasn&#39;t a massive undertaking, and I feel good about it.&lt;/p&gt;
&lt;p&gt;This reflection will surely stick with me as I move forward in my career and drive me to insure that when the time comes to move forward again that I can always see the positive impacts that I&#39;ve had during my time there. I&#39;d love to hear any thoughts and stories on the topic from your experience.&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>Productive Mentoring</title>
		<category term="learning" />
		<category term="career" />
		<category term="advice" />
		<category term="leadership" />
		<summary>Both parties in a mentoring relationship should be purposeful in their activity for best results</summary>
		<link href="https://coreydmccarty.dev/posts/2020_05_27_mentoring/"/>
		<updated>2020-05-27T00:00:00Z</updated>
		<id>https://coreydmccarty.dev/posts/2020_05_27_mentoring/</id>
		<content type="html">&lt;p&gt;In order to advance as a developer you need more than just online resources. The most common question that I see in programming forums from juniors is about what they should learn. This touches on one of the primary needs for mentorship. There is so much information on the internet about software development that it is overwhelming without clear direction. Knowing what languages, frameworks, tools, and best practices are worthy of investing time is paramount. Even the people that have advised me about looking into job listings in my market to see what things to group together are what I would consider mentors in my career.&lt;/p&gt;
&lt;p&gt;Personally I have had several mentors over my five years in the industry. Unfortunately the first four years were in the same team, and that&#39;s one thing that would offer me particular insights into the needs of mentorship relationships to evolve and eventually move on. The team that I spent the majority of my software career with had been together for a number of years before I joined. They were all excellent developers working with several technologies and managing a high volume CRUD system with a solid design and a homegrown build/deploy process. One of the first things that I learned in this team was that interacting with the Linux command line on the server was the most faultless way to interact with a system. This hands on approach permeated the entire deployment process. This Java web service was being deployed entirely by the team from the Java used by the applciation to the Tomcat servlet container that served it. Everything was managed and scripted by the hands of the team. At the time I didn&#39;t know any different approach so being so hands on with the bash scripting, building, deployment, database management (we had an AMAZING DBA that worked with us and trusted us to not break things).&lt;/p&gt;
&lt;p&gt;It wasn&#39;t until I moved into a new team that I realized that, while I remained a junior within my old team, I had grown to a point that I could stand as a more senior developer with select skills that were not universal. My next mentor taught me a LOT about working in a much more complex environment. We tackled many things. While he heard and answered all of my questioning of the entire world, he helped me to understand that sometimes you have more work than you can get done, and the massive refactoring to make life better has tremendous value WHEN YOU HAVE TIME TO DO IT. There are times when urgent business needs require your focus over the cleaning of code.&lt;/p&gt;
&lt;p&gt;It was only after working with the new team that I came to understand that I had outgrown my previous mentors. We had become peers as our skillsets grew to be very much the same. It is also important to note that none of my mentors had been &#39;assigned&#39; as there was no direct program aligning juniors with seniors, instead it was my latching onto whatever more senior developers were around me in order to get whatever information that I could from them. I was being pretty intentional about acquiring the information, but many of them weren&#39;t intentional about providing information beyond the minimum needed for me to get a task done.&lt;/p&gt;
&lt;p&gt;One of my best mentors probably count herself as such as we would become close peers as time drew on. What really made the mentorship so beneficial to me was that we would learn from one another and many times neither of us had the answers. At some point, one of us shared the Humble Bundle sale of No Starch Press books on Python. Even though we worked in a Java shop this was a great opportunity to learn something and the inclusion of Automate the Boring Stuff with Python made the bundle a steal. We would actually start using Python for some internal scripting as it was a bit more maintainable that a list of Bash one-liners to achieve similar results. We wound up going through a period of Humble Bundle acquisitions while talking together about different things. It was this learning and discussing that helped to motivate me to learn more. Due to some specifics of our software we had both become quite stagnant and aware that our skills were becoming increasingly difficult to market while looking for more work as we had both become bored of the work we were doing.&lt;/p&gt;
&lt;p&gt;In order for a mentorship to work out well you need both people to be working to grow their skills. The skills of the mentor will eventually become known to the mentee if they are not growing.&lt;/p&gt;
&lt;p&gt;The other major factor that will determine how well a mentoring relationship works is typically an assumption made of senior developers that they have good communication skills. The trope of &#39;good communication skills&#39; is typically misunderstood. A wonderful quote that I&#39;ve heard attributed to Albert Einstein is paraphrased as &amp;quot;If you cannot explain something to a five year old, then you don&#39;t truly understand it.&amp;quot; This translates in tech as &amp;quot;If you cannot explain it to someone with substantially less technical knowledge then you don&#39;t know it well enough.&amp;quot; That somebody with substantially less technical knowledge can be a junior developer, a business partner, or a client. Being able to communicate technical hurdles and determining factors in a way that enables knowledgable discussion is necessary for developers to advance. This actually comes back to my motivation for writing this as I heard someone say in Slack that they were being given the opportunity to be a mentor to some interns. My response (however poorly worded) was this:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Teaching is the best way to cement your learning. Please be aware that if you haven&#39;t mentored before that you probably suck at it. That isn&#39;t a judgement or saying that you shouldn&#39;t do it, but instead that you should be aware of how what you are doing may be working well or not. Be conscious of how well your mentees are understanding things. There is a certain amount of their not knowing things, but if it seems to be taking them longer than you think it should to grasp something then try to loop back and explain it in better ways. We can ALWAYS improve our communication skills, particularly when it comes to relaying technical information to people with less technical knowledge (whether that is a junior developer or a business owner). Good luck! You will get out of it as much as you put in, and if done well then you will have the opportunity to help form the way that these mentees approach development for the entirety of their career.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;After having typed and sent that realized that it was a bit blunt, and the topic required significantly more information than I had initially provided. I hope that this elaboration has been helpful to you as you move forward in your career, hopefully carrying on relationships as both mentor and mentee.&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>What Makes a Good Developer?</title>
		<category term="career" />
		<category term="development" />
		<category term="learning" />
		<category term="programming" />
		<summary>This question comes up a lot.</summary>
		<link href="https://coreydmccarty.dev/posts/2020_06_03_who_is_a_developer/"/>
		<updated>2020-06-03T00:00:00Z</updated>
		<id>https://coreydmccarty.dev/posts/2020_06_03_who_is_a_developer/</id>
		<content type="html">&lt;p&gt;I hear questions like this one at least once per week. To be fair, that may have something to do with the Code Connector community and it&#39;s culture. There are a great many people with non-traditional backgrounds in this group, and it has really helped me to better focus and realize the how little the schooling bit really influences ability as a developer.&lt;/p&gt;
&lt;p&gt;I have come across a greatly diverse group of people that have a zeal for development. Many of those people are self taught. That zeal is really the only commonality that I see between all of the people that I would consider to be really good with coding. There is a drive and a passion with which they approach things. It makes sense to me. Having gone through college for computer engineering, during my schooling I would have told you the same thing about engineering students. You see, when your work includes fighting with stupid errors and working potentially long hours in order to correct errors that you didn&#39;t understand in the beginning, you will require a great deal of drive and motivation. That motivation will likely also allow you to dig around in documentation for things which you were never trained. The documentation will take some time to figure out by itself, but you will likely find something interesting in the documentation aside from the thing that will help with your issue at hand. Those little tidbits of information that you pickup over the course of time are the things that pile upon one another becoming the depth of your knowledge.&lt;/p&gt;
&lt;p&gt;There is one level of programming work that can be done by anyone with a minimal skill set in development. These are the types of things that paid interns and fresh junior devs get assigned. Often times there are piles of this around any given project. You see anybody in this field can search the internet, documentation, and Stack Overflow for answers to these &#39;code monkey&#39; tasks. These are the things that allow us to cut our teeth in this business and to become familiar. Our familiarity grows with the language, the framework, the IDE, the code base, and the process itself of development. Code monkey work is great for new devs (whether that be new to a project or to the profession), but doesn&#39;t ever actually stop during your career. These things can be pretty frustrating and not very exciting and in order to get through it you need to have a solid interest.&lt;/p&gt;
&lt;p&gt;I see the same approach used in life and hobby of many developers. Common interests may include sports, video games, tablestop games, computer building, mechanical keyboards, traditional wet shaving or any of a million things with a depth of information that may be necessary to dig through in order to fully enjoy. This passion and excitablity is what allows these people to be good developers, games, and stewards of their chosen hobby.&lt;/p&gt;
&lt;p&gt;The people that make great developers want to know how &#39;it&#39; works; whatever it may be. They dig to figure out strategies for complex games. They spend hours on Massdrop looking for deals on really cool equipment that might not ever be available again. There IS a little bit of hipster in there for many. There is enjoyment in finding a thing that nobody else knows about. Even with programming that is a powerful position to be in. You might be the only one in the group that knows a given language or framework. This not only enables you to work on things where other may not be capable, but it also allows you to have the opportunity to help others with their issues. The sheer knowledge that a library or framework exists can be massively impactful to the direction of a project.&lt;/p&gt;
&lt;p&gt;In what other profession can you have a long standing war such as &#39;vim or emacs&#39; when both of them are a pain to use the first time? We have the ability to dig into difficult things and develop a love for them. There is a satisfaction in it.&lt;/p&gt;
&lt;p&gt;The passion that we have enables us to sit and listen to someone talk about a project that we know nothing about and to follow along with the concepts being discussed. It isn&#39;t just a story of their current work, it is a knowledge entry for the use case of whatever tech stack they may be using.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;tl;dr: anyone can be a great developer if they really want to be.&lt;/p&gt;
&lt;/blockquote&gt;
</content>
	</entry>
	
	<entry>
		<title>New Job New Tools</title>
		<category term="career" />
		<category term="watercooler" />
		<category term="productivity" />
		<category term="discuss" />
		<summary>It&#39;s amazing the differences that a tool set can make.</summary>
		<link href="https://coreydmccarty.dev/posts/2020_07_13_new_job/"/>
		<updated>2020-07-13T00:00:00Z</updated>
		<id>https://coreydmccarty.dev/posts/2020_07_13_new_job/</id>
		<content type="html">&lt;p&gt;I recently started a new job, and it&#39;s only the second that I&#39;ve had in my dev career. With a fresh look into how different it can be between companies, I thought that I&#39;d share a few thoughts. I&#39;d also love to hear yours in the comments.&lt;/p&gt;
&lt;h2&gt;Old Busted&lt;/h2&gt;
&lt;p&gt;I started off as a full time employee of a vendor company providing onsite/offshore model software development and support for a large logistics company. As such I never had much say in the tools that were being used. The company decided against allowing anyone to have admin rights on their local machine, and their &#39;official&#39; take on IDE availability was that &amp;quot;Eclipse is the corporate standard and we will not consider making any alternatives available.&amp;quot; Which was fun. This was even more fun when the vendors lost their desktop licenses for Microsoft Office when we moved to 365. It was also especially cumbersome to work from home when the vendors could not access the code repository or the test servers via VPN. Instead, you had to connect to vpn, then log in to a virtual server (after many failed attempts), and use whatever software was installed there to do your work. Overall, it seems like there was more concern with being secure than being productive.&lt;/p&gt;
&lt;h2&gt;New Hottness&lt;/h2&gt;
&lt;p&gt;I can&#39;t adequately communicate the glee that I experienced in my first week of work. I was given the option to have full license of IntelliJ IDEA or Eclipse. I got GitKraken, desktop applications for Office, local admin on my machine, the full Atlassian tool stack [Jira, BitBucket, Confluence, Bamboo] that auto-magically works together, and an account with Pluralsight matched with a standing calendar block to study every week.&lt;/p&gt;
&lt;p&gt;While it has been a bit weird transitioning jobs during the pandemic, I have had the greatest experience with getting help with things. Everyone that I&#39;ve asked for help is willing to stop and assist as needed. The work tasks are well defined, small units of effort with recommendations for solution. All that was necessary was to apply the change as recommended and then test. As I&#39;ve needed access to an system I&#39;ve been able to quickly request it and have it granted within 24 hours.&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;It&#39;s amazing how much different life can be in a new position/place. If you are in a tough spot, keep at it. Build your experience as you look for work, and eventually you will find a place that works well for you. Currently I can&#39;t imagine a reason that I&#39;d leave my current role.&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>New Tools</title>
		<category term="productivity" />
		<category term="tools" />
		<category term="discuss" />
		<category term="watercooler" />
		<summary>New tools can drastically improve your quality of life.</summary>
		<link href="https://coreydmccarty.dev/posts/2020_07_30_new_tools/"/>
		<updated>2020-07-30T00:00:00Z</updated>
		<id>https://coreydmccarty.dev/posts/2020_07_30_new_tools/</id>
		<content type="html">&lt;p&gt;Over the last couple of weeks I&#39;ve had various people that I respect suggesting different tools to me and I&#39;ve been really happy with the results. I&#39;ll share them with you below, but I&#39;d also love to hear about whatever tools you have that might help others in their daily life.&lt;/p&gt;
&lt;h1&gt;ZSH&lt;/h1&gt;
&lt;p&gt;There are several option in shells for Linux command line and if you are anything like me then you may have just learned Bash as it was already there and gotten used to it. After years of seeing Zsh recommended, I decided to give it a try along with &lt;a href=&quot;https://ohmyz.sh/&quot;&gt;Oh-My-Zsh&lt;/a&gt; that is usually recommended for additional functionality. The command line experience is just given more power and polish with Zsh over Bash. This recommendation came to me along with the &lt;a href=&quot;https://commandlinepoweruser.com/&quot;&gt;Command Line Power User&lt;/a&gt; course.&lt;/p&gt;
&lt;p&gt;Features (as &lt;a href=&quot;https://en.wikipedia.org/wiki/Z_shell#Features&quot;&gt;listed on Wikipedia&lt;/a&gt;):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Programmable command-line completion that can help the user type both options and arguments for most used commands, with out-of-the-box support for several hundred commands&lt;/li&gt;
&lt;li&gt;Sharing of command history among all running shells&lt;/li&gt;
&lt;li&gt;Extended file globbing allows file specification without needing to run an external program such as find&lt;/li&gt;
&lt;li&gt;Improved variable/array handling&lt;/li&gt;
&lt;li&gt;Editing of multi-line commands in a single buffer&lt;/li&gt;
&lt;li&gt;Spelling correction and autofill of command names (and optionally arguments, assumed to be file names)&lt;/li&gt;
&lt;li&gt;Various compatibility modes, e.g. Zsh can pretend to be a Bourne shell when run as /bin/sh&lt;/li&gt;
&lt;li&gt;Themeable prompts, including the ability to put prompt information on the right side of the screen and have it auto-hide when typing a long command&lt;/li&gt;
&lt;li&gt;Loadable modules, providing among other things: full TCP and Unix domain socket controls, an FTP client, and extended math functions.&lt;/li&gt;
&lt;li&gt;The built-in where command. Works like the which command but shows all locations of the target command in the directories specified in $PATH rather than only the one that will be used.&lt;/li&gt;
&lt;li&gt;Named directories. This allows the user to set up shortcuts such as ~mydir, which then behave the way ~ and ~user do.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Oh-My-Zsh&lt;/h2&gt;
&lt;p&gt;This is a framework for managing your Zsh configuration with helpers, plugins, and themes. It adds to the already wonderful Zsh experience and have found several included plugins that are very nice. My current configuration makes use of &lt;code&gt;colored-man-pages&lt;/code&gt;, &lt;code&gt;extract&lt;/code&gt;, &lt;code&gt;alias-finder&lt;/code&gt;, &lt;code&gt;common-aliases&lt;/code&gt;, &lt;code&gt;zsh-interactive-cd&lt;/code&gt;, &lt;code&gt;z&lt;/code&gt;, and &lt;code&gt;fzf&lt;/code&gt;. I&#39;m really enjoying them.&lt;/p&gt;
&lt;h1&gt;MobaXterm with WSL2&lt;/h1&gt;
&lt;p&gt;&lt;a href=&quot;https://mobaxterm.mobatek.net/&quot;&gt;MobaXterm&lt;/a&gt; is a terminal emulator for windows. It can be used with different bash emulators. If you have the &lt;a href=&quot;https://docs.microsoft.com/en-us/windows/wsl/about&quot;&gt;Windows Subsystem for Linux&lt;/a&gt; installed on Windows 10 then it will work together without any additional configuration. MobaXterm also worked flawlessly with my &#39;agnoster&#39; theme for Zsh when the standard WSL2 Ubuntu terminal required additional fonts. If you aren&#39;t familiar with MobaXterm, it is a tabbed terminal emulator with split screen and MultiExec modes which can be a huge help when you are working remotely on different servers. I have used this to kickoff scripts on different servers at the same time or to jump through a gateway server into a build box to execute several scripts at the same time. I can ssh and enter passwords on several terminals at the same time to cut down on the setup time.&lt;/p&gt;
&lt;h1&gt;Notable&lt;/h1&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/notable/notable&quot;&gt;Notable&lt;/a&gt; is a note keeping tool for markdown files. This is a free product with a single developer maintaining it. It has a &lt;a href=&quot;https://www.reddit.com/r/Notable/&quot;&gt;subreddit&lt;/a&gt; for support and the developer is very active there. I currently use this tool primarily for reading my notes as there are some things that I&#39;d like to see added before I use it as my primary markdown editor. All of those changes have been acknowledged by the developer as being in planning. The biggest benefits that I see in Notable is the interface that allows you to add tags to your markdown files, collect them in notebooks, and quickly go between different groups. When a document is opened the default view is the &#39;preview&#39; or &#39;rendered&#39; html that results from the markdown, but there is an edit view that is easily entered in the same frame. Once the new editing features are added then this will be my primary markdown environment, until then I keep VSCode on deck with the Markdown-All-In-One plugin for composing markdown files quickly during meetings.&lt;/p&gt;
&lt;h1&gt;Cascadia Code Font&lt;/h1&gt;
&lt;p&gt;Really it&#39;s just having ligatures in general. I picked up &lt;a href=&quot;https://github.com/microsoft/cascadia-code&quot;&gt;Cascadia Code&lt;/a&gt; initially, but after adopting it for use in VSCode, I found that &lt;code&gt;JetBrains Mono&lt;/code&gt; actually supports ligatures as well. It&#39;s a really small touch that I feel makes the development experience feel nicer.&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>Use the Tools To Your Advantage</title>
		<category term="meta" />
		<category term="watercooler" />
		<category term="blog" />
		<category term="tools" />
		<summary>Don&#39;t work harder than you have to.</summary>
		<link href="https://coreydmccarty.dev/posts/2020_08_05_use_the_platform/"/>
		<updated>2020-08-05T00:00:00Z</updated>
		<id>https://coreydmccarty.dev/posts/2020_08_05_use_the_platform/</id>
		<content type="html">&lt;p&gt;I see several content creators doing things in their posts that are easily done with the tools built into the DEV/Forem tooling. I&#39;ve commented to several people about how they can make use of these tools to streamline their content publication without loss of functionality (and maybe even improve their brand quality/SEO in the process). Overall,&lt;/p&gt;
&lt;h1&gt;Links to Blogs&lt;/h1&gt;
&lt;p&gt;I 100% support people owning their content and publishing first on their own site. I do this as well. There are tools to utilize RSS and to link back to the original article on your site that are included in the DEV platform. In the &lt;code&gt;settings&lt;/code&gt; menu there is a &lt;code&gt;Publishing from RSS&lt;/code&gt; section wher you can add your Atom feed url. There are also option to &lt;code&gt;Replace self-referenctial links with DEV-specific links&lt;/code&gt; which will bridge your dev articles on the same platform in a similar way to how you might link your blog posts together on your personal site. The other option on this page is &lt;code&gt;Mark the RSS source as canonical URL by default&lt;/code&gt; which will provide a link to the blog post on your site in a special way that search engines will acknowledge your site as the origin of the material. This helps with SEO as search engines will remove listings of duplicate data and without a cononical reference it will prioritize the one with higher SEO/reputation and likely remove your original link.&lt;/p&gt;
&lt;h1&gt;Social links&lt;/h1&gt;
&lt;p&gt;I often see people providing a short bio and social links at the end of their post which is something that is common enough that the platform actually does this automatically using a card of your primary profile information. Firstly, you should make sure that you have filled out your profile information so that your profile doesn&#39;t give a &#39;404 profile not found&#39;, but you can also add whatever links that you would like along with a short summary for display. The links will be listed on your profile card with their appropriate logo.&lt;/p&gt;
&lt;p&gt;Links supported via Settings&amp;gt;Profile&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Your Website&lt;/li&gt;
&lt;li&gt;Facebook&lt;/li&gt;
&lt;li&gt;YouTube&lt;/li&gt;
&lt;li&gt;Stack Overflow&lt;/li&gt;
&lt;li&gt;LinkedIn&lt;/li&gt;
&lt;li&gt;Behance&lt;/li&gt;
&lt;li&gt;Dribble&lt;/li&gt;
&lt;li&gt;Medium&lt;/li&gt;
&lt;li&gt;GitLab&lt;/li&gt;
&lt;li&gt;Instagram&lt;/li&gt;
&lt;li&gt;Mastadon&lt;/li&gt;
&lt;li&gt;Twitch&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There is also a Github integration where you can login to DEV using your Github account and pin certain repositories to your DEV profile page.&lt;/p&gt;
&lt;h1&gt;Lists of posts&lt;/h1&gt;
&lt;p&gt;There are a couple of versions of this that have different solutions. First is a list of all posts that you have. This can be easily omitted by asking people to check out your other posts from your profile (which has a link at the bottom of the article). The other type is for sets of articles to link to the other entries. The DEV platform has builtin functionality for this as well. Among the &lt;code&gt;Front Matter&lt;/code&gt; information available in the &lt;a href=&quot;https://dev.to/p/editor_guide&quot;&gt;editor guide&lt;/a&gt; is the &lt;code&gt;series&lt;/code&gt; entry. This actually has some really awesome functionality. It will automatically generate a list of the all posts published in this series in order of publication. It will be updated once there is a new part published so that you don&#39;t have to go back and edit previous posts.&lt;/p&gt;
&lt;h1&gt;Summary&lt;/h1&gt;
&lt;p&gt;It pays to learn your tools in order to make better use of them. I highly recommend taking a look through the settings pages and the editor guide that is available via the &lt;code&gt;i&lt;/code&gt; logo on comment and post editors. The DEV team has included a LOT of cool functionality that you can harness in order to spend less time on the tools and more time on the actual content. Honestly the only thing that I worry with in between posting on my site and posting on dev is finding a &lt;code&gt;cover_image&lt;/code&gt;&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>Who is Uncle Bob</title>
		<category term="career" />
		<category term="codequality" />
		<category term="beginners" />
		<category term="codenewbie" />
		<category term="uncle bob" />
		<summary>After hearing the name for a while, I decided to learn more about/from Uncle Bob</summary>
		<link href="https://coreydmccarty.dev/posts/2020_08_12_uncle_bob/"/>
		<updated>2020-08-12T00:00:00Z</updated>
		<id>https://coreydmccarty.dev/posts/2020_08_12_uncle_bob/</id>
		<content type="html">&lt;p&gt;After spending several hours listening to his talks, it occured to me that this information is needed by all developers and perhaps may be beyond the immediate consideration of beginners. In order to do my part to share the message of a man named Robert C Martin I will be writing a summaries of his talks as I watch them.&lt;/p&gt;
&lt;h1&gt;The Man&lt;/h1&gt;
&lt;p&gt;Robert C Martin is an American software engineer who writes wonderful books about writing code as well as teaching and talking on the material of his books. &lt;a href=&quot;https://coreydmccarty.dev/posts/2020_08_12_uncle_bob/cleancoder.com&quot;&gt;His website&lt;/a&gt; contains a great deal of information, and you have likely heard about these books as many are considered required reading for career developers.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Special:BookSources?isbn=978-0132038379&quot;&gt;Designing Object-Oriented C++ Applications Using the Booch Method&lt;/a&gt; 1995&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Special:BookSources/978-0135974445&quot;&gt;Agile Software Development&lt;/a&gt; 2002&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Special:BookSources/978-0132350884&quot;&gt;Clean Code: A Handbook of Agile Software Craftsmanship&lt;/a&gt; 2009&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Special:BookSources/978-0137081073&quot;&gt;The Clean Coder: A Code of Conduct For Professional Programmers&lt;/a&gt; 2011&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Special:BookSources/978-0134494166&quot;&gt;Clean Architecture: A Craftsman&#39;s Guide to Software Structure and Design&lt;/a&gt; 2017&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Special:BookSources/978-0135781869&quot;&gt;Clean Agile: Back to Basics&lt;/a&gt; 2019&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Uncle Bob is credited with cretion of the &lt;a href=&quot;https://en.wikipedia.org/wiki/SOLID&quot;&gt;SOLID principles&lt;/a&gt;, was a founder of the &lt;a href=&quot;https://en.wikipedia.org/wiki/Agile_Manifesto&quot;&gt;Agile Manifesto&lt;/a&gt;. He served as editor-in-chief of &lt;a href=&quot;https://en.wikipedia.org/wiki/C%2B%2B_Report&quot;&gt;C++ Report&lt;/a&gt; magazine and served as the first charman of the &lt;a href=&quot;https://www.agilealliance.org/&quot;&gt;Agile Alliance&lt;/a&gt;. His writing can be found at &lt;a href=&quot;https://blog.cleancoder.com/&quot;&gt;blog.cleancoder.com&lt;/a&gt; and you can find many of his talks on YouTube if you don&#39;t have the ability to attend one in person. He runs a consulting company and a company that provides training videos.&lt;/p&gt;
&lt;p&gt;In the coming weeks I will be writing beginner level summaries of his publicly available videos.&lt;/p&gt;
&lt;p&gt;Happy Coding!&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>Uncle Bob - Lesson One</title>
		<category term="career" />
		<category term="codequality" />
		<category term="cleancode" />
		<category term="development" />
		<category term="uncle bob" />
		<summary>My summary of the video.</summary>
		<link href="https://coreydmccarty.dev/posts/2020_08_18_uncle_bob_lesson_1/"/>
		<updated>2020-08-18T00:00:00Z</updated>
		<id>https://coreydmccarty.dev/posts/2020_08_18_uncle_bob_lesson_1/</id>
		<content type="html">&lt;p&gt;This material is a summary of a &lt;a href=&quot;https://www.youtube.com/watch?v=7EmboKQH8lM&quot;&gt;talk by Uncle Bob that I watched on YouTube&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Regardless of age, race, gender as developers we share a passion for something, and can communicate about it in a way that most other people can&#39;t.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;Introduction to Clean Code&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://coreydmccarty.dev/img/wtfpm.jpg&quot; alt=&quot;The only valid measurement of code quality: wtf&#39;s per minute&quot; /&gt;&lt;/p&gt;
&lt;p&gt;In this comic the door on the right must contain some pretty terrible code with five simultaneous WTF&#39;s, but how do we move from that to the left with only two? How do we avoid driving coworkers mad trying to understand our code?&lt;/p&gt;
&lt;p&gt;In the lecture room there are thousands of processors. Your smartphone alone contains more computing power than the the planet Earth in 1980. Computers/processors are in a huge amount of things around us. Airbuds, cameras, lights, speakers, smoke detectors, and even exit signs contain small processors. In speakers and microphones, a small audio processor is used for removing audio hum. It&#39;s become less expensive than using a traditional capacitor and inductor. Trickle charge in emergency exit signs is probably being monitored by a processor. Any given person in our society interacts with a software system at least once every minute. There is software running in your refrigerator, dishwasher, stove, tv, remote, and even your car. Modern cars run over a hundred million lines of code running in the entertainment system, gps, and even in the engine controller. When you push on the brake pedal there are if statements that decide whether or not to slow/stop the car. This means that there are likely dozens of people that have died because software controlling the brake and accelerator failed for some stupid reason.&lt;/p&gt;
&lt;h2&gt;Why?&lt;/h2&gt;
&lt;p&gt;You and I are killing people. We didn&#39;t get into this business to kill people. We became programmers because we had some experience with a cool machine somewhere that we were able to make do something fun, and we decided that we wanted to do that for the rest of our life. Now you can kill people with software, or lose 450 million of dollars in 45 minutes. There is nothing that you can do in our society without software. Society doesn&#39;t realize just how dependent everything is on software. And developers control that. The people that believe that they rule the world bring their rules to us and we write the software that governs the machines that actually run the world. Society doesn&#39;t yet comprehend how dependent they are upon developers. They won&#39;t until some dumb programmer does one dumb thing and kills 10,000 people at once. When that occurs the politicians of the world will rise up and point a finger at US.&lt;/p&gt;
&lt;p&gt;The CEO of Volkswagen North America testified before the American congress about why &lt;a href=&quot;https://www.epa.gov/enforcement/volkswagen-clean-air-act-civil-settlement&quot;&gt;their software was cheating EPA regulations in California&lt;/a&gt;. He said &amp;quot;It was just a couple of software developers that did this for whatever reason.&amp;quot; It &lt;em&gt;&lt;strong&gt;was&lt;/strong&gt;&lt;/em&gt; a couple of developers that did it. They are now in jail. But when the politicians of the world come to hold us accountable for our actions they will ask &amp;quot;How could you let this happen?&amp;quot; and if our answer is &amp;quot;&lt;em&gt;Boss said that it had to get done by Tuesday&lt;/em&gt;&amp;quot; then they will be forced to regulate us and tell us what languages we can use, what courses we must take, what books we must read, what process we must follow, and what signatures that we must get to do anything.&lt;/p&gt;
&lt;p&gt;How do we avoid this? We avoid it by getting there first. We have to establish an ethics of software development. We are not a profession as there is nothing that we profess. We have to build our own set of standards so that when the politicians of the world come to hold us accountable we can respond with proof that it is not neglegence because we have standards, morals, and ethics that have been maintained. They will come to us to looking for those standards that they can enforce, and we had better have a good definition of what it is that we hold dear as a profession. One of those had better be cleanliness of code.&lt;/p&gt;
&lt;h2&gt;Why are Programmers so slow?&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Kent_Beck&quot;&gt;Kent Beck&lt;/a&gt; wrote a book called &lt;a href=&quot;https://en.wikipedia.org/wiki/Special:BookSources/978-0321413093&quot;&gt;Implementation Patterns&lt;/a&gt;. In its introduction it stated that the book was based on a &#39;&lt;em&gt;&lt;strong&gt;fragile premise&lt;/strong&gt;&lt;/em&gt;&#39; that &#39;&lt;em&gt;&lt;strong&gt;good code matters&lt;/strong&gt;&lt;/em&gt;.&#39; This seems pretty solid. If we work on a green field project with no existing code then we can get features completed extremely fast. By the time a year has past, a request for similarly sized feature may take six months. The speed at the beginning is done at the cost of a bit of mess. Over time this slows progress down to around 1% of the original rate.&lt;/p&gt;
&lt;p&gt;You have to figure out how to go faster. Adding more people to the team makes the team slower. The experienced people have to slow down to train the new people, and you have to hope that the new peole come up to speed in time to become helpful. The new people then wind up being trained by the old code, and they emulate it. The problem of messy code becomes worse.&lt;/p&gt;
&lt;p&gt;If programmers didn&#39;t make a mess then they&#39;d be faster. You could add new features in a reasonable amount of time as long as the code was able to be maintained in an orderly way. We make the mess so that we can go fast. Then once the code finally works there can be a fear of breaking it that prevents it being touched again. Having gotten it work is only first part. Nobody writes clean code. Once it works it will be a mess. Once it works, it should then be cleaned. That should take roughly the same amount of time that it took to write it. Nobody wants to put that time in, and that&#39;s the problem. You aren&#39;t done when it works, you&#39;re done when it&#39;s right. With that attitude it would always stay clean and you&#39;d never experience the slow down.&lt;/p&gt;
&lt;h2&gt;What is Clean Code?&lt;/h2&gt;
&lt;p&gt;Uncle Bob says:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The only way to go fast is to go well.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Bjarne_Stroustrup&quot;&gt;Bjarne Stroustrup&lt;/a&gt; - creator of C++&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;I like my code to be elegant and efficient ... clean code does one thing well.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;But, what does &amp;quot;one thing&amp;quot; mean? Uncle Bob has a theory.&lt;/p&gt;
&lt;h3&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Grady_Booch&quot;&gt;Grady Booch&lt;/a&gt; - writer of Object Oriented Software Design with Applications&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;Clean code is simple and direct. It reads like well-written prose...&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;What does it mean for code to resemble well-written prose? Uncle Bob&#39;s theory on this will be shared as we go forward.&lt;/p&gt;
&lt;h3&gt;&lt;a href=&quot;https://michaelfeathers.silvrback.com/&quot;&gt;Michael Feathers&lt;/a&gt;&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;Clean code always looks like it was written by someone who cares.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;When&#39;s the last time that you read a module and thought that the author cared about you and everyone that would be reading that code?&lt;/p&gt;
&lt;p&gt;Your job is only half to get code to work. &lt;em&gt;The more important half of your job is to write code that other people can understand and maintain&lt;/em&gt;. Understandable code that doesn&#39;t work can be made to work, but working code that can&#39;t be understood will become useless as soon as the requirements change. It is more important to communicate with your peers using a programming language than it is for the computer to understand you.&lt;/p&gt;
&lt;h3&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Ward_Cunningham&quot;&gt;Ward Cunningham&lt;/a&gt; - inventor of wiki&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;You know you are working on clean code when each routine you read turns out to be pretty much what you expected.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Very first wiki is still alive at &lt;a href=&quot;http://c2.com/&quot;&gt;c2.com&lt;/a&gt; and was built in 19 lines of Perl in 1990. It&#39;s full of desing patterns, extreme programming and agile stuff.&lt;/p&gt;
&lt;p&gt;Everything is pretty much what you expect or &lt;strong&gt;ZERO&lt;/strong&gt; WTF per second.&lt;/p&gt;
&lt;h2&gt;Analyzing some lines of code&lt;/h2&gt;
&lt;p&gt;Uncle Bob gives a few minutes to read and understand some example code that stretches across three slides and is far from being easily understood. The code is explained for handling his testing tool called Fitness which has tests defined on wiki pages. The code fetches setup and teardown pages for a test and creates html. &lt;code&gt;TestableHTML&lt;/code&gt; is the function name which he calls horrible as functions should have verbs for names because they do something.&lt;/p&gt;
&lt;p&gt;The first line of the function is creating a wiki page and the next is creating a string buffer which takes you crashing immediately from the highest level of abstraction into the lowest. Every line of a function should be at the same level of abstraction, which is one level below the name. We write code in a very rude way. We oscillate from high level to very low level as we think about things. There is nothing wrong with writing things this way, but you must come back and clean it up so that it can be easily understood.&lt;/p&gt;
&lt;p&gt;The function follows four repetitions of the form: null check, page crawler, and three appends with one of the blocks having an extra append for a new line. Getting something done and then using copy and paste is common enough of a technique to follow for getting code to work, but not something that should be left.&lt;/p&gt;
&lt;h3&gt;Long code is not Good Code&lt;/h3&gt;
&lt;p&gt;A cursory cleanup of this code brings it into a single page where it becomes visible that the entire function body is enclosed in a single &lt;code&gt;if&lt;/code&gt; statement. The control of that &lt;code&gt;if&lt;/code&gt; statment has been moved into a boolean variable whose only purpose is to explain the state that it contains. &lt;code&gt;if(isTestPage)&lt;/code&gt; reads more like well-written prose. The four similar blocks have been brought into one single block. This is much easier to understand by the simple fact that it&#39;s smaller.&lt;/p&gt;
&lt;h3&gt;Good Code / Refactored Function&lt;/h3&gt;
&lt;p&gt;If smaller is better then let&#39;s go a step further.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;functions should not be 100 lines long&lt;/li&gt;
&lt;li&gt;functions should hardly ever be 20 lines long&lt;/li&gt;
&lt;li&gt;prior refactor was too long even in one screenful&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;renderPageWithSetupsAndTeardowns&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token class-name&quot;&gt;PageData&lt;/span&gt; pageData&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;boolean&lt;/span&gt; isSuite&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;isTestPage&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;pageData&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;            &lt;span class=&quot;token function&quot;&gt;includedSetupAndTeardownPages&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;pageData&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; isSuite&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; pageData&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getHtml&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This function takes no time to understand. It is very polite.&lt;/p&gt;
&lt;h2&gt;Polite Code / Rules for writing a news paper article&lt;/h2&gt;
&lt;p&gt;If you read the news there is an expected format.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Start with a headline&lt;/li&gt;
&lt;li&gt;Synopsis/abstract paragraph that describes the entire content&lt;/li&gt;
&lt;li&gt;...more detailed...&lt;/li&gt;
&lt;li&gt;...even more detailed ...&lt;/li&gt;
&lt;li&gt;so on&lt;/li&gt;
&lt;li&gt;so forth&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The most detailed bit is at the very end. This allows you to read a bit and decide whether you are still interested, and that is polite. It allows for early exit as soon as you get bored of the detail. In code this allows you to read through what is going on without getting into unneccessary detail.&lt;/p&gt;
&lt;p&gt;Having short functions with a single level of abstraction allows &lt;em&gt;politely&lt;/em&gt; for you to dig as deep as you need to and to understand the purpose from each level.&lt;/p&gt;
&lt;h2&gt;Shrunk Code / The Rules of Functions&lt;/h2&gt;
&lt;p&gt;What&#39;s the proces of refactoring the long code into something shorter?&lt;/p&gt;
&lt;p&gt;The rules of functions are as follows:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Functions should be small.&lt;/li&gt;
&lt;li&gt;They should be smaller than that.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;How many lines should a funciton be? It should fit on your screen. Originally a screen (once they were available in the 80&#39;s) would have been 24 lines by 72 columns. this follows from the fact that punch card had 80 holes per line and 8 were used for sequence numbers. This led to functions of 20 lines or less. But Uncle Bob&#39;s rule is that a function should do one thing.&lt;/p&gt;
&lt;p&gt;In IntelliJ you can use the refactoring menu with an entry called extract method. If you cannot meaningfully extract another function then your function does exactly one thing. This means that you should extract methods as far as you can to have tiny little functions.&lt;/p&gt;
&lt;p&gt;Before you say that this would lead to your drowning in thousands of little, tiny functions, you will not drown because you will have to give them names. As they are named they should be moved into appropriately named classes in appropriately names packages.&lt;/p&gt;
&lt;h2&gt;Shrunk Code / Drawing a Function&lt;/h2&gt;
&lt;p&gt;Long ago Uncle Bob wrote this function called gi. GI stood for graphic interpreter. It was 3000 lines long, but this was the general shape of it:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://coreydmccarty.dev/img/uncle_bob_code_shape.png&quot; alt=&quot;Code form with an inconsistent sawtooth shape with many varying depths of nesting&quot; /&gt;&lt;/p&gt;
&lt;p&gt;If some part of your brain relaxes when you see this shape then it&#39;s because you&#39;ve come to know similar code it by it&#39;s landmarks. If rotated 90 degrees then it would resemble the horizon. This is something our brains became accustomed to over time. It certainly isn&#39;t because nested code is enjoyable to read or maintain.&lt;/p&gt;
&lt;p&gt;If you have a couple of variables &lt;code&gt;int i,j;&lt;/code&gt; that are manipulated in the first indent section. Extract method on this section. If &lt;code&gt;i&lt;/code&gt; and &lt;code&gt;j&lt;/code&gt; are both local variables then you can make them global for the time being. Now you can extract method on all of the funcionality that manipulates &lt;code&gt;i&lt;/code&gt; and &lt;code&gt;j&lt;/code&gt;, and you now have a bit of data and a set of functions that operate on that data. This is what we call a class. This refactoring method can help you to discover the true object oriented structure of the system that you are trying to design.&lt;/p&gt;
&lt;h2&gt;When and why was Java invented?&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/James_Gosling&quot;&gt;James Gosling&lt;/a&gt; in 1991 invented Java at Sun Microsystems in the Contract Programming division and there was a contract for a cable television set top box. Sun was dedicated to C++ at the time, but he hated the language so he made his own. He called it Oak, and he used it for the project and it worked and the contract ended which cast Oak to the garbage bin.&lt;/p&gt;
&lt;p&gt;Sun Microsystems was a hardware company and their marketing scheme was selling hardware. They realized that if they wanted to be successful then they should win over programmers due to their feedback provided for buying systems. It would be really great if they could provide &amp;quot;the language of the internet&amp;quot; (whatever that might be). As they looked around found James Gosling had Oak. They took Oak and renamed it something more stimulating like coffee.&lt;/p&gt;
&lt;h2&gt;Prose Code&lt;/h2&gt;
&lt;p&gt;Indenting&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Smallness also implies:
&lt;ul&gt;
&lt;li&gt;functions should not be large enough to hold nested structures.&lt;/li&gt;
&lt;li&gt;1-4lines would be ideal, 6 might happen occasionally&lt;/li&gt;
&lt;li&gt;therefore, the indent level of a function should not be greater than one or two&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;This, of course, makes the functions easier to read and understand&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you  keep refactoring out chunk by chunk then you can make the body of if statements into function calls.&lt;/p&gt;
&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;cupIsEmpty&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token function&quot;&gt;fillCup&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This reads like well-written prose.&lt;/p&gt;
&lt;h2&gt;Arguments&lt;/h2&gt;
&lt;h3&gt;Count&lt;/h3&gt;
&lt;p&gt;The best case for argument count to a function is zero as that is the easiest to understand. One is very straight forward as well. Two arguments can only be arranged two ways, but with three then there are 6 possibilities for ordering your arguments as it follows by N-Factorial. With 4 there are 24 options. Uncle Bob&#39;s personal rule is that a function shouldn&#39;t include more than 3 argments out of politeness to the reader. If you have a function and you want to pass six things into it, then if those six things are so cohesive that they should be passed in together why aren&#39;t they already collected into an object?&lt;/p&gt;
&lt;h3&gt;Booleans&lt;/h3&gt;
&lt;p&gt;If you are passing a boolean into a function then there is likely an if-else in that function. Pull that out and have a function of the if and a function for the else. &lt;code&gt;doThis(4, 5, 6, true)&lt;/code&gt; is rude. What does that &lt;code&gt;true&lt;/code&gt; mean? If it is really important then you would benefit from a method name that denoted what was being done if it is &lt;code&gt;true&lt;/code&gt;. The exception to this rule is something like &lt;code&gt;setFlag(true)&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;boolIsTrue&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token function&quot;&gt;doFirstThing&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token function&quot;&gt;doSecondThing&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Isn&#39;t that easy to read?&lt;/p&gt;
&lt;h3&gt;Output Control&lt;/h3&gt;
&lt;p&gt;Arguments passed into a function for the purpose of collecting the output. It doesn&#39;t make sense when you are reading it. Your vertical momentum leads you to try to pass it over, but it demands that you come back and understand that out of place argument. It&#39;s a double take. It demands that you return to figure it out. If code causes you to do a double take that is rude. It forces you to stop what you are reading and go back.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Make sure that your code is not surprising.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;Avoid Switch Statements&lt;/h2&gt;
&lt;p&gt;Switch statements are bad. If you have a switch statement that is on the type of a shape, then there must be an &lt;code&gt;ENUM&lt;/code&gt; somewhere that defines those types. Switch statements will need to surround similar usages throughout your code. If you add a new type to the &lt;code&gt;ENUM&lt;/code&gt; then you need to find all of the switch statements and make a change. Don&#39;t forget the if/else statements. When you need to add a new type, THEN you must go through and find all of the right places to add your new shape. This is overly complex.&lt;/p&gt;
&lt;p&gt;Instead you should use polymorphism (inheritance) with a base class that contains the definition of the common functionality. Then each child class implements its own functionality and when you need to add a new shape then you only need to make changes in the new class for that shape, and it can be used by all of the other code that manipulates the different types of shapes. All of the draw, rotate, area, and other functions are wrapped inside the class and it manipulates its own data.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Open/Close Principle&lt;/strong&gt;&lt;br /&gt;
A module should be open for extension,&lt;br /&gt;
but closed to modification&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Switch statements cluster together dependency. There is a single module that has dependency on all of these outside modules. The switch statement is then used by some other modules. If there is a change in one of these dependencies of the switch statement then the switch code and everything dependent ON the switch code must be recompiled and redeployed. This breaks the ability to independently deploy parts of the system. Keeping interdependency minimal allows for independent deployment such as being able to deploy your GUI separate from your business logic. One really nice way to do this is to avoid switch statements.&lt;/p&gt;
&lt;h2&gt;Side Effects&lt;/h2&gt;
&lt;p&gt;A side effect is a change to the state of the system. The function &lt;code&gt;open()&lt;/code&gt; has a side effect as it leaves an open file. Another such is &lt;code&gt;new&lt;/code&gt; that allocates some memory. These side effect functions come in pairs, and we are really bad at remembering to call the second part of the pair. Garbage collection is a hack that allows us to forget about cleaning up the memory that we use. We still have to deal with opening and closing files and some other such pairs. Forgetting to let go of the resources that you allocate will eventually result in a system failure once the resources are depleted.&lt;/p&gt;
&lt;h3&gt;Using Lambdas To&lt;/h3&gt;
&lt;p&gt;A lambda is basically a class with one function called execute. We can use it to make &lt;code&gt;open()&lt;/code&gt; safe.&lt;/p&gt;
&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt; fn&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Lambda&lt;/span&gt; proc&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token class-name&quot;&gt;File&lt;/span&gt; f &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;fn&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    proc&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;f&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token class-name&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;f&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We now have a function that has no side effect. You pass a lambda into the function and the open and close are paired to prevent unintended side effects.&lt;/p&gt;
&lt;h3&gt;Command and Query Separation&lt;/h3&gt;
&lt;p&gt;A function that returns &lt;code&gt;void&lt;/code&gt; must have a side effect, otherwise it is useless. A function that returns something shouldn&#39;t have any side effect. This is a convention called &lt;strong&gt;Command and Query Separation&lt;/strong&gt;&lt;/p&gt;
&lt;h3&gt;Prefer Exceptions to returning error codes&lt;/h3&gt;
&lt;p&gt;Exceptions provide the opportunity to handle expliticly expected breakage states. Error codes are considerably easier to overlook.&lt;/p&gt;
&lt;p&gt;If you are going to have a &lt;code&gt;try&lt;/code&gt; block inside of a function then it is best to have &lt;strong&gt;ONLY&lt;/strong&gt; the &lt;code&gt;try&lt;/code&gt;/&lt;code&gt;catch&lt;/code&gt;/&lt;code&gt;finally&lt;/code&gt; and no pre or post blocks.&lt;/p&gt;
&lt;h2&gt;DRY Principle (Don&#39;t Repeat Yourself)&lt;/h2&gt;
&lt;p&gt;We want to avoid duplication as much as possible because it&#39;s sloppy. Move the duplicated code into a function, and if it is slightly different then you need to include an argument that allows you to know when to execute the different part. That works great for code that is duplicated.&lt;/p&gt;
&lt;p&gt;Sometimes you find the manipulation of a complex data structure requires duplication of a looping structure. If you have lambdas then you can use them here, as you create a looping method that can be passed in a lambda for what to execute inside that looping structure.&lt;/p&gt;
&lt;h2&gt;Structured Programming&lt;/h2&gt;
&lt;h3&gt;Edsger Dijkstra&#39;s Vision&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Edsger_W._Dijkstra&quot;&gt;Edsger Dijkstra&lt;/a&gt; was the first programmer in the Netherlands, and one of the first in the world. He survived Nazi occupation. He went into school and wanted to become a nuclear physicist. He saw the very first computer in the Netherlands, and went to his adviser and complained that there was no body of knowledge, formalism, or discipline in computers. He didn&#39;t think that his peers would take him seriously if he studied computers. The adviser suggested that he might be one of the ones that helps to define that formalism and body of knowledge. Dijkstra took this as a challenge and became the first programmer in the Netherlands. When he was married in the 1950&#39;s he had to list his profession. He tried to list that he was a programmer, but they denied him because that wasn&#39;t a known profession. He changed it to nuclear physicist. He said that he made the more difficult choice of programming over nuclear physics.&lt;/p&gt;
&lt;p&gt;He &lt;a href=&quot;https://www.cs.utexas.edu/users/EWD/ewd02xx/EWD215.PDF&quot;&gt;wrote a letter in 1968&lt;/a&gt; saying that &lt;code&gt;goto&lt;/code&gt; was considered harmful which was extremely disruptive. This was rejected for years, and people wrote scathing letters in professional publications debating his argument. All these years later we don&#39;t have &lt;code&gt;goto&lt;/code&gt;. His argument was that software should be like mathematics. There should be postulates and theorems that have been proven. These would be proven software that would be adapted by simple lemmas utilizing these proven pieces. He built up a mathematical structure of proof around if statements, loops, and many things. He discovered that certain algorithms cannot be proven correct because they have unrestricted &lt;code&gt;goto&lt;/code&gt;&#39;s. This is basically &lt;a href=&quot;https://en.wikipedia.org/wiki/Alan_Turing&quot;&gt;Alan Turing&lt;/a&gt;&#39;s &lt;a href=&quot;https://en.wikipedia.org/wiki/Halting_problem&quot;&gt;Halting Problem&lt;/a&gt;. Every algorithm can be composed of from three structures: Sequence, Selection, and Iteration.&lt;/p&gt;
&lt;h3&gt;Reality of Programming&lt;/h3&gt;
&lt;p&gt;We don&#39;t prove anything. Dijkstra&#39;s vision failed. We do lean on and risk our lives everyday on something else that cannot be proven. That thing is science. Science is made up of things that cannot be proven correct, but can be proven incorrect. We can surround something with enough tests that it&#39;s assumed correct. We can do similarly and demonstrate the non-failing qualities of software with tests. We may not be able to prove our software correct, but we can provide that it isn&#39;t incorrect by surrounding it with sufficient tests.&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>Career Advancement</title>
		<category term="career" />
		<category term="coding" />
		<category term="learning" />
		<category term="leadership" />
		<summary>How do you move forward?</summary>
		<link href="https://coreydmccarty.dev/posts/2021_06_10_career_advancement/"/>
		<updated>2021-06-10T00:00:00Z</updated>
		<id>https://coreydmccarty.dev/posts/2021_06_10_career_advancement/</id>
		<content type="html">&lt;p&gt;Once you have figured out a way into your first software development role, it is only logical that you would consider how you can move forward in your career. But it&#39;s not always clear what the next steps are beyond completing the tasks that you are given.&lt;/p&gt;
&lt;h2&gt;Learning&lt;/h2&gt;
&lt;p&gt;Firstly, I&#39;d like to say that setting your focus on climbing the ladder quickly is not exactly the best use of your time. No doubt that you&#39;ve figured out that learning is a pretty important part of our career field, and that doesn&#39;t change after getting hired. Having a job does provide a significant amount of direction for your learning. It&#39;s a good first step to get comfortable with the language, frameworks, and tools that your team uses; focus first on what&#39;s relevant to your current project. Learning things that seem small may be greatly helpful when making decisions later.&lt;/p&gt;
&lt;p&gt;When you are learning your first language the biggest thing that you are really learning is what computer programming really is. You learn how a programming language can be used to complete tasks. When you learn your second programming language, then the most important thing that you are learning is how you learn best. You will also learn how much the learning of your first language carries over into using a new language. There should be significant overlap in techniques. The language after all is just a tool at your disposal. By the time that you learn your third programming language you are really learning how esily you can pick up new things. I highly encourage people to take languages one at a time. You will learn more by getting into a deeper knowledge of your first language than by trying to learn three languages at the same time (like one of my coworkers). Allow yourself to become fluent in your first langauge to the point that you can think in that language the same way that you would a spoken language. If for some reason you find yourself working in a new language before you believe that you have reached the necessary depth in your first language then you should work to bring that new language to the level of understanding that you had in your first language, and continuing in this new language from there.&lt;/p&gt;
&lt;h2&gt;Know Yourself&lt;/h2&gt;
&lt;p&gt;The biggest part of your career, throughout all phases of it, is you. If you are anything like me then you may have managed to reach a suprising age before actually understanding WHO you are, and what your strengths are. Branding is something that gets discussed a lot in some dev circles, and the short version is that you have to know what&#39;s important to you, and what you&#39;re good at. I highly recommend asking your coworkers that know you best what they think your strengths are. For me personally this is asking questions and just talking to people. I really enjoy learning about things, whether those things are relevant to my job or not. The thing that has been the central pivot of any acknowledgement that I&#39;ve received are about taking part in discussions and asking questions that move towards goals. Your strengths aren&#39;t likely the same as mine, but it&#39;s very important that you know what they are.&lt;/p&gt;
&lt;h2&gt;Play to Your Strenghths&lt;/h2&gt;
&lt;p&gt;Once you know what things set you apart from your peers and where your largest amount of value lies, you need to keep these in mind during your work. For me this means that I make sure to ask questions about things that don&#39;t seem to make sense. Sometimes this reveals that I&#39;m just the only one in the room that didn&#39;t know something, other times it reveals that the entire team had assumed something wrongly. If your strengths lie directly in code work then perhaps you would be able to provide special value in your code reviews or pair/team programming where you could make an impact with the overall code quality. Whatever you do with your streghths, remember that every person on your team also has some strength and you should never assume that you are better than they are.&lt;/p&gt;
&lt;h2&gt;Remember Your Team&lt;/h2&gt;
&lt;p&gt;The best engineers not only provide value in their work, but improve the skills of those around them. This comes in the forms of teaching and of motivating those around them to learn more. Developing a culture of improvement and learning is paramount if a team is going to get better over time. As learning is such a pivotal part of our industry a team/person that is not interested in improvement is a liability to their company as our tools continue to improve. Our languages get new features and flaws are discovered. If we don&#39;t grow with our tools then our productivity is actually reducing over time.&lt;/p&gt;
&lt;h2&gt;Advancement Path&lt;/h2&gt;
&lt;p&gt;In order to become a junior developer you need to learn how to write code. These are the basic skills that everyone in the field should have. I expect that everyone reading this understands some amount of computer programming basics and knows that it is the vocabulary that we use to discuss solutions.&lt;/p&gt;
&lt;p&gt;In order to move on to a mid level then you need to understand the tooling itself and how tradeoffs work. Every tool has its strengths and weaknesses. As you work on different projects you will learn about the weaknesses of the tools that you use and the problems that can happen because of this. There is no such thing as a &#39;best programming language&#39; or &#39;best framework&#39;. Every tool has an area where it accels. Understanding tradeoffs is what will help you to move into this space.&lt;/p&gt;
&lt;p&gt;As you move toward senior or lead, your skills need to spread more into team culture and dynamics. It becomes important that you be able to mentor other developers. Mentorship doesn&#39;t always imply that the mentor knows more than the mentee. We all have gaps in our knowledge and in my experience a mentorship relationship can actually go both ways. The developer that has been in the industry longer can provide direction from that knowledge, and the developer that&#39;s been in the industry less time can provide information about different practices or tools that the more experienced dev has no experience with. Being able to identify where your knowledge gaps are and who around you knows the most are very important. In order to make the important decisions that come with more responsibility and title you must be able to evaluate the necessary factors and this often means asking the people that have the most knowledge.&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>Coding Challenge with Clean Code</title>
		<category term="codequality" />
		<category term="programming" />
		<category term="cleancode" />
		<category term="productivity" />
		<summary>What benefits are there to clean coding?</summary>
		<link href="https://coreydmccarty.dev/posts/2021_08_16_clean_coding_challenge/"/>
		<updated>2021-08-16T00:00:00Z</updated>
		<id>https://coreydmccarty.dev/posts/2021_08_16_clean_coding_challenge/</id>
		<content type="html">&lt;p&gt;After studying Uncle Bob&#39;s Clean Code and trying to practice it as much as possible, I find that it can make a huge improvement to the maintainability or even just readability of a piece of code.&lt;/p&gt;
&lt;p&gt;This coding challenge came up in one of my favorite coding communitites:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Length of the Last Word&lt;br /&gt;
Given a string s consisting of some words separated by some number of spaces, return the length of the last word in the string.&lt;br /&gt;
A word is a maximal substring consisting of non-space characters only.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;So, because I like to do challeneges with tests, I put together this bit of unit test using Python&#39;s built in unittest package based on the three examples that were given with the challenge.&lt;/p&gt;
&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; unittest &lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; TestCase&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;last_word_length&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;input_str&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;pass&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;TestLastWordLength&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;TestCase&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;test_one&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;self&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token keyword&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;last_word_length_golf&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Hello World&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;test_two&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;self&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token keyword&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;last_word_length_golf&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;   fly me   to   the moon  &#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;test_three&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;self&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token keyword&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;last_word_length_golf&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;luffy is still joyboy&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;6&lt;/span&gt;&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now, I knew that I could pull this off with a single line of Python. I quickly wrote this:&lt;/p&gt;
&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; re&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;last_word_length&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;input_str&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;re&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;split&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;r&#39;[\W]+&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; input_str&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;strip&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This does everything that the challenge asks for, but part of the goal of doing these challenges in my community is that we use several different languages and it allows everyone to get more familiar with the language that you used, whether they have ever written it before or not. One liners like this are not usually a good idea for long term maintenance OR teaching. So, I took a minute to clean it up a bit. Having tests laid out made it really easy to know that I&#39;d not introduced any errors.&lt;/p&gt;
&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; re&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;last_word_length&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;input_str&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br /&gt;    indefinite_whitespace &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;r&#39;[\W]+&#39;&lt;/span&gt;&lt;br /&gt;    clean_input &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; input_str&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;strip&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;    words &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; re&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;split&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;indefinite_whitespace&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; clean_input&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;words&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now, it&#39;s pretty easy for anyone with a moderate amount of coding ability to understand what&#39;s going on. We have a regex that matches any clustering of whitespace. We have an input string that gets trimmed/stripped of it&#39;s surrounding whitespace. That string gets split according to the regex. And then we return the length of the last word.&lt;/p&gt;
&lt;p&gt;There are two main things that this technique improves. Breaking the pieces apart reduces the mental overhead of undestanding each piece. Naming the variable helps to document the intention of that line. It also makes the later lines significantly easier to understand by offering those names. That benefit will help you both with the reading and the writing of your code. The other major benefit comes long after this code has been put into version control. The history of this code allows you to tell which part of this was changed when. Instead of a diff showing that something in this block was changed at a, b, c, and d commits, you can see that the regex changed in commit a, the input cleaning changed in b and d and maybe the split call changed in c. This is especially helpful if you have IDE/editor functionality that helps you to see the git blame info for each line.&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>Pitching Ideas to Developers</title>
		<category term="productivity" />
		<category term="freelance" />
		<category term="programming" />
		<category term="planning" />
		<summary>Some things to consider</summary>
		<link href="https://coreydmccarty.dev/posts/2021_08_20_pitching_to_devs/"/>
		<updated>2021-08-20T00:00:00Z</updated>
		<id>https://coreydmccarty.dev/posts/2021_08_20_pitching_to_devs/</id>
		<content type="html">&lt;p&gt;There&#39;s a trope among developers of the people that have a &amp;quot;great idea&amp;quot; for an app or website, but no coding skills or knowledge. It&#39;s quite common for those people to come to a developer or community looking to find someone interested in putting in the work of creating the thing that they envision. Most of the time it comes as a startup pitch where they expect the developer to put in work with no promise of ever receiving payment.  This is basically asking someone to work for free on the gamble that there will one day be more income than the cost of infrastructure. Many developers tend towards a skeptical or cynical reaction towards this. There was even a whole plot point in the show Silicon Valley about it. One developer&#39;s &lt;a href=&quot;https://medium.com/the-mission/so-you-have-an-app-idea-eh-cbe73d15c997&quot;&gt;reaction can be read here&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I&#39;ll share with you some of the information that came out in one such conversation.&lt;/p&gt;
&lt;h2&gt;Think of this like a startup&lt;/h2&gt;
&lt;p&gt;If you were starting any other type of business than tech you would put together a specific plan before bringing in any other people. Consider &amp;quot;I have an idea for a business&amp;quot; and put effort into modeling out, describing, and planning how your business works and get lots of feedback.&lt;/p&gt;
&lt;p&gt;If you had a restaurant idea and went to a chef saying &amp;quot;I have an idea for a restaurant, but I can&#39;t cook and I&#39;m looking for someone to handle the kitchen part.&amp;quot; You had better have a strong business case for why a chef would want to invest their time in your idea.&lt;/p&gt;
&lt;h2&gt;Planning&lt;/h2&gt;
&lt;p&gt;There are lots of things that you can plan out without a developer or writing any code at all. You can write the business cases(s), draw out the screens in all sorts of user friendly tools (or on paper), get feedback from potential users about what features they would want, etc.&lt;/p&gt;
&lt;p&gt;When you come to the point of sitting down with a developer, then you would be handing over a bunch of specifications and they can just build it. The best way to do this would be to have some amount of money to invest to pay the developer to deliver a some bit of the product, This is exactly like you would do if you were prototyping a physical invention.&lt;/p&gt;
&lt;p&gt;More often than not, devs find that when/if they get involved with this type of thing they aren&#39;t just developers they&#39;re also expected to be designers, marketing, search engine optimization (SEO) experts, and product managers. Suddenly they are doing the work of a whole team (or more) with no promise of ever being paid.&lt;/p&gt;
&lt;h2&gt;Takeaway&lt;/h2&gt;
&lt;p&gt;You may very well have an amazing idea and find the perfect developer that both believes in the idea, and has endless free time to devote to it, but keep in mind that what you&#39;re asking is basically &amp;quot;I had this idea in the shower that I&#39;ve put no effort into and I&#39;d love for you to spend all of your spare time building this thing for me so that I might be able to make lots of money without doing anything.&amp;quot; If you&#39;ve put in lots of effort and have a well laid out plan for this company that you are starting, you are much more likely to find a developer that&#39;s interested.&lt;/p&gt;
&lt;p&gt;Special thanks to &lt;a href=&quot;https://georgespake.com/blog/&quot;&gt;George Spake&lt;/a&gt; for assisting with this content.&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>Hacktoberfest</title>
		<category term="hacktoberfest" />
		<category term="opensource" />
		<category term="beginners" />
		<category term="programming" />
		<summary>What is it and how to participate</summary>
		<link href="https://coreydmccarty.dev/posts/2021_10_06_hacktoberfest/"/>
		<updated>2021-10-06T00:00:00Z</updated>
		<id>https://coreydmccarty.dev/posts/2021_10_06_hacktoberfest/</id>
		<content type="html">&lt;h2&gt;What is Hacktoberfest?&lt;/h2&gt;
&lt;p&gt;Hacktoberfest is an effort by Digital Ocean to increase involvement in Open Source projects. &lt;a href=&quot;https://hacktoberfest.digitalocean.com/&quot;&gt;Sign up here.&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;What is Open Source?&lt;/h2&gt;
&lt;h3&gt;Definition&lt;/h3&gt;
&lt;p&gt;Open source is source code that is made freely available for possible modification and redistribution. Products include permission to use the source code, design documents, or content of the product. The open-source model is a decentralized software development model that encourages open collaboration. A main principle of open-source software development is peer production, with products such as source code, blueprints, and documentation freely available to the public. The open-source movement in software began as a response to the limitations of proprietary code.&lt;/p&gt;
&lt;p&gt;It&#39;s commonly pointed out about open source that it&#39;s &amp;quot;Free as in freedom, not as in beer&amp;quot;.&lt;/p&gt;
&lt;p&gt;Projects can be big or small, and developers free or paid. Any software project can be made open source by adopting an appropriate license and allowing public contribution.&lt;/p&gt;
&lt;h3&gt;Examples of  proprietary or closed source software&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Microsoft Windows&lt;/li&gt;
&lt;li&gt;iOS&lt;/li&gt;
&lt;li&gt;Oracle SQL Server&lt;/li&gt;
&lt;li&gt;Java programming language&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;examples of open source software&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Linux&lt;/li&gt;
&lt;li&gt;Wikipedia&lt;/li&gt;
&lt;li&gt;Firefox&lt;/li&gt;
&lt;li&gt;Chromium&lt;/li&gt;
&lt;li&gt;pip&lt;/li&gt;
&lt;li&gt;npm&lt;/li&gt;
&lt;li&gt;Go lang&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;FAQ&lt;/h2&gt;
&lt;h3&gt;Why is open source software important&lt;/h3&gt;
&lt;p&gt;Because open source software has freely available source code, if the maintainer ever stops providing updates (or closes the source after a certain point) then the community can take the source and continue development of it.&lt;/p&gt;
&lt;h3&gt;Why is contributing to open source is important, and what do I get out of doing this FREE work?&lt;/h3&gt;
&lt;p&gt;Learning is important, and it can be difficult to learn about long term software maintenance in a small single person project. Working on open source software allows you to step into long term support of software even before having a job in the field. You need to read through the docs and figure out what&#39;s going on before you can contribute. This is VERY much like what happens in the real world.&lt;/p&gt;
&lt;p&gt;Also, if you have issues with the software then you can go and make a fix yourself instead of waiting for the maintainer to schedule and write the change.&lt;/p&gt;
&lt;h3&gt;What is the most minimal thing I can do to contribute?&lt;/h3&gt;
&lt;p&gt;Contributions can be any submission to a code repository. It can be to the code itself, tests, build process, or even documentation. It can also be quite valuable to larger projects to even have someone that will ask clarifying questions in new issues.&lt;/p&gt;
&lt;h3&gt;How are my contributions tracked in a way I can get the swag?&lt;/h3&gt;
&lt;p&gt;You Register with Digital Ocean at the Hacktoberfest website.&lt;/p&gt;
&lt;h3&gt;Where can I contribute at (I don&#39;t understand GitHub)?&lt;/h3&gt;
&lt;p&gt;If you go to the resources section on their webpage there are resources for contibuting no matter your level. There are ways to search for repositories in Github and GitLab. Dev.to has a topic and there is discussion on Twitter. This is one of the few events that manages to permeate throughout dev culture.&lt;/p&gt;
&lt;h3&gt;I don&#39;t know how to download the codebase so I can contribute?&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://www.freecodecamp.org/news/the-beginners-guide-to-git-github/&quot;&gt;Free Code Camp - Git Guide&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;How do I find the issues to be fixed?&lt;/h3&gt;
&lt;p&gt;Issues are listed on Github for a given repository. You can also use &lt;a href=&quot;http://issuehub.pro/&quot;&gt;issuehub.pro&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Who do I talk to in a codebase to make sure I&#39;m doing it correctly?&lt;/h3&gt;
&lt;p&gt;This will vary pretty widely depending on the project. There will usually be some type of information on the project&#39;s README.md and often a CONTRIBUTING.md&lt;/p&gt;
&lt;h1&gt;Summary&lt;/h1&gt;
&lt;h2&gt;How do I contribute?&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Register&lt;/li&gt;
&lt;li&gt;Make 4 PR&#39;s&lt;/li&gt;
&lt;li&gt;Get shirt (or have a tree planted in your name)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;If you&#39;d like to find more open source software to use checkout &lt;a href=&quot;https://sourceforge.net/directory/os%3Awindows/&quot;&gt;SourceForge&lt;/a&gt;&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>Perfection vs Completion</title>
		<category term="development" />
		<category term="programming" />
		<category term="craftsmanship" />
		<category term="journey" />
		<summary>Is it better to be right or done?</summary>
		<link href="https://coreydmccarty.dev/posts/2022_03_10_perfection_vs_completion/"/>
		<updated>2022-03-10T00:00:00Z</updated>
		<id>https://coreydmccarty.dev/posts/2022_03_10_perfection_vs_completion/</id>
		<content type="html">&lt;p&gt;It&#39;s extremely common in tech that we find ourselves debating the best way to do something. You can find arguments about anything from text editor selection to number of lines in a function. All of these arguments come from a good place. We want to learn what is best in order to build the best thing that we can. But, what if I told you that a vast majority of these debates have no right or wrong answers?&lt;/p&gt;
&lt;p&gt;When it comes to tools for writing code there is certainly no shortage. Some people use bare-bones Vim or have it decked out with 100 plugins. There are similar groups of people using VSCode, Atom, Sublime Text, Emacs, JetBrains products, Eclipse, Visual Studio or anything else. Not a single one of these tools is going to do you any good if you don&#39;t know how to use it. The biggest part of tool selection is using something that you are familiar with and taking the time to learn how to use it well. Nearly every code editor out there can be configured to function in very similar ways. The thing that determines how much it helps you is whether you know how to use it.&lt;/p&gt;
&lt;p&gt;Due to this, there is value in making a decision and sticking with it. At some point you may decide that what you&#39;ve decided isn&#39;t working and choose something else. That&#39;s okay. Too often I see people that are early in their development career stressing over what the best programming language or text editor is, and I&#39;m here to tell you that none is the best at everything. These are just tools. You can turn screws with a manual screwdriver, power screwdriver, drill, or impact driver, and there is a certain amount of overlap in functionality, but purchasing an impact driver for changing the batteries in your kids toys is entirely unnecessary, and may actually present more difficulty than using a small manual screwdriver. The most important questions that you can ask when choosing a tool are centered around &amp;quot;does it do what I need?&amp;quot; and &amp;quot;at what cost?&amp;quot;. Is it best to build front-end and back-end separately? Many times the answer is yes, but if the project is small enough then doing so may actually bring about more difficulty than there is benefit in doing so.&lt;/p&gt;
&lt;p&gt;Currently, I&#39;m working on modernizing an old website that uses Java Server Pages. The replacement has separated front-end and back-end systems. The front-end is sharp. It&#39;s built with NodeJS, Nuxt, Vue, Vuex, Tailwind, Eslint, and Stylelint. The back-end is built with Java, Spring Boot, Lombok, Hibernate, and several Saas systems that make our life easier. Any one of the tools in our front-end and back-end systems could eat away a week of your time if you wanted to explore all the configuration options. If they don&#39;t get in your way, there it&#39;s usually more helpful to just use the default configuration. Once that configuration is found to not fit some part of your needs, only then should you add whatever configuration is necessary to overcome that limitation. Let the tools enable you to do work. If you spend too much time considering what is possible then you won&#39;t get around to the task at hand. When it comes to code style and linting, I&#39;ve seen people argue both ways on most of the things that can be checked or configured, but in the end you will actually get used to whatever code style is being used. Having all the code match in style allows your brain to look past unnecessary things and read the important bits. At the end of the day, it&#39;s how much you are able to build that matters, not what hammer you used.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;In his writings, a wise Italian says that the best is the enemy of the good
~Voltaire&lt;/p&gt;
&lt;/blockquote&gt;
</content>
	</entry>
</feed>
