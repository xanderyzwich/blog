<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
	<title>Adventures in Coding</title>
	<subtitle>Daydreaming of better ways.</subtitle>
	<link href="https://coreydmccarty.dev/feed/feed.xml" rel="self"/>
	<link href="https://coreydmccarty.dev/"/>
	<updated>2020-03-18T00:00:00-00:00</updated>
	<id>https://coreydmccarty.dev/</id>
	<author>
		<name>Corey McCarty</name>
		<email>Corey@McCarty.dev</email>
	</author>
	
	<entry>
		<title>Getting Started with Stack Overflow</title>
		<category>stack overflow"</category>
		<category>motivation"</category>
		<category>career"</category>
		<category>beginners"</category>
		<summary>I finally decided to join the community</summary>
		<link href="https://coreydmccarty.dev/posts/2019_05_31_using_stackoverflow/"/>
		<updated>2019-05-31T00:00:00-00:00</updated>
		<id>https://coreydmccarty.dev/posts/2019_05_31_using_stackoverflow/</id>
		<content type="html">&lt;p&gt;Yesterday morning I woke up to find a comment had been made on an old answer that I&#39;d posted to Stack Overflow, and I opened up the site. Quickly I remembered why I don&#39;t enjoy using it. I had a reputation score of 46 and was unable to comment on anything other than my own answers. Without having much work that was pressing I decided to change that.&lt;/p&gt;
&lt;p&gt;The first thing that I did was to read through posts and vote up any question or answer that I found interesting. Quickly I had finished the forty vote max for the day, and earned three badges (Citizen Patrol, Suffrage, and Vox Populi).&lt;/p&gt;
&lt;p&gt;The next badge that came up for tracking was to edit a question that had been dormant for 6 months (Excavator). I set into the depths of #python posts. I quickly found many posts with irrelevant tags, missing tags, or poor wording, and I submitted some few dozen edits. Along the way I actually found a couple of questions that I could answer. After the first two edits were accepted I had gotten myself over the comment barrier of fifty reputation, and that was the goal.&lt;/p&gt;
&lt;p&gt;At this point something happened, and I started to enjoy the ability to comment in order to evoke more information on questions. Before I knew it, I had an answer accepted and jumped above seventy reputation.&lt;/p&gt;
&lt;p&gt;This morning I opened up Stack Overflow and was greeted with having 105 reputation and 13 badges. After years of frustration with one of our most beneficial tools as a developer, I was able to break through in the span of one afternoon. I know that many of us have frustrations with that site and how difficult it can be when you are trying to ask questions (to this day I have not posted any question). But there are many ways that you can contribute to Stack Overflow that help to raise your reputation AND help get people answers to their questions.&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>Customizing 11ty Blog</title>
		<category>11ty"</category>
		<category>tutorial"</category>
		<category>travisci"</category>
		<category>beginners"</category>
		<summary>Cleaning up after forking</summary>
		<link href="https://coreydmccarty.dev/posts/2019_08_13_starting_11ty/"/>
		<updated>2019-08-13T00:00:00-00:00</updated>
		<id>https://coreydmccarty.dev/posts/2019_08_13_starting_11ty/</id>
		<content type="html">&lt;p&gt;I started down this road after a simple engagement on Twitter with &lt;a href=&quot;https://dev.to/brob&quot;&gt;Brob&lt;/a&gt; and he suggested that I start blogging on dev.to and even went so far as to say that I should think about posting to my own site and syndicating over dev.to.  At that point I had a custom domain without any clue what to do with it.&lt;/p&gt;
&lt;h2&gt;But How&lt;/h2&gt;
&lt;p&gt;Luckily Brob went on to direct me &lt;a href=&quot;https://t.co/ervT8kEx1k?amp=1&quot;&gt;here&lt;/a&gt; for a straight forward tool that can publish a personal blog using GitHub Pages and TravisCI.  The instructions are really easy and after having setup my custom domain through GitHub Pages already, I had this &#39;up and running&#39; within an hour.  This is where is really stalled for a while. At this point I had my build process up and running and could view the sample blog from my custom url.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://coreydmccarty.dev/img/Generic11ty.jpg&quot; alt=&quot;Default Blog&quot;&gt;&lt;/p&gt;
&lt;h2&gt;Get Started&lt;/h2&gt;
&lt;p&gt;Letting this thing go stagnant for too long made it feel progressively harder to get done.  The page gives clear instruction on first steps.&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;Edit the _data/metadata.json with your blogâ€™s information.&lt;/li&gt;
&lt;li&gt;(Optional) Edit .eleventy.js with your configuration preferences.&lt;/li&gt;
&lt;li&gt;Delete this message from _includes/layouts/base.njk.&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;h2&gt;Edit _data/metadata.json&lt;/h2&gt;
&lt;pre class=&quot;language-json&quot;&gt;&lt;code class=&quot;language-json&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token property&quot;&gt;&quot;title&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Your Blog Name&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token property&quot;&gt;&quot;url&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;https://myurl.com/&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token property&quot;&gt;&quot;description&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;I am writing about my experiences as a naval navel-gazer.&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token property&quot;&gt;&quot;feed&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token property&quot;&gt;&quot;subtitle&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;I am writing about my experiences as a naval navel-gazer.&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token property&quot;&gt;&quot;filename&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;feed.xml&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token property&quot;&gt;&quot;path&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;/feed/feed.xml&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token property&quot;&gt;&quot;url&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;https://myurl.com/feed/feed.xml&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token property&quot;&gt;&quot;id&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;https://myurl.com/&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token property&quot;&gt;&quot;author&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token property&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Your Name Here&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token property&quot;&gt;&quot;email&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;youremailaddress@example.com&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This stuff is really easy.  I&#39;m starting to feel ashamed of having waited so long to work on this. All of the data here can be put together inside of 5 minutes.&lt;/p&gt;
&lt;h2&gt;Delete this message from _includes/layouts/base.njk&lt;/h2&gt;
&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;main&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;tmpl-post&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;      &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;warning&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;        &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;ol&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;          &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;li&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;Edit the &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;code&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;_data/metadata.json&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;code&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt; with your blogâ€™s information.&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;li&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;          &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;li&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;(Optional) Edit &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;code&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;.eleventy.js&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;code&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt; with your configuration preferences.&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;li&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;          &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;li&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;Delete this message from &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;code&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;_includes/layouts/base.njk&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;code&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;.&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;li&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;        &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;ol&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;        &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;p&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;em&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;This is an &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;a&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;href&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;https://www.11ty.io/&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;Eleventy project&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;a&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt; created from the &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;a&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;href&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;https://github.com/11ty/eleventy-base-blog&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;code&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;eleventy-base-blog&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;code&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt; repo&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;a&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;.&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;em&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;p&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;      &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;      &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;main&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Hack off that one div.  Again I&#39;m not sure what I was expecting to be difficult in this setup.&lt;/p&gt;
&lt;h2&gt;About&lt;/h2&gt;
&lt;p&gt;In order to customize the &amp;quot;About&amp;quot; page that is linked in the top nav pane you will need to edit about/index.md. While the markdown spec is prolifically generic, if you have any experience with using markdown on Reddit, Discord, or GitHub then it is pretty easy to use. Personally I am writing this through IntelliJ Community Edition with Markdown Support plugin and I&#39;m able to see the output in realtime. Put in some basic information that you would like to be displayed on your page.&lt;/p&gt;
&lt;h2&gt;Start Blogging&lt;/h2&gt;
&lt;p&gt;After getting these things all completed you can start writing your first blog entry.  I&#39;m writing this entry as I complete the work that I&#39;m describing.  While working I have Eleventy running as &lt;code&gt;npx eleventy --server --watch&lt;/code&gt; so that the build picks up whatever changes I make and automatically serves them for viewing in the browser (I&#39;d hate to be publishing this without first testing that it works).&lt;/p&gt;
&lt;p&gt;While writing this post I was able to get an image included using the included html templating language with &lt;code&gt;&amp;lt;center&amp;gt;&amp;lt;img src=&amp;quot;/img/Generic11ty.bmp&amp;quot;/&amp;gt;&amp;lt;/center&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Creating tags for your posts is as easy as adding them in the heading of the markdown file after the default of &#39;post&#39;.&lt;/p&gt;
&lt;pre class=&quot;language-yaml&quot;&gt;&lt;code class=&quot;language-yaml&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token key atrule&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; Customizing 11ty Blog  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token key atrule&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; Cleaning up after forking  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token key atrule&quot;&gt;date&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token datetime number&quot;&gt;2019-08-13&lt;/span&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token key atrule&quot;&gt;tags&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; post&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; 11ty  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; travisci  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; meta  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token key atrule&quot;&gt;layout&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; layouts/post.njk  &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Still a work in progress&lt;/h2&gt;
&lt;p&gt;At this point I have gotten the blog up and running with my custom information so that it feels more like mine and less like some code that I forked and forgot about.  While I&#39;m not exactly a frontend developer, I plan on sharing my future work on some custom css as well as my online resume generator.&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>Discovering My Impostor Syndrome</title>
		<category>impostorsyndrome"</category>
		<category>mentalhealth"</category>
		<category>career"</category>
		<category>beginners"</category>
		<summary>Coming to better understanding of my skill level</summary>
		<link href="https://coreydmccarty.dev/posts/2019_09_13_discovering_my_imposter_syndrome/"/>
		<updated>2019-09-13T00:00:00-00:00</updated>
		<id>https://coreydmccarty.dev/posts/2019_09_13_discovering_my_imposter_syndrome/</id>
		<content type="html">&lt;p&gt;I&#39;ve now been working as a developer for five years, but along the way I never felt like my skill level had improved. During that time I had spent four solid years working on the same application with a number of very talented developers who knew a great deal more than I. It was great as I was able to learn so many different things about our application and all of the technology and systems directly around us.&lt;/p&gt;
&lt;h2&gt;A Bit About Our Application&lt;/h2&gt;
&lt;p&gt;We owned and maintained a data storage solution that served CRUD operations as a Java web service over SOAP requests. We deployed into a Tomcat instance that we also owned and managed using a &#39;pipeline&#39; that consisted of a build server where we checked out code from SVN repository, compiled, and then pushed out into our application servers (RedHat VM&#39;s that were ours alone); all of which was being done with our custom written bash scripts which were highly interdependent. Our data storage was a mix of Oracle SQL Server and Datastax/Cassandra NoSQL clusters. We utilize Java Messaging Services (JMS) to publish messages out to people interested in updates to the data, and Java Management Extensions (JMX) to trigger various processes in our application from outside the already running Java.&lt;/p&gt;
&lt;h2&gt;Back to the Meta&lt;/h2&gt;
&lt;p&gt;So, along the many years of supporting and managing this application I became deeply intimate with it&#39;s inner workings (some of my peers would refer to ME as the Subject Matter Expert).  During the majority of this time my primary duties did NOT include writing changes to the Java code itself.  The program is &#39;wired&#39; via some controlling tables in the database that tell it where data is and how to handle it. Due the the nature of this application, there were design choices made that meant that it was not a good fit for pulling out large data set, but should be queried as specifically as possible. As such, clients had to be advised as to how they might fit their logic flow into our data access methodologies.  There was a great deal of working with these client teams to model their data and the ways that they would access it so that neither their application nor ours was negatively affected.  &lt;strong&gt;I became a specialist in this application.&lt;/strong&gt;  That implied a great deal of knowledge in how our environment functioned.  I thought that this was just how everyone worked.&lt;/p&gt;
&lt;h2&gt;Time for a New Team&lt;/h2&gt;
&lt;p&gt;After the four years that I spent with that team, I was granted a transfer into another team for an adjacent application.  In the early months with this team I have had the privilege to go into a cloud training and redesigning one of the applications to adopt a new tool set and environment.  We are moving from WebLogic deployed XML configured Java (still SOAP) web service into Springboot with a Pivotal Cloud Foundry deployment.  Most of our developers were VERY excited about attending these sessions for eight weeks.&lt;/p&gt;
&lt;p&gt;As we work through moving files over from the old project into the new, there is a lot of finding and string replacing, and the like.  After having become pretty fluent in SED, GREP, FIND, and use of IntelliJ, these tasks were pretty simple and I would rattle off Bash commands to make it happen.  This is when I started getting the comments about being a &#39;bash wizard&#39; or &#39;command line guru&#39; as apparently nobody else on the team is as comfortable with these things.  When it comes time to find occurrences of things and usages throughout the entirety of our project Eclipse proved to be a poor tool for the job as it was very slow and cumbersome to deal with.  IntelliJ on the other hand offers quick tools for these things.  Again, I hear sighs and comments about &#39;we know, IntelliJ is better&#39; as everyone around me continues using Eclipse and Spring Tool Suite.  Many of the developers on this team have been coding for more than a decade, and are respecting of my seemingly well formed opinion on things.  ** &lt;strong&gt;MIND BLOWN&lt;/strong&gt; **&lt;/p&gt;
&lt;h2&gt;Am I a Senior?&lt;/h2&gt;
&lt;p&gt;Now I&#39;m forced to evaluate whether my previous thoughts of being a junior to --maybe-- mid level developer could be largely mistaken.  After having gotten a deep knowledge around some subjects (even beyond the engineering classes in college) I somehow managed to &lt;strong&gt;completely&lt;/strong&gt; overlook the value of my skill set.  I have done all that I know how in terms of assisting anyone that I know with high level troubleshooting of issues that they may be facing in whatever development work that they might have as well as working with some online communities to help people learn programming and overcome issues that they may be facing.  Looking back, I do realize that most of the times I can help them at least find the direction to look in for finding the cause of their problem.&lt;/p&gt;
&lt;h2&gt;Impostor Syndrome&lt;/h2&gt;
&lt;p&gt;It dawns on me only after this realization that the standard explanation of &amp;quot;believing that someone will discover you as a phony&amp;quot; might not encompass all of what entails impostor syndrome.  My belief wasn&#39;t that I&#39;d be found as a phony, but instead that the position that I held was of little importance and skill; especially as most of my work didn&#39;t involve writing &#39;code&#39;.  I&#39;m just now coming to realize that having been so far junior to the peers in my old team led me to a &lt;em&gt;very&lt;/em&gt; skewed view of what is junior.  I had been given tasks thought to be below the rest of my team and just believed that these were super easy, and not that my skills were sufficient that I was getting bigger work than a fresh graduate would be given.  Complex data manipulation with hand written scripts and giant Bash one-liners isn&#39;t something that someone exactly understands right out of school, but it would be something that I did as a &#39;menial&#39; task.&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;With so much material already out there on impostor syndrome, I still never understood it to be quite what I&#39;ve experienced.  These random thoughts might be a bit off on the definition of what most people would consider the syndrome to be, but overall I feel like the intention comes down very much to the same thing.  I really hope that this helps somebody else along their journey.&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>Dependency Hell</title>
		<category>java"</category>
		<category>gradle"</category>
		<category>technicaldebt"</category>
		<category>codequality"</category>
		<summary>Best practices must evolve</summary>
		<link href="https://coreydmccarty.dev/posts/2019_09_20_dependency_hell/"/>
		<updated>2019-09-20T00:00:00-00:00</updated>
		<id>https://coreydmccarty.dev/posts/2019_09_20_dependency_hell/</id>
		<content type="html">&lt;h2&gt;Traditional Best Practices&lt;/h2&gt;
&lt;p&gt;It is typically accepted that any code that is needed in more than one place should be abstracted away somewhere.  Classes with repeated logic get methods, packages with repeated logic get classes, projects with repeated logic get dependency projects.  It makes sense.  You don&#39;t want to update the code in many places, just do it once and let it trickle through the code base, and when you moved jar files manually from output of one project into another for usage then you could be pretty confident that things would remain stable.&lt;/p&gt;
&lt;h2&gt;To the Cloud!&lt;/h2&gt;
&lt;p&gt;Once you move a legacy java web service into the modern era then a few things happen. SOAP becomes REST (I wish), XML becomes annotations and Java configuration classes, and you move from a traditional servlet container (Tomcat, WebLogic, etc) into Springboot jars (typically with Tomcat baked in). Something that should also happen between Y2K and cloud native application deployment would be a modern build tool with an artifact repository.  We&#39;re moving from Ant to Gradle, and utilizing a Nexus artifact repository for our dependencies.&lt;/p&gt;
&lt;p&gt;This is all great, and I&#39;m thoroughly enjoying the learning that I&#39;m getting in this position. But, our application has a spiderweb of 6 &#39;common&#39; dependency jars that we own.  The application that we are currently upgrading uses 4 of them.  There is one for each of two databases (logical) and then there is a SUPER DEPENDENCY that all of the others inherit EVERYTHING from.  To make things even more difficult, the application that we are working on depends directly on the SUPER jar as well as three jars that then depend on the SUPER jar.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;ENTER HEARTACHE&lt;/strong&gt;&lt;br&gt;
Gradle is a wonderful tool. After our having gotten it working, I realized that local environment setup means being on the right git branch and having some environment variables setup for running the application so that we don&#39;t accidentally commit passwords while working around things that are done by our CI/CD.  Along the way however, there were many pain points.  Logging dependencies are apparently buried in every single thing that we use, and apparently SLF4J was being pulled down by the dozens.&lt;/p&gt;
&lt;p&gt;We are told that the original architect and developer of our application was an absolute genius.  We are not.  This thing implemented it&#39;s own hibernate, property handler, application context, and many other things that are gotten for free with modern build tools, frameworks, and dependency injection; and many of these features are implemented deep within our dependency jars.  Particularly the application context and property handler were implemented all the way down in the SUPER jar.  They required access to a particular property file on the filesystem where the application resides.  I can see where that would have made the management of some dozen applications more uniform and easily understood.  When you deploy into a Cloud Foundry environment then the file system isn&#39;t exactly something that is at your disposal.  We have overcome this by adopting a configuration server to serve property files from git through a web server that makes them immediately available to any server making request for it.  SUPER jar doesn&#39;t like that.  FILE NOT FOUND meets NULL POINTER and everything breaks. Refactoring the four dependencies has been deemed outside the scope of our seven week engagement with the cloud foundry team that is helping us.&lt;/p&gt;
&lt;h2&gt;Solutions&lt;/h2&gt;
&lt;p&gt;We eventually managed some quick fixes to make things work, and were given the confidence by our business team that we will be working on a complete ground up redesign of our applications in the future where we would have the opportunity to make corrections to the things that caused us so many problems.&lt;/p&gt;
&lt;p&gt;Java configuration classes replaced each of our XML files that were used previously, and we were able to force feed the home baked application context with properties from the configuration server, and overcome some issues.&lt;/p&gt;
&lt;p&gt;Later we found an issue with our Junit design that meant that initialization was attempting to read that same property file, and we were able to overcome this by a quick fix to the SUPER jar to make direct use of &lt;code&gt;&amp;quot;${foo}&amp;quot;&lt;/code&gt; notation and commenting away the file read.&lt;/p&gt;
&lt;p&gt;The gradle build file required a &lt;strong&gt;TON&lt;/strong&gt; of excluding to prevent duplication of dependencies (which may or may not have been based in different groups).  We have decided that these common jars should not be so interdependent because we currently require touching of six projects in order to make one work.&lt;/p&gt;
&lt;p&gt;If you have any stories, recommendations, or solutions that you&#39;ve come across for such thing then I ask that you please comment.&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>Using Markdown for Notes</title>
		<category>productivity"</category>
		<category>markdown"</category>
		<category>vscode"</category>
		<category>css"</category>
		<summary>Increasing Productivity with Markup Language</summary>
		<link href="https://coreydmccarty.dev/posts/2020_01_02_markdown_for_notes/"/>
		<updated>2020-01-13T00:00:00-00:00</updated>
		<id>https://coreydmccarty.dev/posts/2020_01_02_markdown_for_notes/</id>
		<content type="html">&lt;p&gt;I recently found myself with four different files opened long term in Notepad++ that all centered around one set of changes that I was working on, and that seemed a bit absurd.  I was keeping one file open for schema definitions, another for java snippets, another for meeting notes, and another for the actual requirement description. I decided that I should be able to consolidate these notes in a meaningful way, and spent several hours walking through formatting these things together as YAML and then XML before settling on Markdown.&lt;/p&gt;
&lt;p&gt;If you aren&#39;t familiar with Markdown, &lt;a href=&quot;https://en.wikipedia.org/wiki/Markdown&quot;&gt;Wikipedia&lt;/a&gt; says this:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Markdown is a lightweight markup language with plain text formatting syntax. Its design allows it to be converted to many output formats, but the original tool by the same name only supports HTML.[9] Markdown is often used to format readme files, for writing messages in online discussion forums, and to create rich text using a plain text editor.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;You are likely familiar with Markdown already as it is used on Github (README.md), Reddit comments, Discord, Slack and others. It has functionality to include code blocks with language specific highlighting, links, bullet lists, numbered lists, six levels of headers, not to mention &lt;strong&gt;different&lt;/strong&gt; &lt;em&gt;text&lt;/em&gt; &lt;s&gt;decorations&lt;/s&gt;.&lt;/p&gt;
&lt;h1&gt;Example&lt;/h1&gt;
&lt;p&gt;This code&lt;/p&gt;
&lt;pre class=&quot;language-markdown&quot;&gt;&lt;code class=&quot;language-markdown&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token title important&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;#&lt;/span&gt; Heading 1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;information&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token list punctuation&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token bold&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;token content&quot;&gt;bold&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;**&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token list punctuation&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token italic&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;token content&quot;&gt;italic&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;*&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token list punctuation&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token bold&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;token content&quot;&gt;&lt;span class=&quot;token italic&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;token content&quot;&gt;bold/italic&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;*&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;**&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token list punctuation&quot;&gt;+&lt;/span&gt; nested&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token title important&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;##&lt;/span&gt; Heading 2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;stuff and things&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token list punctuation&quot;&gt;1.&lt;/span&gt; [ ] Unchecked box&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token list punctuation&quot;&gt;2.&lt;/span&gt; [x] Checked box&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Looks like this:&lt;/p&gt;
&lt;h1&gt;Heading 1&lt;/h1&gt;
&lt;p&gt;information&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;bold&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;italic&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;strong&gt;bold/italic&lt;/strong&gt;&lt;/em&gt;
&lt;ul&gt;
&lt;li&gt;nested&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Heading 2&lt;/h2&gt;
&lt;p&gt;stuff and things&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;[ ] Unchecked box&lt;/li&gt;
&lt;li&gt;[x] Checked box&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;p&gt;My primary goal when I set out on this journey was to have support to fold sections that I&#39;m not currently looking at, but what I got with Markdown is so much more. I usually keep notes open in Notepad++, but for some reason I decided to use VSCode. I&#39;m pretty glad that I did, in hindsight because what I currently have configured works significantly better than anything I&#39;ve ever gotten in Notepad++.&lt;/p&gt;
&lt;p&gt;Through the last week I&#39;ve wound up with a few customizations that make life a bit better for me. I got a few plugins and wrote some custom CSS, and now I&#39;m really happy with the whole thing.&lt;/p&gt;
&lt;h2&gt;Markdown All in One plugin&lt;/h2&gt;
&lt;p&gt;Helps alot, with live preview, formatting lists, toggling styles, generating linked table of contents, print to html, format tables, and pretty math symbols.
&lt;a href=&quot;https://github.com/yzhang-gh/vscode-markdown&quot;&gt;The repository can be found here&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Custom CSS&lt;/h2&gt;
&lt;p&gt;This relates directly to the live preview which by default does not differentiate the headers from the primary text (although it does color the code blocks).  markdown.styles setting allows you to define a css file to apply to the preview.  I then used the markdown.extension.print.onFileSave setting to figure out how to select the bits that I wanted to cutomize. The parts that I thought to be important were having different colors for the different header levels, code block backgrounds that are visibly distinct from the other text,&lt;/p&gt;
&lt;h2&gt;Insert Date String&lt;/h2&gt;
&lt;p&gt;To quickly insert date or dateTime into my notes this plugin is helpful.  I added a keybind to &lt;code&gt;Ctrl+Shift+i+d&lt;/code&gt; to insert date without time. The formatting is configurable to your needs. &lt;a href=&quot;https://github.com/jsynowiec/vscode-insertdatestring&quot;&gt;The repository can be found here&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Snippets&lt;/h2&gt;
&lt;p&gt;For my personal usage I also wanted to include information for frontmatter/header.  This one is specifically for my 11ty blog entries which is also written in markdown.&lt;/p&gt;
&lt;pre class=&quot;language-json&quot;&gt;&lt;code class=&quot;language-json&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;	&lt;span class=&quot;token property&quot;&gt;&quot;frontmatter&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;		&lt;span class=&quot;token property&quot;&gt;&quot;scope&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;markdown&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;		&lt;span class=&quot;token property&quot;&gt;&quot;prefix&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;frontmatter&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;		&lt;span class=&quot;token property&quot;&gt;&quot;body&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;			&lt;span class=&quot;token string&quot;&gt;&quot;---  &quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;			&lt;span class=&quot;token string&quot;&gt;&quot;title: ${1:title}  &quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;			&lt;span class=&quot;token string&quot;&gt;&quot;description: ${2:description}  &quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;			&lt;span class=&quot;token string&quot;&gt;&quot;date: ${3:Ctrl+Shift+i+d}  &quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;			&lt;span class=&quot;token string&quot;&gt;&quot;tags:  &quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;			&lt;span class=&quot;token string&quot;&gt;&quot;	- ${4:first}  &quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;			&lt;span class=&quot;token string&quot;&gt;&quot;	- ${5:second}  &quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;			&lt;span class=&quot;token string&quot;&gt;&quot;layout: layouts/post.njk  &quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;			&lt;span class=&quot;token string&quot;&gt;&quot;---  &quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;			&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;			&lt;span class=&quot;token property&quot;&gt;&quot;description&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;front-matter for 11ty blog post&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;	&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;which get&#39;s pasted in like this, and i can tab through the variables easily.&lt;/p&gt;
&lt;pre class=&quot;language-yaml&quot;&gt;&lt;code class=&quot;language-yaml&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;---&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token key atrule&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; title&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token key atrule&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; description&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token key atrule&quot;&gt;date&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; Ctrl+Shift+i+d&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token key atrule&quot;&gt;tags&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; first&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; second&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token key atrule&quot;&gt;layout&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; layouts/post.njk&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;---&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I&#39;d also love to hear thoughts and experiences that you may have with markdown or other languages for taking your notes.  Editor/plugin recommendations, tips, and tricks are all welcome as well.&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>Markdown Style</title>
		<category>markdown"</category>
		<category>css"</category>
		<category>vscode"</category>
		<summary>This is what I use for markdown in VSCode</summary>
		<link href="https://coreydmccarty.dev/posts/2020_01_02_markdown_css/"/>
		<updated>2020-01-14T00:00:00-00:00</updated>
		<id>https://coreydmccarty.dev/posts/2020_01_02_markdown_css/</id>
		<content type="html">&lt;p&gt;While writing about &lt;a href=&quot;https://coreydmccarty.dev/posts/2020_01_02_markdown_for_notes&quot;&gt;using Markdown to boost productivity in note taking&lt;/a&gt; I thought that maybe some people might be interested. in this configuration.&lt;/p&gt;
&lt;pre class=&quot;language-css&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token selector&quot;&gt;:root&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token comment&quot;&gt;/* from https://www.behance.net/gallery/8482091/Flat-Bold-UI-Kit */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token property&quot;&gt;--black&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; #333333&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token property&quot;&gt;--light-gray&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; #B3B8BC&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token property&quot;&gt;--dark-gray&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; #656565&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token property&quot;&gt;--blue&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; #46BDDF&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token property&quot;&gt;--green&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; #52D273&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token property&quot;&gt;--red&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; #E95065&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token property&quot;&gt;--orange&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; #E57255&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token property&quot;&gt;--yellow&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; #E5C453&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token property&quot;&gt;--background&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; #484848&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token comment&quot;&gt;/* Other Sources */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token property&quot;&gt;--other-background&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; #252525&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token property&quot;&gt;--white&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; #FFF&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token property&quot;&gt;background-color&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;var&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;--other-background&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token selector&quot;&gt;h1, h2, h3, h4, h5, h6&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token property&quot;&gt;font-weight&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; bolder&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token selector&quot;&gt;h1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token property&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;var&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;--blue&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token selector&quot;&gt;h2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token property&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;var&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;--green&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token selector&quot;&gt;h3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token property&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;var&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;--yellow&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token selector&quot;&gt;h4&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token property&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;var&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;--orange&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token selector&quot;&gt;h5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token property&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;var&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;--red&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token selector&quot;&gt;h6&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token property&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;var&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;--white&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token selector&quot;&gt;a:link&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token property&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; skyblue&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token property&quot;&gt;font-weight&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; bolder&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token selector&quot;&gt;a:visited&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token property&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; lightskyblue&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token property&quot;&gt;font-weight&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; bolder&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token selector&quot;&gt;p, ul, ol, li&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token property&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;var&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;--light-gray&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token selector&quot;&gt;pre&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token property&quot;&gt;background-color&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; #000 &lt;span class=&quot;token important&quot;&gt;!important&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token selector&quot;&gt;strong&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token property&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;var&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;--white&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
</content>
	</entry>
	
	<entry>
		<title>Blogging Goals</title>
		<category>discuss"</category>
		<category>watercooler"</category>
		<category>blog"</category>
		<category>writing"</category>
		<summary>Direction for blogging success</summary>
		<link href="https://coreydmccarty.dev/posts/2020_01_06_why_blog/"/>
		<updated>2020-01-17T00:00:00-00:00</updated>
		<id>https://coreydmccarty.dev/posts/2020_01_06_why_blog/</id>
		<content type="html">&lt;h1&gt;Blogging Guidelines&lt;/h1&gt;
&lt;p&gt;I was reading &lt;a href=&quot;https://dev.to/chillhumanoid/how-to-make-dev-better-in-2020-9oj&quot;&gt;How To Make Dev Better In 2020&lt;/a&gt; and thought that it would be really valuable to consider some guidelines for our blogging.&lt;/p&gt;
&lt;p&gt;Excerpt:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;In some ways we have a reverse stack overflow here. No one&#39;s asking, everyone&#39;s offering.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;While this article talks against blog promotion and writer&#39;s block as topics, I believe that discussion of post content is a fundamental of our community here.&lt;/p&gt;
&lt;h1&gt;Who?&lt;/h1&gt;
&lt;p&gt;One of the greatest things about blogging is that there isn&#39;t a threshold of entry so everyone can write a blog.&lt;/p&gt;
&lt;p&gt;One of the worst things about blogging is that there isn&#39;t a threshold of entry so everyone can write a blog.&lt;/p&gt;
&lt;p&gt;When everyone has the power to blog then you wind up with a lot of noise. This means that we should consider value additions for a functional community both as blog writers and commentary in the threads, but everyone can contribute something in the community, and more importantly you will understand things more deeply when you are forced to put it into words for someone else&#39;s understandin.&lt;/p&gt;
&lt;h1&gt;What?&lt;/h1&gt;
&lt;p&gt;For the most part none of us is an authority on anything except our personal experiences and opinions. As such we should be careful about presenting things that assert themselves as law such as &amp;quot;don&#39;t ever do X&amp;quot; or &amp;quot;Y reasons why Q is a terrible thing.&amp;quot; Value in any community from discussion and openness to grow and learn together.&lt;/p&gt;
&lt;h1&gt;When?&lt;/h1&gt;
&lt;p&gt;I&#39;d say that motivation is a major factor in this. If your motivation is increase of readership then you had better keep a regular cadence. If your intention is sharing your experience with a particular issue then you write as things come up. I keep reading (and trying to enact in myself) recommendations of daily writing. The practice improves your writing as you edit previous writing before posting, and over time the editing required will reduce greatly.&lt;/p&gt;
&lt;h1&gt;Where?&lt;/h1&gt;
&lt;p&gt;There are many posts around dev.to focused on running your own blog, places for cross-posting (always remember to use canonical links), and the benefits of different communities. I personally appreciate the value in having your own hosting of all posts and I utilize 11ty&#39;s base blog forked on GitHub and served with GitHub Pages and my own custom domain (a fancy *.dev domain). Dev.to will &lt;a href=&quot;https://dev.to/p/publishing_from_rss_guide&quot;&gt;pick up the RSS and create posts for you automatically&lt;/a&gt;, and I really enjoy that both 11ty and dev.to posts can be written in markdown (my new favorite language).&lt;/p&gt;
&lt;h1&gt;Why?&lt;/h1&gt;
&lt;p&gt;This is, I think, the most important question in writing anything. What is its purpose? Who is it for? This will be different for each post, but if you don&#39;t consider it then you risk boring your audience. If the audience is beginners then you should make sure that you explain yourself thoroughly as to not confuse, but if the audience is more advanced then that level of detail will keep someone from reaching the end.&lt;/p&gt;
&lt;h2&gt;Start Discussion&lt;/h2&gt;
&lt;p&gt;I see Ben and lots of people lately posting very short questions or statements and there is usually a good amount of engagement to answer the question or thoughts on the topic.&lt;/p&gt;
&lt;h2&gt;Share Experience&lt;/h2&gt;
&lt;p&gt;These have the opportunity to be some of the very best posts. Be sure to include the finer details of the problem that you are solving, the tools that you are using and how you utilized the tools to resolve your issue. Eventually someone else will have a similar issue and your post could be paramount in helping them. Even if others don&#39;t have the same issue, it could make them aware of an issue in order prevent their encountering such.&lt;/p&gt;
&lt;h2&gt;Learn or Mold Thoughts&lt;/h2&gt;
&lt;p&gt;One of the better premises that I&#39;ve read for a post recently was &lt;a href=&quot;https://dev.to/deciduously/correct-a-beginner-about-buzzword-technologies-4bbe&quot;&gt;Correct a Beginner About Buzzword Technologies&lt;/a&gt; which led off with this:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Learning in Public&lt;br&gt;
As I keep learning, DEV knows things. Ask them stuff.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The writer then went on to state the bits that they understood about several things and invited others correction. I find that this is actually the way that I learn about many of my misunderstandings in this field. I either make a statement or ask a question like &amp;quot;isn&#39;t X the way that Y works?&amp;quot; and I get corrected. It&#39;s the most straight forward way that I know to get information out of others as people naturally love correcting you whether it is constructive or not. Over time I know more things and my statements get corrected about fewer things.&lt;/p&gt;
&lt;p&gt;Personally I find that the mere act of writing something helps me to put my thoughts into focus and better understand my own situations and what the root of some issue may be.&lt;/p&gt;
&lt;h2&gt;Teach (something specific)&lt;/h2&gt;
&lt;p&gt;From &amp;quot;&lt;a href=&quot;https://dev.to/chillhumanoid/how-to-make-dev-better-in-2020-9oj&quot;&gt;How to Make Dev Better in 2020&lt;/a&gt;&amp;quot;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;no, we really don&#39;t need a &#39;python for beginners&#39; made by every single person ever.
Stop. It&#39;s not just python. But it&#39;s always the big languages, and it&#39;s never anything new. but it&#39;s also always different (and not in a good way). In some ways we have a reverse stack overflow here. No one&#39;s asking, everyone&#39;s offering.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://dev.to/chillhumanoid&quot;&gt;@chillhumanoid&lt;/a&gt; goes on to say:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;So what do I propose we post more of instead? Experiences. What was YOUR experience in implementing a feature in your application? Even if it&#39;s something that&#39;s common, maybe it was your first time implementing it. Talk about it. Chances are there ARE people looking for it.
But chances are that people on dev.to aren&#39;t looking for a python tutorial. Or how to get 60000 looking at their blog in 2020.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Overall, I think that the best way that we can figure out whether or not something will contribute positively in the community is participation. Read posts, comment where you can, and try writing things that aren&#39;t already done a million times.&lt;/p&gt;
&lt;h1&gt;How?&lt;/h1&gt;
&lt;p&gt;Honestly I only included this question for completeness of the most basic questions. I&#39;ve written about &lt;a href=&quot;https://dev.to/xanderyzwich/customizing-11ty-blog-1hm8&quot;&gt;personal blog setup already&lt;/a&gt;. Beyond that, basic writing development focuses on practice. Practice writing, and reading lots of things. Make yourself answer what makes you like or dislike a post. I currently have six drafts open right now that I go back and forth between as things come to mind that might help develop one post or another. I&#39;m also finding that as I write one post that I get ideas for more. Open a new file and get the basis for the idea put in there immediately. As you work on other posts you might get more ideas about that stub that you opened.&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>What Text Editors Do You Use?</title>
		<category>watercooler"</category>
		<category>discuss"</category>
		<category>tools"</category>
		<category>editor"</category>
		<summary>However many it may be, what editors do you find helpful in your workflow?</summary>
		<link href="https://coreydmccarty.dev/posts/2020_01_08_text_editors/"/>
		<updated>2020-01-17T00:00:00-00:00</updated>
		<id>https://coreydmccarty.dev/posts/2020_01_08_text_editors/</id>
		<content type="html">&lt;p&gt;When your work involves typing and manipulating data files with many different sources then you wind up with different tasks that can be accomplished in many ways. What are your favorite text editors or ways of manipulating text for different tasks?&lt;/p&gt;
&lt;h2&gt;VSCode&lt;/h2&gt;
&lt;p&gt;This is the newest editor in my toolbox. It has really good support for markdown and you can use it to open a regular file folder and access all of the contents. Lots of plugins and themes available.&lt;/p&gt;
&lt;h2&gt;Notepad++&lt;/h2&gt;
&lt;p&gt;I&#39;ve used this for years and gotten a lot of enjoyment out of it. The code highlighting is entirely customizable in addition to the themes that are available online. There are plugins, but I&#39;ve personally had issues with using them on my work laptop with user policies. One great feature is that when you close Notepad++ it will actually keep any unsaved work that you have without your explicitly saving the file anywhere. I used this for years ;keeping text files for ongoing tasks where the information wasn&#39;t relevant long term. VSCode is actually starting to replace this for me, especially with my adoption of markdown for notes that might include several different languages.&lt;/p&gt;
&lt;h2&gt;Programmer&#39;s Notepad&lt;/h2&gt;
&lt;p&gt;While very similar to Notepad++, Programmer&#39;s Notepad has a find/replace functionality that can use mixed backslash characters (\n, \r, \t, etc.) and simple regular expressions. While the finding could be done with regular expression in another editor, Programmer&#39;s notepad will let you replace the new line characters easily, which I found to be usefule when dealing with reformatting of data extracts and programmatically formed queries.&lt;/p&gt;
&lt;h2&gt;JetBrains IDEA &amp;amp; PyCharm&lt;/h2&gt;
&lt;p&gt;Anytime that I need to run Python code, or run Java projects (including Maven, Gradle, and Springboot tasks) then I greatly prefer the JetBrains editors. Also, the tooling for interaction with version control systems is top shelf! The merge tool, diff, and local history are very helpful. I also find that the global find tools are better than the rest. There are separate tools for finding a file name that contains your string or finding the string in a file. The global string replace tool has assisted me with package restructuring of java projects without effort.&lt;/p&gt;
&lt;h2&gt;Oracle SQL Developer&lt;/h2&gt;
&lt;p&gt;Writing queries with code completion with your actual database information is great. It helps that you can execute queries and export result data in multiple file formats.&lt;/p&gt;
&lt;h2&gt;Excel&lt;/h2&gt;
&lt;p&gt;While it seems a bit out of place in a discussion of code editors, when you have comma separated data that needs to be reformatted adhoc then Excel can be a really good tool, especially when coupled with another pure text editor. We had a playbook that clients would fill out that I would translate into sql for the database insertion (it actually controlled the functionality of our application), and I would use Excel for moving the columns around, clear out unnecessary data, auto incrementing some values, and then I could paste the first and last parts of the insert statement into the first and last columns of the spreadsheet.&lt;/p&gt;
&lt;h2&gt;Microsoft Word&lt;/h2&gt;
&lt;p&gt;This is the only tool that I&#39;ve found that will quickly and easily make everything lowercase. That&#39;s really all that I use it for. Well, that and writing documentation that will be for someone who isn&#39;t a programmer.&lt;/p&gt;
&lt;h2&gt;grep/sed/awk&lt;/h2&gt;
&lt;p&gt;Grep helps pull out the data that does/doesn&#39;t match a given pattern/string.&lt;/p&gt;
&lt;p&gt;Sed helps replace a given pattern/string (even several at a time).&lt;/p&gt;
&lt;p&gt;Awk is really helpful for pulling out certain pieces of column formatted data.&lt;/p&gt;
&lt;p&gt;It&#39;s also of important note that with these tools that you really get the most power out of them when you start chaining them together with linux command line pipes (&amp;quot;|&amp;quot;) and output redirects (&amp;quot;&amp;gt;&amp;quot; or &amp;quot;&amp;gt;&amp;gt;&amp;quot;) to write files or &lt;code&gt;wc -l&lt;/code&gt; to count the lines.&lt;/p&gt;
&lt;p&gt;Altogether these things can be used almost like sql from the linux command line.&lt;/p&gt;
&lt;h2&gt;Python Scripts&lt;/h2&gt;
&lt;p&gt;Python is really quick and powerful for writing text manipulation scripts. Opening a file, iterating through it&#39;s lines, splitting the line into variables and checking for given values can be achieved in 5 lines of code.&lt;/p&gt;
&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;file.csv&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;r&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;as&lt;/span&gt; input_data&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; line &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; input_data&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;	    a&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; b&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; c&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; d &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; line&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;split&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;,&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;		&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; b &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;fubar&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;		    do&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;thing&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
</content>
	</entry>
	
	<entry>
		<title>Writing Pitfalls</title>
		<category>blog"</category>
		<category>writing"</category>
		<category>discuss"</category>
		<category>watercooler"</category>
		<summary>As you write more, you realize that you need to improve some things.</summary>
		<link href="https://coreydmccarty.dev/posts/2020_01_08_writing_faults/"/>
		<updated>2020-01-17T00:00:00-00:00</updated>
		<id>https://coreydmccarty.dev/posts/2020_01_08_writing_faults/</id>
		<content type="html">&lt;p&gt;I&#39;ve been working since New Year&#39;s trying to write something daily without completing it. As I write ideas come to mind and I&#39;ll open a new file to hold the new thought however short it may be. The continuing echo of &#39;write more&#39; has permeated dev.to recently, so I&#39;m surely not the only one.&lt;/p&gt;
&lt;p&gt;I just want to discuss bad habits, and maybe we can help one another to be more aware of what we may be doing, similar to saying &#39;umm&#39; too much when you talk.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;I have found that I use the word &#39;to&#39; constantly; so much so, that I currently have VSCode set to highlight &#39; to &#39; and I&#39;m refactoring as many of them away as I can.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;My spacing after periods is terribly inconsistent. I learned in school that there should be two, but in recent years I have succumbed to the one that my phone prefers. As a result, I find myself replacing everytime I used two space to be one, just for consistency.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;I also find that I tend towards writing very long sentences. I make sure that they are grammatically correct and not just run-ons, but long clauses strung together can lend itself to be more difficult to follow.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
</content>
	</entry>
	
	<entry>
		<title>My Introduction to Jenkins</title>
		<category>jenkins"</category>
		<category>devops"</category>
		<category>productivity"</category>
		<category>learning"</category>
		<summary>What I&#39;ve learned about Jenkins CI/CD in the last six months.</summary>
		<link href="https://coreydmccarty.dev/posts/2020_02_13_jenkins/"/>
		<updated>2020-02-13T00:00:00-00:00</updated>
		<id>https://coreydmccarty.dev/posts/2020_02_13_jenkins/</id>
		<content type="html">&lt;p&gt;Last fall I had the joy of working through a PI in my company&#39;s cloud readiness dojo, and it was really fun and exciting to those of us that like to play with new tech (oddly enough, not my entire dev team). The overall goal of this activity was to take our existing applications and make them function in the cloud that our internal Platform as a Service (Paas) team had put together.&lt;/p&gt;
&lt;h2&gt;What We Had&lt;/h2&gt;
&lt;p&gt;The team owns around 15 Java applications; nearly half of which are SOAP web services that are deployed into Weblogic servlet containers. Weblogic handles most of your connection related things externally from the application. There was a developer framework library that we used from another internal team that did many things for us. There was a nice neat logging configuration with four types of logs that each rolled through 20 files automatically using an internal flavor of Log4j. Any configuration that needed to be done was externalized into the file system so that when you needed to change something then you could just update the config file and bounce the servlet container. Our build process had been recently converted from Ant to Gradle, and we&#39;d adopted a Nexus artifact repository where we stored our built products.&lt;/p&gt;
&lt;h2&gt;Where We Were Going&lt;/h2&gt;
&lt;p&gt;The deployment platform that we were instructed to adopt involves Pivotal Cloud Foundry and a Cloudbees Jenkins pipeline utility that is shared by most of the company. Splunk is used for logging. Springboot cloud config server is utilized in place of properties files, and for all practical purposes the filesystem doesn&#39;t exist.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note: None of us really knew anything about any of these tools.&lt;/strong&gt;&lt;/p&gt;
&lt;h2&gt;The Experience&lt;/h2&gt;
&lt;p&gt;In the first few days we went through PI planning; listing our existing things and what we needed to accomplish. They had a custom Springboot Initializr that saved us a week or two of time, after we got all of our credentials setup. It was really easy to get space allocated in PCF and to get a simple build to deploy something into that space. Next we went on to get our configuration server in place (it was mostly generated from the Initializr) and the repository for our config files that it would serve. After all of that really fun and exciting stuff we had a demo REST endpoint running in PCF with Springboot and reading its config from the cloud config server. COOL!&lt;/p&gt;
&lt;p&gt;It wasn&#39;t long after that when we settled into the monotony of moving several thousand lines of code into the new project. We did take the opportunity to cleanup some things like needless package depths and a ton of commented out code. We moved in the endpoint classes and began to bring over only the classes necessary to make them run. The idea being that we may shake off some cruft in the process. After the main code we would then take a few weeks to move in 415 classes full of junits that build their data in the actual database in a special schema, and we still can&#39;t figure out how to prevent these from initializing the application context between every Junit class.&lt;/p&gt;
&lt;h2&gt;Still learning&lt;/h2&gt;
&lt;p&gt;We left with a (just) functioning SOAP webservice running with Springboot jar and built-in Tomcat. It was able to deploy into our two PCF test environments but not our still-necessary VM test environments.&lt;/p&gt;
&lt;p&gt;We formed a plan and instruction document for what we&#39;d done up to that point, and our offshore team was able to do some really amazing things and get another 5 application migrated to a similar point in the next 5 months. While there were some performance enhancements and contract expectations to resolve (exceptions should match those from the previous version of the application), the applications are Cloud Native!&lt;/p&gt;
&lt;p&gt;I personally started doing the additional Jenkins pipeline enhancements While this has somehow turned into a very long story (I don&#39;t do short very well), it is actually my intention to write about what I&#39;ve learned about Jenkins.&lt;/p&gt;
&lt;h2&gt;JENKINS (for real this time)&lt;/h2&gt;
&lt;p&gt;The first things that we learned about the tool was that it is a CI/CD/CT platform that lets us deploy into PCF (with internally built tools from our Paas team), and that it can hold our secrets to prevent their having to be placed into our code or configuration repositories. That&#39;s really cool!&lt;/p&gt;
&lt;p&gt;The more that I&#39;ve spent time working on Jenkins pipelines, the more I come to realize that Jenkins (and let&#39;s face it CI/CD pipelines in general) is just a fancy UI/automation for running scripts. Much of what we use is Groovy scripts that were put into a reference library that we can bring in for effortless interaction with the PCF environment and running our Gradle builds with Java that someone else manages updates for. When you get to the point of interacting with VM&#39;s for other deployments, it is done by executing SSH commands against your Linux servers. As such, there is a lot of shell scripting involved.&lt;/p&gt;
&lt;p&gt;Our Jenkins pipeline is a multi-branch pipeline that executes our Jenkinsfile definition. This allows us to build from different branches of our Gitlab repositories. The basic form of a Jenkinsfile can be found below (although to be honest I&#39;m not 100% sure what of this is standard and what is given to us by our Paas team reference pipeline).&lt;/p&gt;
&lt;pre class=&quot;language-groovy&quot;&gt;&lt;code class=&quot;language-groovy&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;library &lt;span class=&quot;token string&quot;&gt;&#39;fu&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;library &lt;span class=&quot;token string&quot;&gt;&#39;bar&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;pipeline&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;	agent any&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;	options&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;		&lt;span class=&quot;token function&quot;&gt;buildDiscarder&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;logRotator&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;numToKeepStr&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;10&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;	&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;	parameters &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;		&lt;span class=&quot;token function&quot;&gt;choice&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;name&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;PARAM_ONE&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; choices&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;fu\nbar\nbaz&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; description&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;This is the first option when you build with parameters&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;	&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;	environment&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;		FIRST &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string gstring&quot;&gt;&quot;&lt;span class=&quot;token expression&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;$&lt;/span&gt;params&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;PARAM_ONE&lt;/span&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;		SECOND &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string gstring&quot;&gt;&quot;to.dev.thing.second&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;		PI &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string gstring&quot;&gt;&quot;3.14159&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;	&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;	stages &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;		&lt;span class=&quot;token function&quot;&gt;stage&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;First&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;			when &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;				anyOf &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;					environment name&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;FIRST&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; value&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;bar&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;					environment name&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;FIRST&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; value&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;baz&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;				&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;			&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;			steps &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;				firstThing &lt;span class=&quot;token punctuation&quot;&gt;$&lt;/span&gt;SECOND&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;			&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;		&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;	&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;	&lt;span class=&quot;token function&quot;&gt;stage&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Second&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;		steps &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;			secondThing &lt;span class=&quot;token punctuation&quot;&gt;$&lt;/span&gt;PI&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;			echo &lt;span class=&quot;token string gstring&quot;&gt;&quot;Hello World!&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;			script &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;				&lt;span class=&quot;token punctuation&quot;&gt;$&lt;/span&gt;env&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;BOB &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string gstring&quot;&gt;&quot;Steve&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;			&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;			echo &lt;span class=&quot;token string gstring&quot;&gt;&quot;Hello &lt;span class=&quot;token expression&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;$&lt;/span&gt;env&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;BOB&lt;/span&gt; !&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;		&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;	&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I&#39;ve come to find out that the way that the reference pipeline is built is primarily just &lt;code&gt;thing.groovy&lt;/code&gt; scripts that execute &lt;code&gt;thing [params]&lt;/code&gt; command from the pipeline. I kind of wish I had known this earlier and made use of this functionality because most of my solutions look a bit more hacky. What I wound up doing was to abuse the &lt;code&gt;script&lt;/code&gt; sections as steps, and to define groovy functions outside the &lt;code&gt;pipeline&lt;/code&gt; scope that I could use to define more complex functionality to keep it from muddying the readibility of the pipeline.&lt;/p&gt;
&lt;h2&gt;That Seems Easy&lt;/h2&gt;
&lt;p&gt;What is far more complicated than actually executing any of that development work is that, I don&#39;t know if you are aware or not, but pipeline design is so complex that many people lean on other people/teams (specialists) to do it for them. We have two basic types of pipelines that we utilize.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Application Pipeline
&lt;ol&gt;
&lt;li&gt;Defined by a Jenkinsfile in the repository for that applciation&lt;/li&gt;
&lt;li&gt;Doesn&#39;t interact with any other applications&lt;/li&gt;
&lt;li&gt;Interaction with it is USUALLY triggered automatically from push/merge of the primary branches in Gitlab&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;DevOps Pipeline
&lt;ol&gt;
&lt;li&gt;Defined in it&#39;s own otherwise empty code repository&lt;/li&gt;
&lt;li&gt;Interacts with many applications&lt;/li&gt;
&lt;li&gt;Interaction with it is intentional from the &#39;Build with Parameters&#39; on Jenkins&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;That&#39;s it! It seems really straight forward, right? The issues that we have found ourselves having biggest issues with is deployment that are not in PCF and not triggering automatically from a build. We need to get similar functionality to what we have in PCF (Start, Stop, ConfigRefresh, Status, Deploy, etc).&lt;/p&gt;
&lt;p&gt;Without having the reference pipeline that handles setting environment variables in PCF when when deploy into our VM environments we had to get the credentials from Jenkins and store them in the build server for each environment. This had to be carefully considered because while we didn&#39;t want to require a build of the application to move new credentials, the number of credentials necessary for each application is different, so if we did it in the second type of pipeline then we would need to define those credentials in two different places and that becomes a tripping point to manage long term. This means that we have to build those environment variable files during build time, and we actually chose to do that for all of the VM environments during each and every build.&lt;/p&gt;
&lt;p&gt;Another thing that has taken some time and design consideration is that having to perform a build with parameters for stopping the application in an environment and then another for pushing the code, and then pushing the configuration, and then finally starting the application is a bit absurd. We do need to have each of those activities accessible individually, but now we actually need a &lt;code&gt;deploy&lt;/code&gt; action that will simplify the flow a bit.&lt;/p&gt;
&lt;h2&gt;The Benefits&lt;/h2&gt;
&lt;p&gt;While our journey with Jenkins is far from over, we are beginning to see some tremendous benefits to our life with the changes that we have. Previously we had a DevOps team that made the changes that we needed with configurations and deploying code into different test levels. With this new flow we are able to do those things at will, and even better is that we can even have someone that isn&#39;t comfortable diving into the old build server to perform these activities if needed. Our tester is not a developer by training, and is really excited at the possibility of moving a given build when necessary. We also intend on bringing any activity that we have previously executed in a server directly into a Jenkins pipeline.&lt;/p&gt;
&lt;p&gt;The next big thing that we are excited for is having our integration, regression, and stress tests executable with parameters from Jenkins instead of having someone dig around in configuration files and then run the start scripts from the server. A simple build with parameters that says to run &#39;Stress Test&#39; on &#39;VM L4&#39; with length of &#39;6hrs&#39; will be able to do all of the things that take nearly an hour presently.&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>Wholeness of Life</title>
		<category>career"</category>
		<category>learning"</category>
		<category>discuss"</category>
		<category>mentalhealth"</category>
		<category>life"</category>
		<summary>Overall strategy for growth.</summary>
		<link href="https://coreydmccarty.dev/posts/2019_12_31_wholeness_of_life/"/>
		<updated>2020-02-22T00:00:00-00:00</updated>
		<id>https://coreydmccarty.dev/posts/2019_12_31_wholeness_of_life/</id>
		<content type="html">&lt;p&gt;We often talk about what makes a good developer and how to deal with things specifically in and around the tech industry, but I believe that most of it really comes down to how we live our life.&lt;/p&gt;
&lt;h2&gt;Hobbies&lt;/h2&gt;
&lt;p&gt;I came across this tweet that I feel is really important to acknowledge&lt;/p&gt;
&lt;blockquote class=&quot;twitter-tweet&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;i feel like my generation lost hobbies. &lt;br&gt;&lt;br&gt;everything doesnâ€™t have to be a hustle, side hustle, or money making enterprise. sometimes itâ€™s just fun to do something because it brings you joy, peace, relaxation, or allows you to be creative. &lt;br&gt;&lt;br&gt;letâ€™s rediscover hobbies in 2020.&lt;/p&gt;&amp;mdash; Kashia (@kashia) &lt;a href=&quot;https://twitter.com/kashia/status/1212041240658747393?ref_src=twsrc%5Etfw&quot;&gt;December 31, 2019&lt;/a&gt;&lt;/blockquote&gt; &lt;script async=&quot;&quot; src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt; 
&lt;p&gt;This pinpoints something that I&#39;ve been struggling to put into words as I&#39;ve developed this post. At 16 I started my first real job the day after my birthday because I had always wanted to work and have my own money. I proceeded to work more than I should as a general rule, even as my only actual bills were a cell phone and my car insurance.  I found myself voluntarily working more shifts and later than a minor should. The idea of having my own money, and thus freedom, was too attractive. It&#39;s only recently that I have noticed that I spend little time living in that freedom.  I was dedicated to work, romance, and social gatherings.&lt;/p&gt;
&lt;p&gt;I found myself in interviews at the age of thirty struggling to answer &#39;what do you like to do with your free time?&#39; which is absurd. I was unclear of my own likes. I started into gaming before my son was born (and long periods of free time disappeared). I focused on vape culture in researching, maintaining my devices, and even mixing my own liquids. More recently I&#39;ve dipped my toes into traditional wetshaving, mechanical keyboards, and fountain pens. It was after I picked up fountain pens and started doing writing with them for pleasure that I finally realized how much of my life was spent previously without any real hobbies. While this seems like a minor detail, life becomes really stressful when you don&#39;t allow yourself something to enjoy.&lt;/p&gt;
&lt;p&gt;I had actually acquired some hobbies that I hadn&#39;t even really registered as such until I pressed into writing this post. Not long after I began my first programming job I made the decision to stop smoking and start vaping. At the time there was a very large community for vaping in my area and I would go on to learn how to use and maintain my vaping equipment even to the extent of building my own coils and mixing my own liquid. My wife and I had also made an effort to get back into gaming after Fable was re-released to 360. I played through all three games in reverse order and a few other big world games for hundreds of hours over a few years. One of the friends that I made in the vaping community actually made me aware of traditional wetshaving and I wound up doing a good bit of research into that and wound up really enjoying it. More recently My local tech community got me into both mechanical keyboards and fountain pens and I have really come to enjoy using them everyday at work.&lt;/p&gt;
&lt;p&gt;After this epiphany I reflected on my career as well; how I had taken a very passive approach to advancement. It thrills me to see younger and younger people finding programming as a hobby and teaching themselves to ther point of hireability without a degree. At the same time, I reflect on the difficulty that I&#39;ve experienced finding work even with a BS in computer engineering. I want to discuss how you can more actively approach enrichment of your career. This is intended as a guide for myself and I hope that somebody else finds it helpful as well.&lt;/p&gt;
&lt;h2&gt;Code&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;How we treat our code is much like how we think of our world.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Is the glass half full or half empty? Our general feeling about this probably relates closely with how we feel about our code base. If you love your code then that&#39;s great, but I don&#39;t know many people who do. Most developers seem to feel that there is much improvement that can be done on their code, but few feel they have time to correct it.&lt;/p&gt;
&lt;p&gt;Much of what developers like to talk about is shiny and new, but most of us are working with legacy cruft. While I agree that playing with new things is great, I think that you can find lots of interesting things in your own stack to play with. Green fields are nice, but they always wind up filled with cruft eventually, and getting hands on with that cruft can be the best way to minimize its creation. A legacy system tends to have lists of known issues that provide more direction than a blank page. Issues cause us headaches, but if you make yourself take the time and improve/standardize/automate your process then you will find pride in the improvement everytime that you use the process. Ultimately we find ourselves slowly touching every last bit of code in a system over time and if you make the effort for ongoing improvement it then the resulting ownership and pride make the work of legacy code maintenance more fulfilling than moving a green field project into production.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;This post is part of a series about life, community, and learning.&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>Community</title>
		<category>career"</category>
		<category>learning"</category>
		<category>discuss"</category>
		<category>mentalhealth"</category>
		<category>life"</category>
		<summary>How we perform as a part of a team stems directly from how we interact with any group or community</summary>
		<link href="https://coreydmccarty.dev/posts/2019_12_31_community/"/>
		<updated>2020-02-23T00:00:00-00:00</updated>
		<id>https://coreydmccarty.dev/posts/2019_12_31_community/</id>
		<content type="html">&lt;p&gt;In this information age, driven largely by social media and online interactions it is common for people to self identify as anti-social, but I think this is a bit of a misnomer. Our involvement with communities is changing and the definition of what it social should be evolving with the available interactions. Humans are social creatures and we have characteristics that can only be realized in some type of a social environment. Not only that, but research actually shows that depression and drug use occur less often in people that take part in activities with other people.&lt;/p&gt;
&lt;p&gt;I&#39;ve found some really great (and really terrible) communities online. These were across Reddit, Facebook, Discord, Slack/IRC, and the really good communities operate with the same standards that an in person community would operate. The two most prevalent set of rules that I&#39;ve come across are  &lt;a href=&quot;https://www.reddithelp.com/en/categories/reddit-101/reddit-basics/reddiquette&quot;&gt;Reddit&#39;s rules of reddiquette&lt;/a&gt; and &lt;a href=&quot;https://www.python.org/psf/conduct/&quot;&gt;Python&#39;s Community Code of Conduct (COC)&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I&#39;ll list the Python COC as it is more succinct than Reddit&#39;s.&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Being open&lt;/strong&gt;. Members of the community are open to collaboration, whether it&#39;s on PEPs, patches, problems, or otherwise.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Focusing on what is best for the community&lt;/strong&gt;. We&#39;re respectful of the processes set forth in the community, and we work within them.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Acknowledging time and effort&lt;/strong&gt;. We&#39;re respectful of the volunteer efforts that permeate the Python community. We&#39;re thoughtful when addressing the efforts of others, keeping in mind that often times the labor was completed simply for the good of the community.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Being respectful of differing viewpoints and experiences&lt;/strong&gt;. We&#39;re receptive to constructive comments and criticism, as the experiences and skill sets of other members contribute to the whole of our efforts.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Showing empathy towards other community members&lt;/strong&gt;. We&#39;re attentive in our communications, whether in person or online, and we&#39;re tactful when approaching differing views.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Being considerate&lt;/strong&gt;. Members of the community are considerate of their peers -- other Python users.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Being respectful&lt;/strong&gt;. We&#39;re respectful of others, their positions, their skills, their commitments, and their efforts.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Gracefully accepting constructive criticism&lt;/strong&gt;. When we disagree, we are courteous in raising our issues.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Using welcoming and inclusive language&lt;/strong&gt;. We&#39;re accepting of all who wish to take part in our activities, fostering an environment where anyone can participate and everyone can make a difference.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;These are all things that mirror what we do in real life (IRL) communities, and are pretty easy to follow for most people; however, these rules have come about in response to a real issue that happens when you allow people to interact while being anonymous. Trolls are a real problem with any community. It just so happens that IRL people come to know you by face and reputation and you are either disallowed from joining events or people avoid you.&lt;/p&gt;
&lt;p&gt;Like anything else, we get better at membership to a community by practice.  Taking part in the conversation with people and working together is necessary to contribute to any social group, and for the most part software development is always done with a team.  We each need to focus on communication and the good of the group in order to achieve anything in a timely manner. We need the ability to both learn and teach within the group. This requires that we communicate effectively, making sure to listen intently and ask questions to understand what everyone is intending to say. It&#39;s really easy for us to get caught in a way of thinking that imparts rightness to someone while conversations are typically more fruitful when nobody is trying to win, instead speaking with humility. Many times we need to consider complex strengths and weaknesses. Through this process we hone our vocabulary and the definitions that we have for things so that they more closely align with our team and our industry as a whole when applicable. I believe that as a professional community we should have a value system whereby we value people by the content of their character and their ability to contribute to the community regardless of the role that they play. We should be able to easily model societal ideals of acceptance of our peers regardless of any labels or belonging to any particular group.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Networking
&lt;ul&gt;
&lt;li&gt;make friends&lt;/li&gt;
&lt;li&gt;learn about companies in your area that hire programmers&lt;/li&gt;
&lt;li&gt;understand company processes that aren&#39;t your own&lt;/li&gt;
&lt;li&gt;learn about strengths and weaknesses of tools and languages&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I try to open my network up to many different communities.  Twitter is a great place to find lots of development interaction. I also find Dev.to to be really great. I&#39;ve found a couple of Discord and Slack servers with good community where I can both learn and teach.  I think that this is really important for our understanding of things. Someone smarter than me once said that if you can&#39;t explain something to a five year old then you don&#39;t understand it. In programming I&#39;d rephrase it that if you can&#39;t explain it to a fresh junior dev then you don&#39;t understand it. Learning, as I understand it, has three phases. First we acquire information, then we process it, and finally we share it. If you aren&#39;t a part of some community (at work or otherwise) then it is really difficult to complete this process and finally commit the ideas into long term memory.&lt;/p&gt;
&lt;p&gt;One of the Slack servers that I&#39;m on posts questions every M-F morning for engagement. Sometimes it is general advice for less experienced people, other times it is just an explanation of what you are doing or have accomplished this week. I at least read the question every morning when the notification pops up on my phone. I don&#39;t clear that notification until I either have commented or I decide that I don&#39;t have anything to comment. Engaging in the community is easily forgotten when you get busy at work, but it is that community that will help you to grow the most.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;This post is part of a series about life, community, and learning.&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>Always Be Learning</title>
		<category>career"</category>
		<category>learning"</category>
		<category>discuss"</category>
		<category>mentalhealth"</category>
		<category>life"</category>
		<summary>If you aren&#39;t geting better then  you are getting worse.</summary>
		<link href="https://coreydmccarty.dev/posts/2019_12_31_always_be_learning/"/>
		<updated>2020-02-24T00:00:00-00:00</updated>
		<id>https://coreydmccarty.dev/posts/2019_12_31_always_be_learning/</id>
		<content type="html">&lt;p&gt;It&#39;s a recurring theme among tech communities to reflect and offer advice to the newcomers. I find that near me that it always comes back to this one thing.&lt;/p&gt;
&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;token triple-quoted-string string&quot;&gt;&quot;&quot;&quot;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;ALWAYS BE LEARNING&lt;/span&gt;&lt;br&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;not&lt;/span&gt; dead&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;	learn&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In the software industry it seems that you are either terribly overworked or underworked. Both of these scenarios can bring difficulty to our learning process&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Being overworked&lt;/strong&gt; makes you rush around from task to task making the same decisions without room for enrichment. You will likely find lots of things along the way that  you wish you knew more about, but just don&#39;t have the time to dedicate for learning without using your personal/home/family time. If you do this long enough then you will get a great deal of work done, but not learn anything outside of the things that you broke while trying to keep from breaking deadlines.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Being underworked&lt;/strong&gt; means that you probably aren&#39;t coming across so many things that you need to learn. With a lacking work load you likely have figured out all of the difficulties that face you on any given day, and mostly fill your time with some mix of different social medias (reddit, facebook, twitter, youtube, slack, discord, twitch, or whatever). Going through day after day without any challenge can actually be miserable (regardless of how nice it sounds if you&#39;re in the previous camp).&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;always&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;thing&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;bar&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;	&lt;span class=&quot;token keyword&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;token string-interpolation&quot;&gt;&lt;span class=&quot;token string&quot;&gt;f&#39;Raise the &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;thing&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Regardless of which side you might find yourself in today, I&#39;d like to challenge you to reclaim a bit of your time and direction. The end goal isn&#39;t to deliver that thing that your boss is asking for, but to advance your career and continue to learn more. Most managers aren&#39;t going to give you direction to go off and learn something new or to take the time and really get to know the framework that your current project is using. Most managers want you to continue delivering the most benefit to the company/team in the shortest amount of time possible. But, most of the managers that I&#39;ve come across are really interested in having you be able to take on new bits that nobody on the team is comfortable with or having more people on the team to actually know the deeper parts of the infrastructure in order to prevent issues.&lt;/p&gt;
&lt;h2&gt;OWN YOUR ADVANCEMENT&lt;/h2&gt;
&lt;p&gt;Active pursuit of betterment is required in our ever changing field; in other words &amp;quot;if you aren&#39;t moving forward then you&#39;re moving backward.&amp;quot; But it is really difficult to judge ability without a comparison and context. My first 5 years in the industry were largely spent performing what most people would consider support activities.  I elicited change requirements from clients, made changes to implement these changes that, and deployed changes in test levels and production.  A good deal of debugging occurred with client issues, but my explanations of these activities typically fail to persuade someone to hire me as a developer. All of those first years were spent in a group of very skilled developers and while I learned a great deal during that time, I remained the most junior member. It wasn&#39;t until I joined a new team and was able to gain the context to compare my skill set to others that were different from my own that I gained the ability to explain these things. Looking at our own advancement through the lens of life is my overall goal with this series.&lt;/p&gt;
&lt;p&gt;In the last year or so I decided to learn Javascript, and wound up making myself a resume that would populate from data file. This all stemmed from my acquisition of a &lt;code&gt;.dev&lt;/code&gt; domain. I wound up needing to learn about dns configuration, github pages, node js, and alot of frontend design things that I hadn&#39;t touched in years. I would come to learn about JamStack and eventually wind up with a blog site using 11ty static site generator and replicating that into the Dev.to community. These things all kind of snowballed from the idea of owning a domain and figuring out what to do with it.&lt;/p&gt;
&lt;h2&gt;What to learn?&lt;/h2&gt;
&lt;p&gt;I read SO many different posts about what people are learning or people asking what they should learn. This isn&#39;t a one size fits all thing. Everyone has different interests and every area has different needs. I have been developing some tricks (read as getting pointers from others and figuring out which ones work for me) and I&#39;ll share these with you (tl;dr the answer is lists). I keep a spread in my bullet journal for &#39;Professional Goals&#39; and my current lists are below.&lt;/p&gt;
&lt;p&gt;But how do you figure out what should go on the list?  I add things to the list (with top priority) that my current projects use and I don&#39;t already know/understand. The next group of things comes from the communities that I&#39;m in and the things that they speak well about. The last group of things that I add to the list are things that are on job listings that I find interesting. When you are doing this last part you should make sure to look at listings in your desired physical areas and fields of work. Different areas and industries can have drastically different technology stacks and standards, and it&#39;s important to keep your skills relevant to your current and potential work.&lt;/p&gt;
&lt;h3&gt;Side One&lt;/h3&gt;
&lt;h4&gt;Resources&lt;/h4&gt;
&lt;p&gt;Places to learn that I don&#39;t remember off the top of my head&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Hacker Rank&lt;/li&gt;
&lt;li&gt;Leet Code&lt;/li&gt;
&lt;li&gt;Codepen.io&lt;/li&gt;
&lt;li&gt;Repl.it&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I also frequently use Java API documentation, W3Schools, learnxinyminutes.com, and stack overflow&lt;/p&gt;
&lt;h4&gt;Things to Research&lt;/h4&gt;
&lt;p&gt;Things that I&#39;ve heard the name of and don&#39;t even know what they are (If anyone wants to define these then feel free). I&#39;ll mark things off of this list once I can at least explain what it is and what makes it good/helpful and hopefully when it should be used.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;[ ] TOGAF&lt;/li&gt;
&lt;li&gt;[ ] RWD&lt;/li&gt;
&lt;li&gt;[ ] ElasticSearch&lt;/li&gt;
&lt;li&gt;[ ] Cucumber&lt;/li&gt;
&lt;li&gt;[ ] Kafka&lt;/li&gt;
&lt;li&gt;[ ] CockRoachDB&lt;/li&gt;
&lt;li&gt;[ ] Reactive Programming / Even Streaming&lt;/li&gt;
&lt;li&gt;[ ] PKS&lt;/li&gt;
&lt;li&gt;[ ] Pivotal Geode&lt;/li&gt;
&lt;li&gt;[ ] Gemfire&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Side Two: Things to Learn&lt;/h3&gt;
&lt;p&gt;I&#39;ll mark these things off once I would be comfortable enough to work on them (regardless of how much research I may need while I would do so)&lt;/p&gt;
&lt;h4&gt;Languages&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;[ ] Go&lt;/li&gt;
&lt;li&gt;[ ] Rust&lt;/li&gt;
&lt;li&gt;[ ] Lua&lt;/li&gt;
&lt;li&gt;[ ] Kotlin&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Frameworks&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;[ ] Node JS&lt;/li&gt;
&lt;li&gt;[ ] Angular JS&lt;/li&gt;
&lt;li&gt;[ ] Flask Python&lt;/li&gt;
&lt;li&gt;[x] Spring Java&lt;/li&gt;
&lt;li&gt;[ ] Junit&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Technology&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;[ ] Docker&lt;/li&gt;
&lt;li&gt;[ ] Kubernetes&lt;/li&gt;
&lt;li&gt;[ ] Pivotal Cloud Foundry&lt;/li&gt;
&lt;li&gt;[ ] PKS&lt;/li&gt;
&lt;li&gt;[x] Jenkins&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Processes / Principles&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;[x] IOC&lt;/li&gt;
&lt;li&gt;[x] AOP&lt;/li&gt;
&lt;li&gt;[ ] TDD&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;This post is part of a series about life, community, and learning.&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>Logging Improves Quality of Life</title>
		<category>logging"</category>
		<category>development"</category>
		<category>programming"</category>
		<category>beginner"</category>
		<summary>If you care then you will work to improve the logging in everything you write.</summary>
		<link href="https://coreydmccarty.dev/posts/2020_01_08_logging_improves_quality_of_life/"/>
		<updated>2020-02-25T00:00:00-00:00</updated>
		<id>https://coreydmccarty.dev/posts/2020_01_08_logging_improves_quality_of_life/</id>
		<content type="html">&lt;p&gt;&lt;a href=&quot;https://dev.to/theodormanolescu/comment/1b5o&quot;&gt;Here&lt;/a&gt; I found a pretty good explanation of logging.&lt;/p&gt;
&lt;p&gt;The questions posed were:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;When should I be logging information?&lt;/li&gt;
&lt;li&gt;What information should a log message always contain and what is optional?&lt;/li&gt;
&lt;li&gt;How do you decide what level this log should be set to there&#39;s many info, trace, debug, error, warn and even &amp;quot;verbose&amp;quot;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The answer given:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Consider your application a human.&lt;br&gt;
Depends how much info do you want to get from it.&lt;br&gt;
Example:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;6 months baby&lt;/strong&gt; -&amp;gt; App with no logs and no error handling either works or doesn&#39;t, baby is ok or crying.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;1.5 years&lt;/strong&gt; -&amp;gt; app with small error handling and 1-5 word logged like error save or error buy, baby has a vocabulary of 50 words&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;2.5 years&lt;/strong&gt; - app has some error handling and logs that express an action like could not save order, baby can make simple sentences like i fell down&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;5 years&lt;/strong&gt; - app logs that express intention with some context and can provide info about what&#39;s wrong with it, for baby while eating some candy i got sick and my stomach hurts&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;18 years&lt;/strong&gt; - app handles errors correctly and logs with full relevant context and can provide info for most of the problems, human drank allot of beer now is drunk and he knows he needs to sleep it off or eat something&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;Knowing that there was some terrible event is a good start, but knowing what happened is far better, and even better still is knowing the cause.  Moving even further still,  you will figure out that it is really good to know if anything good has happened, or when was the last time that X thing didn&#39;t fail.&lt;/p&gt;
&lt;p&gt;I spent some years performing support activities for an application before having the opportunity to upgrade the logging framework (we went from log4j to log4j2) and while I was in there making changes in every single class that performed logging, I increased the logging functionality. Log4j2 has a thread context hashmap that can hold whatever you like, and those variables can be referenced in the configured logging pattern. I was really excited. For the most part I didn&#39;t create any entries in the logs that didn&#39;t previously exist, but I did make several enhancements.&lt;/p&gt;
&lt;p&gt;So many times when you are debugging something you find yourself looking for a little more context. Logging should give you an idea of where you should look for when something is going wrong. Debug logging should capture notable data. If your sql is being generated in a completely different place than the original flow of the logic then you should really log the sql. If you don&#39;t log enough information then you will find yourself struggling to debug issues, but if you have the right information being logged then you should find that debugging sessions are less intensive.&lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;Basic Improvements&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Generate a transaction id for every request, return it in the response header, and add it to the logging context. This allows for a transaction to be traced as long as the client can provide the transaction id.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Log the class where the message was generated&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;and the method/function&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Debug level logs AND Error logs should both contain the request and response.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Database queries should be logged in debug (even if not needed elsewhere).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Log as much as possible of the following&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;timestamp&lt;/li&gt;
&lt;li&gt;requesting system identification&lt;/li&gt;
&lt;li&gt;database table/schema/ being accessed&lt;/li&gt;
&lt;li&gt;entry point&lt;/li&gt;
&lt;li&gt;response time&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Overall you want to know as much as possible about who or what system is making the call to the applicaiton, what that transaction looks like, what generated calls look like, and what particular exceptions are occurring (even if being captured). You will learn over time what things are helpful for debugging your applications and you can add or remove from this list for your own usage. Make sure that each logging level has a purpose and that the messages generated for that level apply to that purpose.&lt;/p&gt;
&lt;h2&gt;My Personal Beliefs&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;ERROR&lt;/strong&gt; is when something goes wrong
&lt;ul&gt;
&lt;li&gt;i.e. &amp;quot;This thing went wrong&amp;quot;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;WARN&lt;/strong&gt; should illuminate any potentially harmful situations
&lt;ul&gt;
&lt;li&gt;i.e. &amp;quot;This odd thing happened and could be relevant if something is going wrong&amp;quot;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;INFO&lt;/strong&gt; should show how the application is progressing from a little higher of a level; Incomming calls, outgoing calls, anything substantial on an external unit of work level.
&lt;ul&gt;
&lt;li&gt;i.e. &amp;quot;Received request of type X, called Y database,&amp;quot;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;DEBUG&lt;/strong&gt; should help me track the exact process that is going on when I am researching issues and help me to find the source of a problem fairly quickly.
&lt;ul&gt;
&lt;li&gt;i.e. &amp;quot;Entering/exiting X method call with input/output data that looks like Y&amp;quot;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</content>
	</entry>
	
	<entry>
		<title>I&#39;m Corey McCarty, and I support women devs.</title>
		<category>shecodedally"</category>
		<category>women"</category>
		<category>tech"</category>
		<category>inclusion"</category>
		<summary>Women&#39;s day is important</summary>
		<link href="https://coreydmccarty.dev/posts/2020_03_06_womens_day/"/>
		<updated>2020-03-06T00:00:00-00:00</updated>
		<id>https://coreydmccarty.dev/posts/2020_03_06_womens_day/</id>
		<content type="html">&lt;p&gt;I find it hard to understand that sexism still exists in 2020. I have multiple women in development lead and management roles all around me, and I honestly don&#39;t know any women in software development that aren&#39;t good at what they do whereas I can easily think of several men who get by without being strong developers. It seems quite foreign that there remain people that are not accepting of women in the workforce or that women consistently face income inequality.&lt;/p&gt;
&lt;p&gt;Equality in tech must involve women being valued and empowered in the the tech community as well as the industry. This should include equality in respect, pay, and position.&lt;/p&gt;
&lt;p&gt;This tweet is crazy to me. As a hetero white man, I&#39;ve never felt this, but it is enough of an issue that many people have also felt the need to utilize this tactic.&lt;/p&gt;
&lt;blockquote class=&quot;twitter-tweet&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;Women: Have you ever had a man deliver a message or a point you thought was important because you knew the room was more likely to listen?&lt;/p&gt;&amp;mdash; Ashley Willis (McNamara) (@ashleymcnamara) &lt;a href=&quot;https://twitter.com/ashleymcnamara/status/1235684675609178112?ref_src=twsrc%5Etfw&quot;&gt;March 5, 2020&lt;/a&gt;&lt;/blockquote&gt; &lt;script async=&quot;&quot; src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt; 
&lt;p&gt;I will advocate for equality by offering any assistance that I can to the women around me. These may be small things, but I&#39;ll make sure that I endorse them on LinkedIn and write personal recommendations so that they can more easily be found as the strong developers that they are. My coworker was looking for a new job. She and I spent time working together to make ourselves more employable. This included training courses on various sites, sharing books back and forth for learning, and tell one another about jobs that we had found. I made it a focus of mine to think of her anytime that I was researching things about interviewing or bettering my hirability.&lt;/p&gt;
&lt;p&gt;My advice for fellow allies to support women and any minority group member in your life is to first acknowledge that their career is set at a steep incline. Know that there are factors at play that you will not have used against you. You can help to insure that everyone around you gets their due recognition. Simply allowing light to shine on the good things being done by women (or any minority group member). The women around you are likely to be some of the best workers due to the difficulties that they face. Make sure that any recognition programs that you have or any mentions that occur in review rituals include the women. If we aren&#39;t intentional about equality then it is easy to even accidentally list someone last that may have been the hardest worker. Also, make sure that at no point are you alienating women in conversation. This really goes for anyone that is a part of a given group. The moment that you begin talking about something that isn&#39;t the focus or interest of the entire group then you begin to alienate people, and inadvertently you are building stronger bonds between the people in that conversation while the others are left out made to feel less than whole members of the group. This isn&#39;t to say that you can&#39;t have friends in your work group and that you can&#39;t talk to them about the things that you enjoy, but while you are with the whole group then you should work to include everyone together so that all of the group members are bonded stronger.&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>Agility and Improvement</title>
		<category>agile"</category>
		<category>productivity"</category>
		<category>career"</category>
		<category>development"</category>
		<summary>Agile methodologies are really easy to let become strict process instead of dynamic workflow</summary>
		<link href="https://coreydmccarty.dev/posts/2020_03_17_agility_and_improvement/"/>
		<updated>2020-03-17T00:00:00-00:00</updated>
		<id>https://coreydmccarty.dev/posts/2020_03_17_agility_and_improvement/</id>
		<content type="html">&lt;p&gt;Agile (Capital A) is something that many/most software development teams are adopting, whether that is pure Agile, Safe, Scrum, Kanban, or some other thing that I don&#39;t know. The majority of the issues that I hear about surrounding Agile are having to do with forgetting the manifesto OR forgetting to be agile (lowercase a). So let&#39;s take a look at what can be done about these.&lt;/p&gt;
&lt;h2&gt;Agile Manifesto:&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;We are uncovering better ways of developing software by doing it and helping others do it.

Through this work we have come to value:

Individuals and interactions 
	over processes and tools

Working software 
	over comprehensive documentation

Customer collaboration 
	over contract negotiation

Responding to change 
	over following a plan

That is, while there is value in the items on the right, we value the items on the left more
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Processes and tools are largely the way that management ensures that a team is on track. I regularly hear complaints about stories not being updated in the agile management software, or processes not being followed. I find that this largely means that we aren&#39;t interacting effectively. While individual empowerment is largely a pillar of agile, being a part of a team where you aren&#39;t the only one interacting with or planning the activies for a given product/application means that you must communicate effectively. In order to reduce your focus on processes and tools you have to get to a point where your team communicates well without the rigidness of those things.&lt;/p&gt;
&lt;p&gt;Comprehensive documentation would be really nice in an ideal world. I personally work with fifteen applications which have been managed by a team that has completely turned over at least twice. There have been large blindspots in regard to the applciations&#39; functionalities which is an ongoing process of remedying. But, even for the things that we have sufficient documentation there is an issue of being able to find it. Further as the team has turned over through the last decade, the code styles are a world away from consistent. The betterment of the team and the code has not come through writing large documents that explain everything, but instead through taking the time to gather and share knowledge as necessary. It has been my experience that if your organizational skills are lacking then the documentation will likely not be a fix for it. Making sure that we have testing suites that find issues and profiling systems to evaluate issues with runtime have been paramount in our moving forward.&lt;/p&gt;
&lt;p&gt;Contract negotiations can be really helpful but will ultimately have details that are left out. This comes down to one of the fundamental issues with waterfall as a whole. You would take the contract that was poured over for weeks, and then you would take it with a bit of interpretation and make what you believed to be desired. Customer collaboration allows for us to ask the questions as we have them and not make assumptions that go unchecked until final delivery. Customer collaboration also means that iterative deliveries can be checked agaisnt assumptions that customers may have had without ever having specified them. You still wind up with an effective contract, but by letting that negotiation be ongoing collaboration rather than a pre-development meetings that produce a clean cut document you minimize the amount of work done on something that is not wanted.&lt;/p&gt;
&lt;p&gt;Following a plan goes hand in hand with contract negotiation. Responding to change means that you are allowing for feedback that prevents excessive time waste in direction corrections.&lt;/p&gt;
&lt;h2&gt;Lowercase a agile&lt;/h2&gt;
&lt;p&gt;Going back to the bit about processes and tools, I believe that the problem comes down largely to things that are mostly minor details. Do you estimate story points by days of work or complexity of work? Do you assign multiple people to the same story or make a copy of the story for each person involved? You can go either way with these and several other decisions and have them be helpful to your team, but ultimately you should remember that if any part of the process or the tool are getting in the way of doing actual work then you need to evaluate how to remedy that.&lt;/p&gt;
&lt;p&gt;My team lost its scrum master recently after his having been with the team for more than a year. Initially we believed that it would be disasterous as we have had difficulties with several parts of our process in the past (merging of two whole scrum teams, changing managers a couple of times, completely differing approaches to standup) and he was a large part of helping us to reign in those issues. But it&#39;s a really crazy thing. When we learned that we would not be getting a replacement of our scrum master we were forced to divy out his work. This brought about executions of different steps with different understandings and personal tendencies. And in this change we have become stronger. The people that were interested in the different processes were able to consider how they could better their part of the process instead of one person trying to figure out all of the things.&lt;/p&gt;
&lt;p&gt;Our manager takes over a certain number of administration activities like scheduling meetings, setting iteneraries for them, and helping with outside dependencies. She does these things with the knowledge and weight of being a manager which seems to get us farther.  Our daily standups are run by one of our newest members which led to his being engaged during the discussion of things he wasn&#39;t involved in and he became more knowledgable. One of our lead developers took over for backlog grooming and sprint planning and we suddenly have fixed our issues with defining done. I&#39;ve picked up retrospectives and without thought I began by asking each person for their input on &#39;done well&#39;, &#39;need to improve&#39;, and &#39;action items&#39; and we are getting more feedback from more people than ever before. We collectively took on our Program Increment planning activities which occur for every five sprints, and when we showed up without the pre-planning things done we were actually able to plan more effectively because everyone was more aware of our objectives and epics/features in addition to our business team having better understanding of why we are doing what we are and being able to communicate back to their people about the benefits that these things will bring to the company and our clients. We actually got to the point where we are regularly performing these rituals regularly in addition to some other sync activities and the meetings are more focused in their attendance so that we aren&#39;t wasting the time of people who have no input to offer for administrative discussions.&lt;/p&gt;
&lt;p&gt;Aside from just the changes that came with the loss of our scrum master, we figured out that the way we had been tracking support issues and Keep The Lights On (KTLO) activites was not providing adequate visibility, bandwidth, and pushback. We have since stopped tracking support activities as stories and instead opened a request queue for such things. We have reduced our velocity to better accommodate those activities, and we have separated out our bandwidth by onsite development, offshore development, and testing in order that we may better distribute/track our work in accordance with the people that will actually be performing it.&lt;/p&gt;
&lt;p&gt;I don&#39;t offer the things that my team has done to give our example as perfection (far from it), but as growth. We have tramendously changed the way that we carry out agile practices and are becoming stronger for it. I, being transferred to the team more recently than most, have been finding several issues with our process and questioning everyone as to why we do things the way that we do. In the process I am able to learn the good and bad reasons that we operate as we do, and I&#39;ve been able to offer thoughts as to how we might better our processes. Just opening this discussion (because I&#39;m quite open with my thoughts) has led to further discussion of streamlining our activities. There were initially a handful of meetings where we devolved into verbal sparring matches and the majority of people were quite upset. After we got everything off of our collective chest then we were able to begin seeing things from the other perspectives, function as a more cohesive team, and find value in our tramendous diversity of skills and experience.&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>Bullet Journaling Basics</title>
		<category>productivity"</category>
		<category>bulletjournal"</category>
		<category>tools"</category>
		<category>journal"</category>
		<summary>Where do you start with bullet journaling?</summary>
		<link href="https://coreydmccarty.dev/posts/2020_03_18_bullet_journal_basics/"/>
		<updated>2020-03-18T00:00:00-00:00</updated>
		<id>https://coreydmccarty.dev/posts/2020_03_18_bullet_journal_basics/</id>
		<content type="html">&lt;p&gt;As a developer with ADHD I&#39;ve found myself frequently talking about bullet journaling. It has become a really popular tool with uncountable YouTube videos surrounding different people&#39;s methods. You many be asking yourself &amp;quot;what is a bullet journal?&amp;quot; Bullet Journaling is a technique created by Ryder Carrol, a digital product designer and authoer that was diagnosed with learning disabilities early in life. He created the technique for himself through years of trial and error, and now has a &lt;a href=&quot;https://bulletjournal.com/&quot;&gt;website&lt;/a&gt; where he shares his methods. I will summarize here but I highly recommend reading more on his website and watching his YouTube videos as he goes into far more detail than I intend to.&lt;/p&gt;
&lt;p&gt;Bullet journaling is a type of rapid logging that can allow for tracking of tasks, events, and data in an imperfect format. The central design uses different bullets for tasks, notes, and events in order to track your day. While the basis is rapid logging, there is also a periodic activity called a migration where you periodically go through the days since your last migration in order to gather missed items, and evaluate when they should be done if at all.&lt;/p&gt;
&lt;h2&gt;Collections&lt;/h2&gt;
&lt;p&gt;A collection is a pair of pages that is viewable together when the book is open.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Index / Table of Contents&lt;br&gt;
Maps page numbers to given logs&lt;/li&gt;
&lt;li&gt;Future Log&lt;br&gt;
A collection that is divided into regions for six month period&lt;/li&gt;
&lt;li&gt;Monthly Log
&lt;ul&gt;
&lt;li&gt;Calendar Page
Listing of the days of the month&lt;/li&gt;
&lt;li&gt;Task Page
Listing of tasks that are intended for completion during that month&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Daily Log&lt;br&gt;
An ongoing collection for the rapid logging of individual days&lt;/li&gt;
&lt;li&gt;Custom Collection&lt;br&gt;
One that is for gathering information on a given topic for ongoing usage of your own design. Tailoring these to your purposes can be one of the most power things about bullet journaling.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Bullets&lt;/h2&gt;
&lt;p&gt;These are signifiers giving type to the item being logged and drawn to the left of the log entry in such a way that bullets are stacked above one another (unless nested) and clearly set apart from the beginning of the log entry. The focus of rapid logging is to make entries when they occur and not to worry with organizing entries by type.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Tasks&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;initially denoted with a dot&lt;/li&gt;
&lt;li&gt;X - upon completion&lt;/li&gt;
&lt;li&gt;&amp;gt; - migrated to a collection&lt;/li&gt;
&lt;li&gt;&amp;lt; - migrated to Future Log&lt;/li&gt;
&lt;li&gt;crossed out if no longer necessary&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Events
Denoted with a circle&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Notes
Denoted by a dash&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Signifiers&lt;br&gt;
These are ways of setting things apart from the rest and include specific symbols that appear to the left of the previous bullet types mentioned. The ones listed on the website are below.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;* = priority&lt;/li&gt;
&lt;li&gt;! = Inspiring&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Migration&lt;/h2&gt;
&lt;p&gt;In order to harness the power of the logs, it is important to go back and address tasks that haven&#39;t been completed. It is recommended to perform a migration at the end of the month. If you do this when you create your monthly log then you can easily migrate the tasks that need to be done soon into the task page of the monthly log. If the item is something that should be scheduled further out then you can migrate it to the future log.&lt;/p&gt;
&lt;h2&gt;Next Steps&lt;/h2&gt;
&lt;p&gt;I haven&#39;t personally taken the next step of buying the two books that are available on the website, but after having used my bullet journal for more than a year I have made a few modifications to fit my life.&lt;/p&gt;
&lt;p&gt;Many people find that using different colors, stickers, or other things help them. The only remotely artistic improvement that I&#39;ve made is that I use two different colored inks. I use a black ink for headings, and any drawn dividing lines, and a blue pen for everything else.&lt;/p&gt;
&lt;h3&gt;Sprint Log&lt;/h3&gt;
&lt;p&gt;As a member of an agile team, I thought that it would be beneficial to track stories in this way. I was ultimately unable to figure out a good way to do this in a manageable way with daily tasks. The premise was basically that I would have a collection where all of my stories were listed with subtasks so that I could track the work done on each and keep track of things to circle back on. I still had tasks that were unrelated to track daily and found myself still keeping a daily log which felt a bit cumbersome.&lt;/p&gt;
&lt;h3&gt;Weekly Log&lt;/h3&gt;
&lt;p&gt;Instead of a daily log as described on the website, I adopted a week based style which I&#39;ve found helpful.&lt;/p&gt;
&lt;h4&gt;Left Page&lt;/h4&gt;
&lt;p&gt;At the top is a table for my daily tasks so that I can mark them as completed or cancelled. It helps me to not only remember to do the things everyday, but also looking back to see what I missed. I got tired of making the same few tasks on everyday.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:left&quot;&gt;&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;M&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;T&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;W&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;R&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;F&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Employer Mail&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;x&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;x&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;x&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;x&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Client Mail&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;x&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;x&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;x&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;x&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;x&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Daily Standup&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;x&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;x&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;-&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;-&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;x&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Agile Manager&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;x&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;x&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Below this is a notes section that section off for the larger tasks that I&#39;m working on. I&#39;ve adapted my sprint tracking efforts from the failed sprint log to bring the story names into this section and allow myself to track next steps when I come across them.&lt;/p&gt;
&lt;h4&gt;Right page&lt;/h4&gt;
&lt;p&gt;Here I do the exact things that would be in a daily log as described before, but I find it helpful to have them grouped in blocks of weeks instead of the generic daily log which could have an entire month of days running together however they fit on pages.&lt;/p&gt;
&lt;h3&gt;My Custom Collections&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Learning and career direction are important in software development as you so often come across new terms and tools. As a way to help myself to track the things that come up without stopping my current work or trying to learn new things before finishing the work at hand I have made a collection for learning. It&#39;s broken down into languages, frameworks, technologies, processes/principles that I&#39;d like to learn about on one page. The other page of that collection has a list of learning resources that I don&#39;t already have committed to memory, and a list of things to research. This list of things to research is basically things that I&#39;ve seen named and didn&#39;t know what they were.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Ideas for blog posts and projects to do in the future. I also keep blog ideas in a markdown list in the repository where I keep my blog (carefully gitignored), and I have a list of project ideas on Google Keep. You never know when you will come across an idea and I find myself using speak to text for sending myself text messages and gathering them into other places when I have more time.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Pregnancy information can be easy to forget with all that is going on. While my wife was pregnant we would come up with questions for the doctor and unless we had the written down we would surely forget when we were in front of him. I would record these questions, and track any things that the doctor said for us to do in this collection.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</content>
	</entry>
</feed>
